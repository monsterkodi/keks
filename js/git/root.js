// koffee 1.4.0

/*
00000000    0000000    0000000   000000000  
000   000  000   000  000   000     000     
0000000    000   000  000   000     000     
000   000  000   000  000   000     000     
000   000   0000000    0000000      000
 */
var _, childp, dir, empty, fixPath, fs, gitCmd, gitOpt, ref, root, slash, valid;

ref = require('kxk'), valid = ref.valid, empty = ref.empty, slash = ref.slash, childp = ref.childp, fs = ref.fs, _ = ref._;

fixPath = function(p) {
    var ref1;
    p = p.trim();
    if ((p[0] === (ref1 = p[2]) && ref1 === '/')) {
        p = p[1].toUpperCase() + ':' + p.slice(2);
    }
    return slash.resolve(p);
};

gitCmd = 'git rev-parse --show-toplevel';

gitOpt = function(cwd) {
    return {
        cwd: cwd,
        encoding: 'utf8',
        stdio: ['pipe', 'pipe', 'ignore']
    };
};

root = function(pth, cb) {
    var err;
    pth = slash.resolve(pth);
    if (_.isFunction(cb)) {
        if (empty(pth)) {
            return cb('');
        } else {
            pth = slash.unslash(pth);
            return slash.dirExists(pth, function(stat) {
                pth = valid(stat) ? slash.unslash(pth) : slash.dir(pth);
                if (empty(pth)) {
                    return cb('');
                } else {
                    return childp.exec(gitCmd, gitOpt(pth), function(err, r) {
                        if (valid(err)) {
                            return cb('');
                        } else {
                            return cb(fixPath(r));
                        }
                    });
                }
            });
        }
    } else {
        if (empty(pth)) {
            return '';
        }
        try {
            pth = slash.dirExists(pth) ? slash.unslash(pth) : slash.dir(pth);
            if (empty(pth)) {
                return '';
            }
            return fixPath(childp.execSync(gitCmd, gitOpt(pth)));
        } catch (error) {
            err = error;
            return '';
        }
    }
};

if (module.parent) {
    module.exports = root;
} else {
    if (!empty(process.argv[2])) {
        dir = slash.resolve(process.argv[2]);
    } else {
        dir = process.cwd();
    }
    console.log(root(dir));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsTUFBeUMsT0FBQSxDQUFRLEtBQVIsQ0FBekMsRUFBRSxpQkFBRixFQUFTLGlCQUFULEVBQWdCLGlCQUFoQixFQUF1QixtQkFBdkIsRUFBK0IsV0FBL0IsRUFBbUM7O0FBRW5DLE9BQUEsR0FBVSxTQUFDLENBQUQ7QUFFTixRQUFBO0lBQUEsQ0FBQSxHQUFJLENBQUMsQ0FBQyxJQUFGLENBQUE7SUFDSixJQUFHLENBQUEsQ0FBRSxDQUFBLENBQUEsQ0FBRixhQUFRLENBQUUsQ0FBQSxDQUFBLEVBQVYsUUFBQSxLQUFnQixHQUFoQixDQUFIO1FBQ0ksQ0FBQSxHQUFJLENBQUUsQ0FBQSxDQUFBLENBQUUsQ0FBQyxXQUFMLENBQUEsQ0FBQSxHQUFxQixHQUFyQixHQUEyQixDQUFDLENBQUMsS0FBRixDQUFRLENBQVIsRUFEbkM7O0FBRUEsV0FBTyxLQUFLLENBQUMsT0FBTixDQUFjLENBQWQ7QUFMRDs7QUFPVixNQUFBLEdBQVU7O0FBQ1YsTUFBQSxHQUFTLFNBQUMsR0FBRDtXQUFTO1FBQUEsR0FBQSxFQUFJLEdBQUo7UUFBUyxRQUFBLEVBQVMsTUFBbEI7UUFBMEIsS0FBQSxFQUFNLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsUUFBakIsQ0FBaEM7O0FBQVQ7O0FBRVQsSUFBQSxHQUFPLFNBQUMsR0FBRCxFQUFNLEVBQU47QUFFSCxRQUFBO0lBQUEsR0FBQSxHQUFNLEtBQUssQ0FBQyxPQUFOLENBQWMsR0FBZDtJQUVOLElBQUcsQ0FBQyxDQUFDLFVBQUYsQ0FBYSxFQUFiLENBQUg7UUFFSSxJQUFHLEtBQUEsQ0FBTSxHQUFOLENBQUg7bUJBQ0ksRUFBQSxDQUFHLEVBQUgsRUFESjtTQUFBLE1BQUE7WUFHSSxHQUFBLEdBQU0sS0FBSyxDQUFDLE9BQU4sQ0FBYyxHQUFkO21CQUVOLEtBQUssQ0FBQyxTQUFOLENBQWdCLEdBQWhCLEVBQXFCLFNBQUMsSUFBRDtnQkFDakIsR0FBQSxHQUFTLEtBQUEsQ0FBTSxJQUFOLENBQUgsR0FBb0IsS0FBSyxDQUFDLE9BQU4sQ0FBYyxHQUFkLENBQXBCLEdBQTRDLEtBQUssQ0FBQyxHQUFOLENBQVUsR0FBVjtnQkFDbEQsSUFBRyxLQUFBLENBQU0sR0FBTixDQUFIOzJCQUNJLEVBQUEsQ0FBRyxFQUFILEVBREo7aUJBQUEsTUFBQTsyQkFHSSxNQUFNLENBQUMsSUFBUCxDQUFZLE1BQVosRUFBb0IsTUFBQSxDQUFPLEdBQVAsQ0FBcEIsRUFBaUMsU0FBQyxHQUFELEVBQUssQ0FBTDt3QkFDN0IsSUFBRyxLQUFBLENBQU0sR0FBTixDQUFIO21DQUNJLEVBQUEsQ0FBRyxFQUFILEVBREo7eUJBQUEsTUFBQTttQ0FHSSxFQUFBLENBQUcsT0FBQSxDQUFRLENBQVIsQ0FBSCxFQUhKOztvQkFENkIsQ0FBakMsRUFISjs7WUFGaUIsQ0FBckIsRUFMSjtTQUZKO0tBQUEsTUFBQTtRQW1CSSxJQUFhLEtBQUEsQ0FBTSxHQUFOLENBQWI7QUFBQSxtQkFBTyxHQUFQOztBQUVBO1lBQ0ksR0FBQSxHQUFTLEtBQUssQ0FBQyxTQUFOLENBQWdCLEdBQWhCLENBQUgsR0FBNkIsS0FBSyxDQUFDLE9BQU4sQ0FBYyxHQUFkLENBQTdCLEdBQXFELEtBQUssQ0FBQyxHQUFOLENBQVUsR0FBVjtZQUMzRCxJQUFhLEtBQUEsQ0FBTSxHQUFOLENBQWI7QUFBQSx1QkFBTyxHQUFQOztBQUNBLG1CQUFPLE9BQUEsQ0FBUSxNQUFNLENBQUMsUUFBUCxDQUFnQixNQUFoQixFQUF3QixNQUFBLENBQU8sR0FBUCxDQUF4QixDQUFSLEVBSFg7U0FBQSxhQUFBO1lBS007QUFDRixtQkFBTyxHQU5YO1NBckJKOztBQUpHOztBQXVDUCxJQUFHLE1BQU0sQ0FBQyxNQUFWO0lBRUksTUFBTSxDQUFDLE9BQVAsR0FBaUIsS0FGckI7Q0FBQSxNQUFBO0lBS0ksSUFBRyxDQUFJLEtBQUEsQ0FBTSxPQUFPLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBbkIsQ0FBUDtRQUNJLEdBQUEsR0FBTSxLQUFLLENBQUMsT0FBTixDQUFjLE9BQU8sQ0FBQyxJQUFLLENBQUEsQ0FBQSxDQUEzQixFQURWO0tBQUEsTUFBQTtRQUdJLEdBQUEsR0FBTSxPQUFPLENBQUMsR0FBUixDQUFBLEVBSFY7O0lBS0EsT0FBQSxDQUFBLEdBQUEsQ0FBSSxJQUFBLENBQUssR0FBTCxDQUFKLEVBVkoiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbjAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4wMDAgICAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuIyMjXG5cbnsgdmFsaWQsIGVtcHR5LCBzbGFzaCwgY2hpbGRwLCBmcywgXyB9ID0gcmVxdWlyZSAna3hrJ1xuXG5maXhQYXRoID0gKHApIC0+XG4gICAgXG4gICAgcCA9IHAudHJpbSgpXG4gICAgaWYgcFswXSA9PSBwWzJdID09ICcvJ1xuICAgICAgICBwID0gcFsxXS50b1VwcGVyQ2FzZSgpICsgJzonICsgcC5zbGljZSAyXG4gICAgcmV0dXJuIHNsYXNoLnJlc29sdmUgcCAgICBcblxuZ2l0Q21kICA9ICdnaXQgcmV2LXBhcnNlIC0tc2hvdy10b3BsZXZlbCdcbmdpdE9wdCA9IChjd2QpIC0+IGN3ZDpjd2QsIGVuY29kaW5nOid1dGY4Jywgc3RkaW86WydwaXBlJywgJ3BpcGUnLCAnaWdub3JlJ11cbiAgICBcbnJvb3QgPSAocHRoLCBjYikgLT5cblxuICAgIHB0aCA9IHNsYXNoLnJlc29sdmUgcHRoXG4gICAgXG4gICAgaWYgXy5pc0Z1bmN0aW9uIGNiXG4gICAgICAgIFxuICAgICAgICBpZiBlbXB0eSBwdGhcbiAgICAgICAgICAgIGNiICcnXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHB0aCA9IHNsYXNoLnVuc2xhc2ggcHRoXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNsYXNoLmRpckV4aXN0cyBwdGgsIChzdGF0KSAtPlxuICAgICAgICAgICAgICAgIHB0aCA9IGlmIHZhbGlkKHN0YXQpIHRoZW4gc2xhc2gudW5zbGFzaChwdGgpIGVsc2Ugc2xhc2guZGlyKHB0aClcbiAgICAgICAgICAgICAgICBpZiBlbXB0eSBwdGhcbiAgICAgICAgICAgICAgICAgICAgY2IgJycgXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjaGlsZHAuZXhlYyBnaXRDbWQsIGdpdE9wdChwdGgpLCAoZXJyLHIpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiB2YWxpZCBlcnJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYiAnJyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYiBmaXhQYXRoIHJcbiAgICBlbHNlXG4gICAgXG4gICAgICAgIHJldHVybiAnJyBpZiBlbXB0eSBwdGhcbiAgICAgICAgXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgcHRoID0gaWYgc2xhc2guZGlyRXhpc3RzKHB0aCkgdGhlbiBzbGFzaC51bnNsYXNoKHB0aCkgZWxzZSBzbGFzaC5kaXIocHRoKVxuICAgICAgICAgICAgcmV0dXJuICcnIGlmIGVtcHR5IHB0aFxuICAgICAgICAgICAgcmV0dXJuIGZpeFBhdGggY2hpbGRwLmV4ZWNTeW5jIGdpdENtZCwgZ2l0T3B0KHB0aClcbiAgICAgICAgICAgIFxuICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgIHJldHVybiAnJ1xuXG4jIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAwMDAwMDAwICAgXG4jIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuIyAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwICBcblxuaWYgbW9kdWxlLnBhcmVudFxuICAgIFxuICAgIG1vZHVsZS5leHBvcnRzID0gcm9vdFxuICAgIFxuZWxzZVxuICAgIGlmIG5vdCBlbXB0eSBwcm9jZXNzLmFyZ3ZbMl1cbiAgICAgICAgZGlyID0gc2xhc2gucmVzb2x2ZSBwcm9jZXNzLmFyZ3ZbMl1cbiAgICBlbHNlXG4gICAgICAgIGRpciA9IHByb2Nlc3MuY3dkKClcbiAgICAgICAgXG4gICAgbG9nIHJvb3QgZGlyXG4gICAgIl19
//# sourceURL=../../coffee/git/root.coffee