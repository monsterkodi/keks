// koffee 1.4.0

/*
00000000  0000000    000  000000000   0000000   00000000   
000       000   000  000     000     000   000  000   000  
0000000   000   000  000     000     000   000  0000000    
000       000   000  000     000     000   000  000   000  
00000000  0000000    000     000      0000000   000   000
 */
var $, BaseEditor, Editor, File, FileEditor, _, elem, empty, keyinfo, klog, open, post, ref, slash, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), slash = ref.slash, empty = ref.empty, post = ref.post, open = ref.open, elem = ref.elem, stopEvent = ref.stopEvent, keyinfo = ref.keyinfo, klog = ref.klog, $ = ref.$, _ = ref._;

File = require('./tools/file');

BaseEditor = require('./editor/editor');

FileEditor = require('./editor/fileeditor');

Editor = (function() {
    function Editor(path) {
        this.onMenuAction = bind(this.onMenuAction, this);
        this.close = bind(this.close, this);
        this.onKey = bind(this.onKey, this);
        var main;
        this.div = elem({
            "class": 'editor',
            tabindex: 1
        });
        this.focus = document.activeElement;
        main = $('#main');
        main.appendChild(this.div);
        this.editor = new FileEditor(this.div);
        post.on('menuAction', this.onMenuAction);
        this.div.addEventListener('keydown', this.onKey);
        this.div.focus();
        this.editor.setCurrentFile(path);
    }

    Editor.prototype.onKey = function(event) {
        var c, char, combo, key, mod, ref1;
        ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo, char = ref1.char;
        switch (combo) {
            case 'ctrl+w':
                return stopEvent(event, this.close());
            case 'esc':
                if (!this.editor.dirty) {
                    return stopEvent(event, this.close());
                }
                break;
            case 'space':
                c = this.editor.mainCursor();
                if (c[0] === 1 && c[1] === 0) {
                    return stopEvent(event, this.close());
                }
        }
        return klog('onKey', mod, key, combo);
    };

    Editor.prototype.close = function() {
        this.div.remove();
        this.focus.focus();
        this.editor.del();
        return delete this.editor;
    };

    Editor.prototype.resized = function() {
        var ref1;
        return (ref1 = this.editor) != null ? ref1.resized() : void 0;
    };

    Editor.prototype.onMenuAction = function(name, args) {
        var action;
        if (!this.editor) {
            return;
        }
        klog("editor menu action! '" + name + "' args:", args);
        if (action = BaseEditor.actionWithName(name)) {
            if ((action.key != null) && _.isFunction(this.editor[action.key])) {
                this.editor[action.key](args.actarg);
                return;
            }
        }
        switch (name) {
            case 'Close Editor':
                return this.close();
            case 'Undo':
                return this.editor["do"].undo();
            case 'Redo':
                return this.editor["do"].redo();
            case 'Cut':
                return this.editor.cut();
            case 'Copy':
                return this.editor.copy();
            case 'Paste':
                return this.editor.paste();
            case 'Toggle Center Text':
                return toggleCenterText();
            case 'Increase':
                return changeFontSize(+1);
            case 'Decrease':
                return changeFontSize(-1);
            case 'Reset':
                return resetFontSize();
            case 'Save':
                return post.emit('saveFile');
            case 'Save As ...':
                return post.emit('saveFileAs');
            case 'Revert':
                return post.emit('reloadFile');
        }
        klog("unhandled menu action! '" + name + "' args:", args);
        return 'unhandled';
    };

    return Editor;

})();

module.exports = Editor;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/editor.coffee