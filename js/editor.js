// koffee 1.4.0

/*
00000000  0000000    000  000000000   0000000   00000000   
000       000   000  000     000     000   000  000   000  
0000000   000   000  000     000     000   000  0000000    
000       000   000  000     000     000   000  000   000  
00000000  0000000    000     000      0000000   000   000
 */
var $, BaseEditor, Editor, File, FileEditor, Header, _, clamp, elem, empty, keyinfo, klog, open, post, prefs, ref, slash, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), slash = ref.slash, empty = ref.empty, clamp = ref.clamp, prefs = ref.prefs, post = ref.post, open = ref.open, elem = ref.elem, stopEvent = ref.stopEvent, keyinfo = ref.keyinfo, klog = ref.klog, $ = ref.$, _ = ref._;

File = require('./tools/file');

Header = require('./header');

BaseEditor = require('./editor/editor');

FileEditor = require('./editor/fileeditor');

Editor = (function() {
    function Editor(browser, path) {
        var main;
        this.browser = browser;
        this.onMenuAction = bind(this.onMenuAction, this);
        this.close = bind(this.close, this);
        this.onKey = bind(this.onKey, this);
        this.onDirty = bind(this.onDirty, this);
        this.div = elem({
            "class": 'editor',
            tabindex: 1
        });
        this.focus = document.activeElement;
        main = $('#main');
        main.appendChild(this.div);
        this.editor = new FileEditor(this.div);
        post.on('menuAction', this.onMenuAction);
        post.on('dirty', this.onDirty);
        this.div.addEventListener('keydown', this.onKey);
        this.div.focus();
        this.editor.setCurrentFile(path);
        if (prefs.get('centerText')) {
            this.editor.centerText(true, 0);
        }
        this.header = new Header(this.browser);
        this.header.setFile(path);
    }

    Editor.prototype.onDirty = function(dirty) {
        var ref1;
        return (ref1 = this.header) != null ? ref1.setDirty(dirty) : void 0;
    };

    Editor.prototype.onKey = function(event) {
        var c, char, combo, key, mod, ref1;
        ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo, char = ref1.char;
        switch (combo) {
            case 'ctrl+w':
                return stopEvent(event, this.close());
            case 'esc':
                if (!this.editor.dirty) {
                    return stopEvent(event, this.close());
                }
                break;
            case 'space':
                c = this.editor.mainCursor();
                if (c[0] === 1 && c[1] === 0) {
                    return stopEvent(event, this.close());
                }
        }
    };

    Editor.prototype.close = function() {
        var ref1, ref2;
        if ((ref1 = this.editor) != null) {
            ref1.saveScrollCursorsAndSelections();
        }
        this.browser.viewer = null;
        this.header.del();
        this.div.remove();
        this.focus.focus();
        if ((ref2 = this.editor) != null) {
            ref2.del();
        }
        return delete this.editor;
    };

    Editor.prototype.resized = function() {
        var ref1;
        if ((ref1 = this.editor) != null) {
            ref1.resized();
        }
        if (prefs.get('centerText', false)) {
            return this.editor.centerText(true, 200);
        }
    };

    Editor.prototype.toggleCenterText = function() {
        var ref1, restoreInvisibles;
        klog('toggleCenterText');
        if (prefs.get("invisiblesâ–¸" + ((ref1 = this.editor.currentFile) != null ? ref1 : this.editor.name), false)) {
            this.editor.toggleInvisibles();
            restoreInvisibles = true;
        }
        if (!prefs.get('centerText', false)) {
            prefs.set('centerText', true);
            this.editor.centerText(true);
        } else {
            prefs.set('centerText', false);
            this.editor.centerText(false);
        }
        if (restoreInvisibles) {
            return this.editor.toggleInvisibles();
        }
    };

    Editor.prototype.setFontSize = function(s) {
        if (!_.isFinite(s)) {
            s = prefs.get('editorFontSize', 19);
        }
        s = clamp(8, 100, s);
        prefs.set('editorFontSize', s);
        this.editor.setFontSize(s);
        if (this.editor.currentFile != null) {
            return this.editor.setCurrentFile(this.editor.currentFile);
        }
    };

    Editor.prototype.changeFontSize = function(d) {
        var f;
        if (this.editor.size.fontSize >= 30) {
            f = 4;
        } else if (this.editor.size.fontSize >= 50) {
            f = 10;
        } else if (this.editor.size.fontSize >= 20) {
            f = 2;
        } else {
            f = 1;
        }
        return this.setFontSize(this.editor.size.fontSize + f * d);
    };

    Editor.prototype.resetFontSize = function() {
        var defaultFontSize;
        defaultFontSize = prefs.get('editorDefaultFontSize', 19);
        prefs.set('editorFontSize', defaultFontSize);
        return this.setFontSize(defaultFontSize);
    };

    Editor.prototype.onMenuAction = function(name, args) {
        var action;
        if (!this.editor) {
            return;
        }
        klog("editor menu action! '" + name + "' args:", args);
        if (action = BaseEditor.actionWithName(name)) {
            if ((action.key != null) && _.isFunction(this.editor[action.key])) {
                this.editor[action.key](args.actarg);
                return;
            }
        }
        switch (name) {
            case 'Close Editor':
                return this.close();
            case 'Undo':
                return this.editor["do"].undo();
            case 'Redo':
                return this.editor["do"].redo();
            case 'Cut':
                return this.editor.cut();
            case 'Copy':
                return this.editor.copy();
            case 'Paste':
                return this.editor.paste();
            case 'Toggle Center Text':
                return this.toggleCenterText();
            case 'Increase':
                return this.changeFontSize(+1);
            case 'Decrease':
                return this.changeFontSize(-1);
            case 'Reset':
                return this.resetFontSize();
            case 'Save':
                return this.editor.save();
            case 'Save As ...':
                return this.editor.saveAs();
            case 'Revert':
                return this.editor.revert();
        }
        klog("unhandled menu action! '" + name + "' args:", args);
        return 'unhandled';
    };

    return Editor;

})();

module.exports = Editor;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSwrSEFBQTtJQUFBOztBQVFBLE1BQW1GLE9BQUEsQ0FBUSxLQUFSLENBQW5GLEVBQUUsaUJBQUYsRUFBUyxpQkFBVCxFQUFnQixpQkFBaEIsRUFBdUIsaUJBQXZCLEVBQThCLGVBQTlCLEVBQW9DLGVBQXBDLEVBQTBDLGVBQTFDLEVBQWdELHlCQUFoRCxFQUEyRCxxQkFBM0QsRUFBb0UsZUFBcEUsRUFBMEUsU0FBMUUsRUFBNkU7O0FBRTdFLElBQUEsR0FBYSxPQUFBLENBQVEsY0FBUjs7QUFDYixNQUFBLEdBQWEsT0FBQSxDQUFRLFVBQVI7O0FBQ2IsVUFBQSxHQUFhLE9BQUEsQ0FBUSxpQkFBUjs7QUFDYixVQUFBLEdBQWEsT0FBQSxDQUFRLHFCQUFSOztBQUVQO0lBRUMsZ0JBQUMsT0FBRCxFQUFXLElBQVg7QUFFQyxZQUFBO1FBRkEsSUFBQyxDQUFBLFVBQUQ7Ozs7O1FBRUEsSUFBQyxDQUFBLEdBQUQsR0FBTyxJQUFBLENBQUs7WUFBQSxDQUFBLEtBQUEsQ0FBQSxFQUFNLFFBQU47WUFBZSxRQUFBLEVBQVMsQ0FBeEI7U0FBTDtRQUVQLElBQUMsQ0FBQSxLQUFELEdBQVMsUUFBUSxDQUFDO1FBRWxCLElBQUEsR0FBTSxDQUFBLENBQUUsT0FBRjtRQUVOLElBQUksQ0FBQyxXQUFMLENBQWlCLElBQUMsQ0FBQSxHQUFsQjtRQUVBLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBSSxVQUFKLENBQWUsSUFBQyxDQUFBLEdBQWhCO1FBRVYsSUFBSSxDQUFDLEVBQUwsQ0FBUSxZQUFSLEVBQXFCLElBQUMsQ0FBQSxZQUF0QjtRQUNBLElBQUksQ0FBQyxFQUFMLENBQVEsT0FBUixFQUFnQixJQUFDLENBQUEsT0FBakI7UUFFQSxJQUFDLENBQUEsR0FBRyxDQUFDLGdCQUFMLENBQXNCLFNBQXRCLEVBQWdDLElBQUMs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U1MsVUFUVDtBQVNzQyx1QkFBTyxJQUFDLENBQUEsY0FBRCxDQUFnQixDQUFDLENBQWpCO0FBVDdDLGlCQVVTLFVBVlQ7QUFVc0MsdUJBQU8sSUFBQyxDQUFBLGNBQUQsQ0FBZ0IsQ0FBQyxDQUFqQjtBQVY3QyxpQkFXUyxPQVhUO0FBV3NDLHVCQUFPLElBQUMsQ0FBQSxhQUFELENBQUE7QUFYN0MsaUJBWVMsTUFaVDtBQVlzQyx1QkFBTyxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBQTtBQVo3QyxpQkFhUyxhQWJUO0FBYXNDLHVCQUFPLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixDQUFBO0FBYjdDLGlCQWNTLFFBZFQ7QUFjc0MsdUJBQU8sSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLENBQUE7QUFkN0M7UUFnQkEsSUFBQSxDQUFLLDBCQUFBLEdBQTJCLElBQTNCLEdBQWdDLFNBQXJDLEVBQThDLElBQTlDO2VBQ0E7SUE1QlU7Ozs7OztBQThCbEIsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMDAwMDAwICAwMDAwMDAwICAgIDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgXG4wMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4wMDAwMDAwMCAgMDAwMDAwMCAgICAwMDAgICAgIDAwMCAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuIyMjXG5cbnsgc2xhc2gsIGVtcHR5LCBjbGFtcCwgcHJlZnMsIHBvc3QsIG9wZW4sIGVsZW0sIHN0b3BFdmVudCwga2V5aW5mbywga2xvZywgJCwgXyB9ID0gcmVxdWlyZSAna3hrJ1xuXG5GaWxlICAgICAgID0gcmVxdWlyZSAnLi90b29scy9maWxlJ1xuSGVhZGVyICAgICA9IHJlcXVpcmUgJy4vaGVhZGVyJ1xuQmFzZUVkaXRvciA9IHJlcXVpcmUgJy4vZWRpdG9yL2VkaXRvcidcbkZpbGVFZGl0b3IgPSByZXF1aXJlICcuL2VkaXRvci9maWxlZWRpdG9yJ1xuXG5jbGFzcyBFZGl0b3JcblxuICAgIEA6IChAYnJvd3NlciwgcGF0aCkgLT5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIEBkaXYgPSBlbGVtIGNsYXNzOidlZGl0b3InIHRhYmluZGV4OjFcbiAgICAgICAgXG4gICAgICAgIEBmb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgICAgXG4gICAgICAgIG1haW4gPSQgJyNtYWluJ1xuICAgICAgICAgICAgXG4gICAgICAgIG1haW4uYXBwZW5kQ2hpbGQgQGRpdlxuICAgICAgICBcbiAgICAgICAgQGVkaXRvciA9IG5ldyBGaWxlRWRpdG9yIEBkaXZcblxuICAgICAgICBwb3N0Lm9uICdtZW51QWN0aW9uJyBAb25NZW51QWN0aW9uXG4gICAgICAgIHBvc3Qub24gJ2RpcnR5JyBAb25EaXJ0eVxuICAgICAgICBcbiAgICAgICAgQGRpdi5hZGRFdmVudExpc3RlbmVyICdrZXlkb3duJyBAb25LZXlcbiAgICAgICAgQGRpdi5mb2N1cygpXG4gICAgICAgIFxuICAgICAgICBAZWRpdG9yLnNldEN1cnJlbnRGaWxlIHBhdGhcbiAgICAgICAgXG4gICAgICAgIGlmIHByZWZzLmdldCAnY2VudGVyVGV4dCdcbiAgICAgICAgICAgIEBlZGl0b3IuY2VudGVyVGV4dCB0cnVlIDBcbiAgICAgICAgXG4gICAgICAgIEBoZWFkZXIgPSBuZXcgSGVhZGVyIEBicm93c2VyXG4gICAgICAgIEBoZWFkZXIuc2V0RmlsZSBwYXRoXG4gICAgICAgICAgICBcbiAgICBvbkRpcnR5OiAoZGlydHkpID0+XG4gICAgICAgIFxuICAgICAgICBAaGVhZGVyPy5zZXREaXJ0eSBkaXJ0eVxuICAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwIDAwMCAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgICAwMDAwMCAgICBcbiAgICAjIDAwMCAgMDAwICAgMDAwICAgICAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIG9uS2V5OiAoZXZlbnQpID0+XG5cbiAgICAgICAgeyBtb2QsIGtleSwgY29tYm8sIGNoYXIgfSA9IGtleWluZm8uZm9yRXZlbnQgZXZlbnRcblxuICAgICAgICBzd2l0Y2ggY29tYm9cbiAgICAgICAgICAgIHdoZW4gJ2N0cmwrdycgdGhlbiByZXR1cm4gc3RvcEV2ZW50IGV2ZW50LCBAY2xvc2UoKVxuICAgICAgICAgICAgd2hlbiAnZXNjJyAgICB0aGVuIGlmIG5vdCBAZWRpdG9yLmRpcnR5IHRoZW4gcmV0dXJuIHN0b3BFdmVudCBldmVudCwgQGNsb3NlKClcbiAgICAgICAgICAgIHdoZW4gJ3NwYWNlJyBcbiAgICAgICAgICAgICAgICBjID0gQGVkaXRvci5tYWluQ3Vyc29yKClcbiAgICAgICAgICAgICAgICBpZiBjWzBdID09IDEgYW5kIGNbMV0gPT0gMFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcEV2ZW50IGV2ZW50LCBAY2xvc2UoKVxuICAgICAgICAgICAgXG4gICAgY2xvc2U6ID0+XG5cbiAgICAgICAgQGVkaXRvcj8uc2F2ZVNjcm9sbEN1cnNvcnNBbmRTZWxlY3Rpb25zKClcbiAgICAgICAgQGJyb3dzZXIudmlld2VyID0gbnVsbFxuICAgICAgICBAaGVhZGVyLmRlbCgpXG4gICAgICAgIEBkaXYucmVtb3ZlKClcbiAgICAgICAgQGZvY3VzLmZvY3VzKClcbiAgICAgICAgQGVkaXRvcj8uZGVsKClcbiAgICAgICAgZGVsZXRlIEBlZGl0b3JcbiAgICAgICAgXG4gICAgIyAwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgICAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAgICAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgIFxuICAgIFxuICAgIHJlc2l6ZWQ6IC0+IFxuICAgICAgICBcbiAgICAgICAgQGVkaXRvcj8ucmVzaXplZCgpXG4gICAgICAgIFxuICAgICAgICBpZiBwcmVmcy5nZXQgJ2NlbnRlclRleHQnIGZhbHNlXG4gICAgICAgICAgICBAZWRpdG9yLmNlbnRlclRleHQgdHJ1ZSAyMDBcblxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgIDAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICAgICAgICAgMDAwICAgICAwMDAgICAgICAgIDAwMCAwMDAgICAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAwMDAwICAgMDAwIDAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICAwMDAwMDAwICAgICAgICAgICAwMDAgICAgIDAwMDAwMDAgICAgIDAwMDAwICAgICAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgICAwMDAgIDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgICAgIDAwMCAgICAgMDAwICAgICAgICAwMDAgMDAwICAgICAgMDAwXG4gICAgIyAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAgICAgMDAwICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDBcbiAgICBcbiAgICB0b2dnbGVDZW50ZXJUZXh0OiAtPlxuICAgIFxuICAgICAgICBrbG9nICd0b2dnbGVDZW50ZXJUZXh0J1xuICAgICAgICBpZiBwcmVmcy5nZXQgXCJpbnZpc2libGVz4pa4I3tAZWRpdG9yLmN1cnJlbnRGaWxlID8gQGVkaXRvci5uYW1lfVwiLCBmYWxzZVxuICAgICAgICAgICAgQGVkaXRvci50b2dnbGVJbnZpc2libGVzKClcbiAgICAgICAgICAgIHJlc3RvcmVJbnZpc2libGVzID0gdHJ1ZVxuICAgIFxuICAgICAgICBpZiBub3QgcHJlZnMuZ2V0ICdjZW50ZXJUZXh0JyBmYWxzZVxuICAgICAgICAgICAgcHJlZnMuc2V0ICdjZW50ZXJUZXh0JyB0cnVlXG4gICAgICAgICAgICBAZWRpdG9yLmNlbnRlclRleHQgdHJ1ZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBwcmVmcy5zZXQgJ2NlbnRlclRleHQnIGZhbHNlXG4gICAgICAgICAgICBAZWRpdG9yLmNlbnRlclRleHQgZmFsc2VcbiAgICBcbiAgICAgICAgaWYgcmVzdG9yZUludmlzaWJsZXNcbiAgICAgICAgICAgIEBlZGl0b3IudG9nZ2xlSW52aXNpYmxlcygpXG4gICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMDAgICAgICAwMDAwMDAwICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwICAwMDAgICAgIDAwMCAgICAgICAgMDAwICAgICAgIDAwMCAgICAgMDAwICAgMDAwXG4gICAgIyAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgMCAwMDAgICAgIDAwMCAgICAgICAgMDAwMDAwMCAgIDAwMCAgICAwMDAgICAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAgICAwMDAgICAgICAgICAgICAgMDAwICAwMDAgICAwMDAgICAgIDAwMFxuICAgICMgMDAwICAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgICAwMDAgICAgICAgIDAwMDAwMDAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwXG4gICAgXG4gICAgc2V0Rm9udFNpemU6IChzKSAtPlxuICAgIFxuICAgICAgICBzID0gcHJlZnMuZ2V0KCdlZGl0b3JGb250U2l6ZScgMTkpIGlmIG5vdCBfLmlzRmluaXRlIHNcbiAgICAgICAgcyA9IGNsYW1wIDgsIDEwMCwgc1xuICAgIFxuICAgICAgICBwcmVmcy5zZXQgJ2VkaXRvckZvbnRTaXplJyBzXG4gICAgICAgIEBlZGl0b3Iuc2V0Rm9udFNpemUgc1xuICAgICAgICBpZiBAZWRpdG9yLmN1cnJlbnRGaWxlP1xuICAgICAgICAgICAgQGVkaXRvci5zZXRDdXJyZW50RmlsZSBAZWRpdG9yLmN1cnJlbnRGaWxlXG4gICAgXG4gICAgY2hhbmdlRm9udFNpemU6IChkKSAtPlxuICAgIFxuICAgICAgICBpZiAgICAgIEBlZGl0b3Iuc2l6ZS5mb250U2l6ZSA+PSAzMFxuICAgICAgICAgICAgZiA9IDRcbiAgICAgICAgZWxzZSBpZiBAZWRpdG9yLnNpemUuZm9udFNpemUgPj0gNTBcbiAgICAgICAgICAgIGYgPSAxMFxuICAgICAgICBlbHNlIGlmIEBlZGl0b3Iuc2l6ZS5mb250U2l6ZSA+PSAyMFxuICAgICAgICAgICAgZiA9IDJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZiA9IDFcbiAgICAgICAgQHNldEZvbnRTaXplIEBlZGl0b3Iuc2l6ZS5mb250U2l6ZSArIGYqZFxuICAgIFxuICAgIHJlc2V0Rm9udFNpemU6IC0+XG4gICAgXG4gICAgICAgIGRlZmF1bHRGb250U2l6ZSA9IHByZWZzLmdldCAnZWRpdG9yRGVmYXVsdEZvbnRTaXplJyAxOVxuICAgICAgICBwcmVmcy5zZXQgJ2VkaXRvckZvbnRTaXplJyBkZWZhdWx0Rm9udFNpemVcbiAgICAgICAgQHNldEZvbnRTaXplIGRlZmF1bHRGb250U2l6ZVxuICAgICAgICAgICAgICAgIFxuICAgICMgMDAgICAgIDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwMCAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMFxuICAgICMgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwIDAgMDAwICAwMDAgICAwMDAgICAgIDAwMDAwMDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAgICAgMDAwICAwMDAwICAwMDAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuXG4gICAgb25NZW51QWN0aW9uOiAobmFtZSwgYXJncykgPT5cblxuICAgICAgICByZXR1cm4gaWYgbm90IEBlZGl0b3JcbiAgICAgICAgXG4gICAgICAgIGtsb2cgXCJlZGl0b3IgbWVudSBhY3Rpb24hICcje25hbWV9JyBhcmdzOlwiIGFyZ3NcbiAgICAgICAgXG4gICAgICAgIGlmIGFjdGlvbiA9IEJhc2VFZGl0b3IuYWN0aW9uV2l0aE5hbWUgbmFtZVxuICAgICAgICAgICAgaWYgYWN0aW9uLmtleT8gYW5kIF8uaXNGdW5jdGlvbiBAZWRpdG9yW2FjdGlvbi5rZXldXG4gICAgICAgICAgICAgICAgQGVkaXRvclthY3Rpb24ua2V5XSBhcmdzLmFjdGFyZ1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgIFxuICAgICAgICBzd2l0Y2ggbmFtZVxuICAgIFxuICAgICAgICAgICAgd2hlbiAnQ2xvc2UgRWRpdG9yJyAgICAgICAgICB0aGVuIHJldHVybiBAY2xvc2UoKVxuICAgICAgICAgICAgd2hlbiAnVW5kbycgICAgICAgICAgICAgICAgICB0aGVuIHJldHVybiBAZWRpdG9yLmRvLnVuZG8oKVxuICAgICAgICAgICAgd2hlbiAnUmVkbycgICAgICAgICAgICAgICAgICB0aGVuIHJldHVybiBAZWRpdG9yLmRvLnJlZG8oKVxuICAgICAgICAgICAgd2hlbiAnQ3V0JyAgICAgICAgICAgICAgICAgICB0aGVuIHJldHVybiBAZWRpdG9yLmN1dCgpXG4gICAgICAgICAgICB3aGVuICdDb3B5JyAgICAgICAgICAgICAgICAgIHRoZW4gcmV0dXJuIEBlZGl0b3IuY29weSgpXG4gICAgICAgICAgICB3aGVuICdQYXN0ZScgICAgICAgICAgICAgICAgIHRoZW4gcmV0dXJuIEBlZGl0b3IucGFzdGUoKVxuICAgICAgICAgICAgd2hlbiAnVG9nZ2xlIENlbnRlciBUZXh0JyAgICB0aGVuIHJldHVybiBAdG9nZ2xlQ2VudGVyVGV4dCgpXG4gICAgICAgICAgICB3aGVuICdJbmNyZWFzZScgICAgICAgICAgICAgIHRoZW4gcmV0dXJuIEBjaGFuZ2VGb250U2l6ZSArMVxuICAgICAgICAgICAgd2hlbiAnRGVjcmVhc2UnICAgICAgICAgICAgICB0aGVuIHJldHVybiBAY2hhbmdlRm9udFNpemUgLTFcbiAgICAgICAgICAgIHdoZW4gJ1Jlc2V0JyAgICAgICAgICAgICAgICAgdGhlbiByZXR1cm4gQHJlc2V0Rm9udFNpemUoKVxuICAgICAgICAgICAgd2hlbiAnU2F2ZScgICAgICAgICAgICAgICAgICB0aGVuIHJldHVybiBAZWRpdG9yLnNhdmUoKVxuICAgICAgICAgICAgd2hlbiAnU2F2ZSBBcyAuLi4nICAgICAgICAgICB0aGVuIHJldHVybiBAZWRpdG9yLnNhdmVBcygpXG4gICAgICAgICAgICB3aGVuICdSZXZlcnQnICAgICAgICAgICAgICAgIHRoZW4gcmV0dXJuIEBlZGl0b3IucmV2ZXJ0KClcbiAgICBcbiAgICAgICAga2xvZyBcInVuaGFuZGxlZCBtZW51IGFjdGlvbiEgJyN7bmFtZX0nIGFyZ3M6XCIgYXJnc1xuICAgICAgICAndW5oYW5kbGVkJ1xuICAgIFxubW9kdWxlLmV4cG9ydHMgPSBFZGl0b3JcbiJdfQ==
//# sourceURL=../coffee/editor.coffee