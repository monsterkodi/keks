// koffee 1.4.0

/*
00000000  0000000    000  000000000   0000000   00000000   
000       000   000  000     000     000   000  000   000  
0000000   000   000  000     000     000   000  0000000    
000       000   000  000     000     000   000  000   000  
00000000  0000000    000     000      0000000   000   000
 */
var $, BaseEditor, Editor, File, FileEditor, _, elem, empty, keyinfo, klog, open, post, ref, slash, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), slash = ref.slash, empty = ref.empty, post = ref.post, open = ref.open, elem = ref.elem, stopEvent = ref.stopEvent, keyinfo = ref.keyinfo, klog = ref.klog, $ = ref.$, _ = ref._;

File = require('./tools/file');

BaseEditor = require('./editor/editor');

FileEditor = require('./editor/fileeditor');

Editor = (function() {
    function Editor(path) {
        this.onMenuAction = bind(this.onMenuAction, this);
        this.close = bind(this.close, this);
        this.onKey = bind(this.onKey, this);
        var main;
        this.div = elem({
            "class": 'editor',
            tabindex: 1
        });
        this.focus = document.activeElement;
        main = $('#main');
        main.appendChild(this.div);
        this.editor = new FileEditor(this.div);
        post.on('menuAction', this.onMenuAction);
        this.div.addEventListener('keydown', this.onKey);
        this.div.focus();
        this.editor.setCurrentFile(path);
    }

    Editor.prototype.onKey = function(event) {
        var char, combo, key, mod, ref1;
        ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo, char = ref1.char;
        switch (combo) {
            case 'ctrl+w':
                this.close();
        }
        return typeof event.stopPropagation === "function" ? event.stopPropagation() : void 0;
    };

    Editor.prototype.close = function() {
        this.div.remove();
        this.focus.focus();
        this.editor.del();
        return delete this.editor;
    };

    Editor.prototype.onMenuAction = function(name, args) {
        var action;
        if (!this.editor) {
            return;
        }
        klog("editor menu action! '" + name + "' args:", args);
        if (action = BaseEditor.actionWithName(name)) {
            if ((action.key != null) && _.isFunction(this.editor[action.key])) {
                this.editor[action.key](args.actarg);
                return;
            }
        }
        switch (name) {
            case 'Close Editor':
                return this.close();
            case 'Undo':
                return this.editor["do"].undo();
            case 'Redo':
                return this.editor["do"].redo();
            case 'Cut':
                return this.editor.cut();
            case 'Copy':
                return this.editor.copy();
            case 'Paste':
                return this.editor.paste();
            case 'Toggle Center Text':
                return toggleCenterText();
            case 'Increase':
                return changeFontSize(+1);
            case 'Decrease':
                return changeFontSize(-1);
            case 'Reset':
                return resetFontSize();
            case 'Save':
                return post.emit('saveFile');
            case 'Save As ...':
                return post.emit('saveFileAs');
            case 'Revert':
                return post.emit('reloadFile');
        }
        klog("unhandled menu action! '" + name + "' args:", args);
        return 'unhandled';
    };

    return Editor;

})();

module.exports = Editor;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSx5R0FBQTtJQUFBOztBQVFBLE1BQXFFLE9BQUEsQ0FBUSxLQUFSLENBQXJFLEVBQUUsaUJBQUYsRUFBUyxpQkFBVCxFQUFnQixlQUFoQixFQUFzQixlQUF0QixFQUE0QixlQUE1QixFQUFrQyx5QkFBbEMsRUFBNkMscUJBQTdDLEVBQXNELGVBQXRELEVBQTRELFNBQTVELEVBQStEOztBQUUvRCxJQUFBLEdBQWEsT0FBQSxDQUFRLGNBQVI7O0FBQ2IsVUFBQSxHQUFhLE9BQUEsQ0FBUSxpQkFBUjs7QUFDYixVQUFBLEdBQWEsT0FBQSxDQUFRLHFCQUFSOztBQUVQO0lBRUMsZ0JBQUMsSUFBRDs7OztBQUVDLFlBQUE7UUFBQSxJQUFDLENBQUEsR0FBRCxHQUFPLElBQUEsQ0FBSztZQUFBLENBQUEsS0FBQSxDQUFBLEVBQU0sUUFBTjtZQUFlLFFBQUEsRUFBUyxDQUF4QjtTQUFMO1FBRVAsSUFBQyxDQUFBLEtBQUQsR0FBUyxRQUFRLENBQUM7UUFFbEIsSUFBQSxHQUFNLENBQUEsQ0FBRSxPQUFGO1FBRU4sSUFBSSxDQUFDLFdBQUwsQ0FBaUIsSUFBQyxDQUFBLEdBQWxCO1FBRUEsSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFJLFVBQUosQ0FBZSxJQUFDLENBQUEsR0FBaEI7UUFFVixJQUFJLENBQUMsRUFBTCxDQUFRLFlBQVIsRUFBcUIsSUFBQyxDQUFBLFlBQXRCO1FBRUEsSUFBQyxDQUFBLEdBQUcsQ0FBQyxnQkFBTCxDQUFzQixTQUF0QixFQUFnQyxJQUFDLENBQUEsS0FBakM7UUFDQSxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQUwsQ0FBQTtRQUVBLElBQUMsQ0FBQSxNQUFNLENBQUMsY0FBUixDQUF1QixJQUF2QjtJQWpCRDs7cUJBeUJILEtBQUEsR0FBTyxTQUFDLEtBQUQ7QUFFSCxZQUFBO1FBQUEsT0FBNEIsT0FBTyxDQUFDLFFBQVIsQ0FBaUIsS0FBakIsQ0FBNUIsRUFBRSxjQUFGLEVBQU8sY0FBUCxFQUFZLGtCQUFaLEVBQW1CO0FBRW5CLGdCQUFPLEtBQVA7QUFBQSxpQkFDUyxRQURUO2dCQUN1QixJQUFDLENBQUEsS0FBRCxDQUFBO0FBRHZCOzZEQUlBLEtBQUssQ0FBQztJQVJIOztxQkFVUCxLQUFBLEdBQU8sU0FBQTtRQUVILElBQUMsQ0FBQSxHQUFHLENBQUMsTUFBTCxDQUFBO1FBQ0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLENBQUE7UUFDQSxJQUFDLENBQUEsTUFBTSxDQUFDLEdBQVIsQ0FBQTtlQUNBLE9BQU8sSUFBQyxDQUFBO0lBTEw7O3FCQWFQLFlBQUEsR0FBYyxTQUFDLElBQUQsRUFBTyxJQUFQO0FBRVYsWUFBQTtRQUFBLElBQVUsQ0FBSSxJQUFDLENBQUEsTUFBZjtBQUFBLG1CQUFBOztRQUVBLElBQUEsQ0FBSyx1QkFBQSxHQUF3QixJQUF4QixHQUE2QixTQUFsQyxFQUEyQyxJQUEzQztRQUVBLElBQUcsTUFBQSxHQUFTLFVBQVUsQ0FBQyxjQUFYLENBQTBCLElBQTFCLENBQVo7WUFDSSxJQUFHLG9CQUFBLElBQWdCLENBQUMsQ0FBQyxVQUFGLENBQWEsSUFBQyxDQUFBLE1BQU8sQ0FBQSxNQUFNLENBQUMsR0FBUCxDQUFyQixDQUFuQjtnQkFDSSxJQUFDLENBQUEsTUFBTyxDQUFBLE1BQU0sQ0FBQyxHQUFQLENBQVIsQ0FBb0IsSUFBSSxDQUFDLE1BQXpCO0FBQ0EsdUJBRko7YUFESjs7QUFLQSxnQkFBTyxJQUFQO0FBQUEsaUJBRVMsY0FGVDtBQUVzQyx1QkFBTyxJQUFDLENBQUEsS0FBRCxDQUFBO0FBRjdDLGlCQUdTLE1BSFQ7QUFHc0MsdUJBQU8sSUFBQyxDQUFBLE1BQU0sRUFBQyxFQUFELEVBQUcsQ0FBQyxJQUFYLENBQUE7QUFIN0MsaUJBSVMsTUFKVDtBQUlzQyx1QkFBTyxJQUFDLENBQUEsTUFBTSxFQUFDLEVBQUQsRUFBRyxDQUFDLElBQVgsQ0FBQTtBQUo3QyxpQkFLUyxLQUxUO0FBS3NDLHVCQUFPLElBQUMsQ0FBQSxNQUFNLENBQUMsR0FBUixDQUFBO0FBTDdDLGlCQU1TLE1BTlQ7QUFNc0MsdUJBQU8sSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLENBQUE7QUFON0MsaUJBT1MsT0FQVDtBQU9zQyx1QkFBTyxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQVIsQ0FBQTtBQVA3QyxpQkFRUyxvQkFSVDtBQVFzQyx1QkFBTyxnQkFBQSxDQUFBO0FBUjdDLGlCQVNTLFVBVFQ7QUFTc0MsdUJBQU8sY0FBQSxDQUFlLENBQUMsQ0FBaEI7QUFUN0MsaUJBVVMsVUFWVDtBQVVzQyx1QkFBTyxjQUFBLENBQWUsQ0FBQyxDQUFoQjtBQVY3QyxpQkFXUyxPQVhUO0FBV3NDLHVCQUFPLGFBQUEsQ0FBQTtBQVg3QyxpQkFZUyxNQVpUO0FBWXNDLHVCQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsVUFBVjtBQVo3QyxpQkFhUyxhQWJUO0FBYXNDLHVCQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsWUFBVjtBQWI3QyxpQkFjUyxRQWRUO0FBY3NDLHVCQUFPLElBQUksQ0FBQyxJQUFMLENBQVUsWUFBVjtBQWQ3QztRQWdCQSxJQUFBLENBQUssMEJBQUEsR0FBMkIsSUFBM0IsR0FBZ0MsU0FBckMsRUFBOEMsSUFBOUM7ZUFDQTtJQTVCVTs7Ozs7O0FBOEJsQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4wMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbjAwMDAwMDAwICAwMDAwMDAwICAgIDAwMCAgICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4jIyNcblxueyBzbGFzaCwgZW1wdHksIHBvc3QsIG9wZW4sIGVsZW0sIHN0b3BFdmVudCwga2V5aW5mbywga2xvZywgJCwgXyB9ID0gcmVxdWlyZSAna3hrJ1xuXG5GaWxlICAgICAgID0gcmVxdWlyZSAnLi90b29scy9maWxlJ1xuQmFzZUVkaXRvciA9IHJlcXVpcmUgJy4vZWRpdG9yL2VkaXRvcidcbkZpbGVFZGl0b3IgPSByZXF1aXJlICcuL2VkaXRvci9maWxlZWRpdG9yJ1xuXG5jbGFzcyBFZGl0b3JcblxuICAgIEA6IChwYXRoKSAtPlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgQGRpdiA9IGVsZW0gY2xhc3M6J2VkaXRvcicgdGFiaW5kZXg6MVxuICAgICAgICBcbiAgICAgICAgQGZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgICAgICBcbiAgICAgICAgbWFpbiA9JCAnI21haW4nXG4gICAgICAgICAgICBcbiAgICAgICAgbWFpbi5hcHBlbmRDaGlsZCBAZGl2XG4gICAgICAgIFxuICAgICAgICBAZWRpdG9yID0gbmV3IEZpbGVFZGl0b3IgQGRpdlxuXG4gICAgICAgIHBvc3Qub24gJ21lbnVBY3Rpb24nIEBvbk1lbnVBY3Rpb25cbiAgICAgICAgXG4gICAgICAgIEBkaXYuYWRkRXZlbnRMaXN0ZW5lciAna2V5ZG93bicgQG9uS2V5XG4gICAgICAgIEBkaXYuZm9jdXMoKVxuICAgICAgICBcbiAgICAgICAgQGVkaXRvci5zZXRDdXJyZW50RmlsZSBwYXRoXG4gICAgICAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwIDAwMCAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgICAwMDAwMCAgICBcbiAgICAjIDAwMCAgMDAwICAgMDAwICAgICAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIG9uS2V5OiAoZXZlbnQpID0+XG5cbiAgICAgICAgeyBtb2QsIGtleSwgY29tYm8sIGNoYXIgfSA9IGtleWluZm8uZm9yRXZlbnQgZXZlbnRcblxuICAgICAgICBzd2l0Y2ggY29tYm9cbiAgICAgICAgICAgIHdoZW4gJ2N0cmwrdycgdGhlbiBAY2xvc2UoKVxuICAgICAgICAgICAgIyBlbHNlIGtsb2cgJ2NvbWJvJyBjb21ib1xuICAgICAgICAgICAgXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbj8oKVxuICAgICAgICAgICAgXG4gICAgY2xvc2U6ID0+XG5cbiAgICAgICAgQGRpdi5yZW1vdmUoKVxuICAgICAgICBAZm9jdXMuZm9jdXMoKVxuICAgICAgICBAZWRpdG9yLmRlbCgpXG4gICAgICAgIGRlbGV0ZSBAZWRpdG9yXG4gICAgICAgIFxuICAgICMgMDAgICAgIDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwMCAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMFxuICAgICMgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwIDAgMDAwICAwMDAgICAwMDAgICAgIDAwMDAwMDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAgICAgMDAwICAwMDAwICAwMDAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuXG4gICAgb25NZW51QWN0aW9uOiAobmFtZSwgYXJncykgPT5cblxuICAgICAgICByZXR1cm4gaWYgbm90IEBlZGl0b3JcbiAgICAgICAgXG4gICAgICAgIGtsb2cgXCJlZGl0b3IgbWVudSBhY3Rpb24hICcje25hbWV9JyBhcmdzOlwiIGFyZ3NcbiAgICAgICAgXG4gICAgICAgIGlmIGFjdGlvbiA9IEJhc2VFZGl0b3IuYWN0aW9uV2l0aE5hbWUgbmFtZVxuICAgICAgICAgICAgaWYgYWN0aW9uLmtleT8gYW5kIF8uaXNGdW5jdGlvbiBAZWRpdG9yW2FjdGlvbi5rZXldXG4gICAgICAgICAgICAgICAgQGVkaXRvclthY3Rpb24ua2V5XSBhcmdzLmFjdGFyZ1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgIFxuICAgICAgICBzd2l0Y2ggbmFtZVxuICAgIFxuICAgICAgICAgICAgd2hlbiAnQ2xvc2UgRWRpdG9yJyAgICAgICAgICB0aGVuIHJldHVybiBAY2xvc2UoKVxuICAgICAgICAgICAgd2hlbiAnVW5kbycgICAgICAgICAgICAgICAgICB0aGVuIHJldHVybiBAZWRpdG9yLmRvLnVuZG8oKVxuICAgICAgICAgICAgd2hlbiAnUmVkbycgICAgICAgICAgICAgICAgICB0aGVuIHJldHVybiBAZWRpdG9yLmRvLnJlZG8oKVxuICAgICAgICAgICAgd2hlbiAnQ3V0JyAgICAgICAgICAgICAgICAgICB0aGVuIHJldHVybiBAZWRpdG9yLmN1dCgpXG4gICAgICAgICAgICB3aGVuICdDb3B5JyAgICAgICAgICAgICAgICAgIHRoZW4gcmV0dXJuIEBlZGl0b3IuY29weSgpXG4gICAgICAgICAgICB3aGVuICdQYXN0ZScgICAgICAgICAgICAgICAgIHRoZW4gcmV0dXJuIEBlZGl0b3IucGFzdGUoKVxuICAgICAgICAgICAgd2hlbiAnVG9nZ2xlIENlbnRlciBUZXh0JyAgICB0aGVuIHJldHVybiB0b2dnbGVDZW50ZXJUZXh0KClcbiAgICAgICAgICAgIHdoZW4gJ0luY3JlYXNlJyAgICAgICAgICAgICAgdGhlbiByZXR1cm4gY2hhbmdlRm9udFNpemUgKzFcbiAgICAgICAgICAgIHdoZW4gJ0RlY3JlYXNlJyAgICAgICAgICAgICAgdGhlbiByZXR1cm4gY2hhbmdlRm9udFNpemUgLTFcbiAgICAgICAgICAgIHdoZW4gJ1Jlc2V0JyAgICAgICAgICAgICAgICAgdGhlbiByZXR1cm4gcmVzZXRGb250U2l6ZSgpXG4gICAgICAgICAgICB3aGVuICdTYXZlJyAgICAgICAgICAgICAgICAgIHRoZW4gcmV0dXJuIHBvc3QuZW1pdCAnc2F2ZUZpbGUnXG4gICAgICAgICAgICB3aGVuICdTYXZlIEFzIC4uLicgICAgICAgICAgIHRoZW4gcmV0dXJuIHBvc3QuZW1pdCAnc2F2ZUZpbGVBcydcbiAgICAgICAgICAgIHdoZW4gJ1JldmVydCcgICAgICAgICAgICAgICAgdGhlbiByZXR1cm4gcG9zdC5lbWl0ICdyZWxvYWRGaWxlJ1xuICAgIFxuICAgICAgICBrbG9nIFwidW5oYW5kbGVkIG1lbnUgYWN0aW9uISAnI3tuYW1lfScgYXJnczpcIiBhcmdzXG4gICAgICAgICd1bmhhbmRsZWQnXG4gICAgXG5tb2R1bGUuZXhwb3J0cyA9IEVkaXRvclxuIl19
//# sourceURL=../coffee/editor.coffee