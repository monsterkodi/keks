// koffee 1.4.0

/*
00000000  0000000    000  000000000   0000000   00000000   
000       000   000  000     000     000   000  000   000  
0000000   000   000  000     000     000   000  0000000    
000       000   000  000     000     000   000  000   000  
00000000  0000000    000     000      0000000   000   000
 */
var $, BaseEditor, Editor, File, FileEditor, Header, _, clamp, elem, empty, keyinfo, klog, open, post, prefs, ref, slash, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), slash = ref.slash, empty = ref.empty, clamp = ref.clamp, prefs = ref.prefs, post = ref.post, open = ref.open, elem = ref.elem, stopEvent = ref.stopEvent, keyinfo = ref.keyinfo, klog = ref.klog, $ = ref.$, _ = ref._;

File = require('./tools/file');

Header = require('./header');

BaseEditor = require('./editor/editor');

FileEditor = require('./editor/fileeditor');

Editor = (function() {
    function Editor(browser, path) {
        var main;
        this.browser = browser;
        this.onMenuAction = bind(this.onMenuAction, this);
        this.close = bind(this.close, this);
        this.onKey = bind(this.onKey, this);
        this.onDirty = bind(this.onDirty, this);
        this.div = elem({
            "class": 'editor',
            tabindex: 1
        });
        this.focus = document.activeElement;
        main = $('#main');
        main.appendChild(this.div);
        this.editor = new FileEditor(this.div);
        post.on('menuAction', this.onMenuAction);
        post.on('dirty', this.onDirty);
        this.div.addEventListener('keydown', this.onKey);
        this.div.focus();
        this.editor.setCurrentFile(path);
        if (prefs.get('centerText')) {
            this.editor.centerText(true, 0);
        }
        this.header = new Header(this.browser);
        this.header.setFile(path);
    }

    Editor.prototype.onDirty = function(dirty) {
        return this.header.setDirty(dirty);
    };

    Editor.prototype.onKey = function(event) {
        var c, char, combo, key, mod, ref1;
        ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo, char = ref1.char;
        switch (combo) {
            case 'ctrl+w':
                return stopEvent(event, this.close());
            case 'esc':
                if (!this.editor.dirty) {
                    return stopEvent(event, this.close());
                }
                break;
            case 'space':
                c = this.editor.mainCursor();
                if (c[0] === 1 && c[1] === 0) {
                    return stopEvent(event, this.close());
                }
        }
    };

    Editor.prototype.close = function() {
        var ref1;
        this.browser.viewer = null;
        this.header.del();
        this.div.remove();
        this.focus.focus();
        if ((ref1 = this.editor) != null) {
            ref1.del();
        }
        return delete this.editor;
    };

    Editor.prototype.resized = function() {
        var ref1;
        if ((ref1 = this.editor) != null) {
            ref1.resized();
        }
        if (prefs.get('centerText', false)) {
            return this.editor.centerText(true, 200);
        }
    };

    Editor.prototype.toggleCenterText = function() {
        var ref1, restoreInvisibles;
        klog('toggleCenterText');
        if (prefs.get("invisiblesâ–¸" + ((ref1 = this.editor.currentFile) != null ? ref1 : this.editor.name), false)) {
            this.editor.toggleInvisibles();
            restoreInvisibles = true;
        }
        if (!prefs.get('centerText', false)) {
            prefs.set('centerText', true);
            this.editor.centerText(true);
        } else {
            prefs.set('centerText', false);
            this.editor.centerText(false);
        }
        if (restoreInvisibles) {
            return this.editor.toggleInvisibles();
        }
    };

    Editor.prototype.setFontSize = function(s) {
        if (!_.isFinite(s)) {
            s = prefs.get('editorFontSize', 19);
        }
        s = clamp(8, 100, s);
        prefs.set('editorFontSize', s);
        this.editor.setFontSize(s);
        if (this.editor.currentFile != null) {
            return this.editor.setCurrentFile(this.editor.currentFile);
        }
    };

    Editor.prototype.changeFontSize = function(d) {
        var f;
        if (this.editor.size.fontSize >= 30) {
            f = 4;
        } else if (this.editor.size.fontSize >= 50) {
            f = 10;
        } else if (this.editor.size.fontSize >= 20) {
            f = 2;
        } else {
            f = 1;
        }
        return this.setFontSize(this.editor.size.fontSize + f * d);
    };

    Editor.prototype.resetFontSize = function() {
        var defaultFontSize;
        defaultFontSize = prefs.get('editorDefaultFontSize', 19);
        prefs.set('editorFontSize', defaultFontSize);
        return this.setFontSize(defaultFontSize);
    };

    Editor.prototype.onMenuAction = function(name, args) {
        var action;
        if (!this.editor) {
            return;
        }
        klog("editor menu action! '" + name + "' args:", args);
        if (action = BaseEditor.actionWithName(name)) {
            if ((action.key != null) && _.isFunction(this.editor[action.key])) {
                this.editor[action.key](args.actarg);
                return;
            }
        }
        switch (name) {
            case 'Close Editor':
                return this.close();
            case 'Undo':
                return this.editor["do"].undo();
            case 'Redo':
                return this.editor["do"].redo();
            case 'Cut':
                return this.editor.cut();
            case 'Copy':
                return this.editor.copy();
            case 'Paste':
                return this.editor.paste();
            case 'Toggle Center Text':
                return this.toggleCenterText();
            case 'Increase':
                return this.changeFontSize(+1);
            case 'Decrease':
                return this.changeFontSize(-1);
            case 'Reset':
                return this.resetFontSize();
            case 'Save':
                return post.emit('saveFile');
            case 'Save As ...':
                return post.emit('saveFileAs');
            case 'Revert':
                return post.emit('reloadFile');
        }
        klog("unhandled menu action! '" + name + "' args:", args);
        return 'unhandled';
    };

    return Editor;

})();

module.exports = Editor;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/editor.coffee