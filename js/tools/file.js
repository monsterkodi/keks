// koffee 1.12.0

/*
00000000  000  000      00000000
000       000  000      000     
000000    000  000      0000000 
000       000  000      000     
000       000  0000000  00000000
 */
var File, fs, icons, kerror, ref, slash, valid;

ref = require('kxk'), fs = ref.fs, kerror = ref.kerror, slash = ref.slash, valid = ref.valid;

icons = require('./icons.json');

File = (function() {
    function File() {}

    File.isImage = function(file) {
        var ref1;
        return (ref1 = slash.ext(file)) === 'gif' || ref1 === 'png' || ref1 === 'jpg' || ref1 === 'jpeg' || ref1 === 'svg' || ref1 === 'bmp' || ref1 === 'ico' || ref1 === 'webp';
    };

    File.isText = function(file) {
        return slash.isText(file);
    };

    File.rename = function(from, to, cb) {
        return fs.mkdir(slash.dir(to), {
            recursive: true
        }, function(err) {
            if (err) {
                return kerror("mkdir failed " + err);
            }
            if (slash.isDir(to)) {
                to = slash.join(to, slash.file(from));
            }
            return fs.move(from, to, {
                overwrite: true
            }, function(err) {
                if (err) {
                    return kerror("rename failed " + err);
                }
                return cb(from, to);
            });
        });
    };

    File.duplicate = function(from, cb) {
        return slash.unused(from, (function(_this) {
            return function(target) {
                return _this.copy(from, target, cb);
            };
        })(this));
    };

    File.copy = function(from, to, cb) {
        if (slash.isDir(to)) {
            to = slash.join(to, slash.file(from));
        }
        return fs.copy(from, to, function(err) {
            if (err) {
                return kerror("copy failed " + err);
            }
            return cb(from, to);
        });
    };

    File.iconClassName = function(file) {
        var clss;
        clss = icons.ext[slash.ext(file)];
        if (clss != null) {
            clss;
        } else {
            clss = icons.base[slash.base(file).toLowerCase()];
        }
        if (clss != null) {
            clss;
        } else {
            clss = 'file';
        }
        return "icon " + clss;
    };

    File.span = function(text) {
        var base, clss, ext, span;
        base = slash.base(text);
        ext = slash.ext(text).toLowerCase();
        clss = valid(ext) && ' ' + ext || '';
        if (base.startsWith('.')) {
            clss += ' dotfile';
        }
        span = ("<span class='text" + clss + "'>") + base + "</span>";
        if (valid(ext)) {
            span += ("<span class='ext punct" + clss + "'>.</span>") + ("<span class='ext text" + clss + "'>") + ext + "</span>";
        }
        return span;
    };

    File.crumbSpan = function(file) {
        var i, j, ref1, s, spans, split;
        if (file === '/' || file === '') {
            return "<span>/</span>";
        }
        spans = [];
        split = slash.split(file);
        for (i = j = 0, ref1 = split.length - 1; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
            s = split[i];
            spans.push("<div class='inline path' id='" + (split.slice(0, +i + 1 || 9e9).join('/')) + "'>" + s + "</div>");
        }
        spans.push("<div class='inline' id='" + file + "'>" + split.slice(-1)[0] + "</div>");
        return spans.join("<span class='punct'>/</span>");
    };

    return File;

})();

module.exports = File;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi9jb2ZmZWUvdG9vbHMiLCJzb3VyY2VzIjpbImZpbGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLE1BQStCLE9BQUEsQ0FBUSxLQUFSLENBQS9CLEVBQUUsV0FBRixFQUFNLG1CQUFOLEVBQWMsaUJBQWQsRUFBcUI7O0FBRXJCLEtBQUEsR0FBUyxPQUFBLENBQVEsY0FBUjs7QUFFSDs7O0lBRUYsSUFBQyxDQUFBLE9BQUQsR0FBVSxTQUFDLElBQUQ7QUFBVSxZQUFBO3VCQUFBLEtBQUssQ0FBQyxHQUFOLENBQVUsSUFBVixFQUFBLEtBQW9CLEtBQXBCLElBQUEsSUFBQSxLQUEwQixLQUExQixJQUFBLElBQUEsS0FBZ0MsS0FBaEMsSUFBQSxJQUFBLEtBQXNDLE1BQXRDLElBQUEsSUFBQSxLQUE2QyxLQUE3QyxJQUFBLElBQUEsS0FBbUQsS0FBbkQsSUFBQSxJQUFBLEtBQXlELEtBQXpELElBQUEsSUFBQSxLQUErRDtJQUF6RTs7SUFDVixJQUFDLENBQUEsTUFBRCxHQUFVLFNBQUMsSUFBRDtlQUFVLEtBQUssQ0FBQyxNQUFOLENBQWEsSUFBYjtJQUFWOztJQUVWLElBQUMsQ0FBQSxNQUFELEdBQVMsU0FBQyxJQUFELEVBQU8sRUFBUCxFQUFXLEVBQVg7ZUFFTCxFQUFFLENBQUMsS0FBSCxDQUFTLEtBQUssQ0FBQyxHQUFOLENBQVUsRUFBVixDQUFULEVBQXdCO1lBQUEsU0FBQSxFQUFVLElBQVY7U0FBeEIsRUFBd0MsU0FBQyxHQUFEO1lBRXBDLElBQXVDLEdBQXZDO0FBQUEsdUJBQU8sTUFBQSxDQUFPLGVBQUEsR0FBZ0IsR0FBdkIsRUFBUDs7WUFFQSxJQUFHLEtBQUssQ0FBQyxLQUFOLENBQVksRUFBWixDQUFIO2dCQUNJLEVBQUEsR0FBSyxLQUFLLENBQUMsSUFBTixDQUFXLEVBQVgsRUFBZSxLQUFLLENBQUMsSUFBTixDQUFXLElBQVgsQ0FB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QUFaLENBQWlCLEdBQWpCLENBQUQsQ0FBL0IsR0FBcUQsSUFBckQsR0FBeUQsQ0FBekQsR0FBMkQsUUFBdEU7QUFGSjtRQUdBLEtBQUssQ0FBQyxJQUFOLENBQVcsMEJBQUEsR0FBMkIsSUFBM0IsR0FBZ0MsSUFBaEMsR0FBb0MsS0FBTSxVQUFFLENBQUEsQ0FBQSxDQUE1QyxHQUE4QyxRQUF6RDtlQUNBLEtBQUssQ0FBQyxJQUFOLENBQVcsOEJBQVg7SUFYUTs7Ozs7O0FBYWhCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwMCAgMDAwICAwMDAgICAgICAwMDAwMDAwMFxuMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICBcbjAwMDAwMCAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgXG4wMDAgICAgICAgMDAwICAwMDAgICAgICAwMDAgICAgIFxuMDAwICAgICAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDBcbiMjI1xuXG57IGZzLCBrZXJyb3IsIHNsYXNoLCB2YWxpZCB9ID0gcmVxdWlyZSAna3hrJ1xuXG5pY29ucyAgPSByZXF1aXJlICcuL2ljb25zLmpzb24nXG5cbmNsYXNzIEZpbGVcbiAgICBcbiAgICBAaXNJbWFnZTogKGZpbGUpIC0+IHNsYXNoLmV4dChmaWxlKSBpbiBbJ2dpZicgJ3BuZycgJ2pwZycgJ2pwZWcnICdzdmcnICdibXAnICdpY28nICd3ZWJwJ11cbiAgICBAaXNUZXh0OiAgKGZpbGUpIC0+IHNsYXNoLmlzVGV4dCBmaWxlXG4gICAgXG4gICAgQHJlbmFtZTogKGZyb20sIHRvLCBjYikgLT5cbiAgICAgICAgXG4gICAgICAgIGZzLm1rZGlyIHNsYXNoLmRpcih0byksIHJlY3Vyc2l2ZTp0cnVlLCAoZXJyKSAtPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4ga2Vycm9yIFwibWtkaXIgZmFpbGVkICN7ZXJyfVwiIGlmIGVyclxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBzbGFzaC5pc0Rpcih0bylcbiAgICAgICAgICAgICAgICB0byA9IHNsYXNoLmpvaW4gdG8sIHNsYXNoLmZpbGUgZnJvbVxuXG4gICAgICAgICAgICBmcy5tb3ZlIGZyb20sIHRvLCBvdmVyd3JpdGU6dHJ1ZSwgKGVycikgLT5cbiAgICAgICAgICAgICAgICByZXR1cm4ga2Vycm9yIFwicmVuYW1lIGZhaWxlZCAje2Vycn1cIiBpZiBlcnJcbiAgICAgICAgICAgICAgICBjYiBmcm9tLCB0b1xuXG4gICAgQGR1cGxpY2F0ZTogKGZyb20sIGNiKSAtPiBcblxuICAgICAgICBzbGFzaC51bnVzZWQgZnJvbSwgKHRhcmdldCkgPT4gICAgICAgICAgXG4gICAgICAgICAgICBAY29weSBmcm9tLCB0YXJnZXQsIGNiXG4gICAgXG4gICAgQGNvcHk6IChmcm9tLCB0bywgY2IpIC0+XG4gICAgICAgIFxuICAgICAgICBpZiBzbGFzaC5pc0Rpcih0bylcbiAgICAgICAgICAgIHRvID0gc2xhc2guam9pbiB0bywgc2xhc2guZmlsZSBmcm9tXG5cbiAgICAgICAgIyBrbG9nIFwiY29weSAje2Zyb219ICN7dG99XCJcbiAgICAgICAgZnMuY29weSBmcm9tLCB0bywgKGVycikgLT5cbiAgICAgICAgICAgIHJldHVybiBrZXJyb3IgXCJjb3B5IGZhaWxlZCAje2Vycn1cIiBpZiBlcnJcbiAgICAgICAgICAgIGNiIGZyb20sIHRvXG4gICAgICAgICAgICAgICAgXG4gICAgIyAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgXG4gICAgIyAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgXG4gICAgIyAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgXG4gICAgIyAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4gICAgXG4gICAgQGljb25DbGFzc05hbWU6IChmaWxlKSAtPlxuICAgICAgICBcbiAgICAgICAgY2xzcyAgPSBpY29ucy5leHRbc2xhc2guZXh0IGZpbGVdXG4gICAgICAgIGNsc3MgPz0gaWNvbnMuYmFzZVtzbGFzaC5iYXNlKGZpbGUpLnRvTG93ZXJDYXNlKCldXG4gICAgICAgIGNsc3MgPz0gJ2ZpbGUnXG4gICAgICAgIFwiaWNvbiAje2Nsc3N9XCJcbiAgICAgICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIFxuICAgICMgICAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgIDAwMDAgIFxuICAgICMgMDAwMDAwMCAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgIFxuICAgIEBzcGFuOiAodGV4dCkgLT5cbiAgICAgICAgXG4gICAgICAgIGJhc2UgPSBzbGFzaC5iYXNlIHRleHRcbiAgICAgICAgZXh0ICA9IHNsYXNoLmV4dCh0ZXh0KS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGNsc3MgPSB2YWxpZChleHQpIGFuZCAnICcrZXh0IG9yICcnXG4gICAgICAgIFxuICAgICAgICBpZiBiYXNlLnN0YXJ0c1dpdGggJy4nIHRoZW4gY2xzcyArPSAnIGRvdGZpbGUnXG4gICAgICAgIFxuICAgICAgICBzcGFuID0gXCI8c3BhbiBjbGFzcz0ndGV4dCN7Y2xzc30nPlwiK2Jhc2UrXCI8L3NwYW4+XCJcbiAgICAgICAgXG4gICAgICAgIGlmIHZhbGlkIGV4dFxuICAgICAgICAgICAgc3BhbiArPSBcIjxzcGFuIGNsYXNzPSdleHQgcHVuY3Qje2Nsc3N9Jz4uPC9zcGFuPlwiICsgXCI8c3BhbiBjbGFzcz0nZXh0IHRleHQje2Nsc3N9Jz5cIitleHQrXCI8L3NwYW4+XCJcbiAgICAgICAgc3BhblxuICAgICAgICBcbiAgICBAY3J1bWJTcGFuOiAoZmlsZSkgLT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBcIjxzcGFuPi88L3NwYW4+XCIgaWYgZmlsZSBpbiBbJy8nICcnXVxuICAgICAgICBcbiAgICAgICAgc3BhbnMgPSBbXVxuICAgICAgICBzcGxpdCA9IHNsYXNoLnNwbGl0IGZpbGVcbiAgICAgICAgXG4gICAgICAgIGZvciBpIGluIFswLi4uc3BsaXQubGVuZ3RoLTFdXG4gICAgICAgICAgICBzID0gc3BsaXRbaV1cbiAgICAgICAgICAgIHNwYW5zLnB1c2ggXCI8ZGl2IGNsYXNzPSdpbmxpbmUgcGF0aCcgaWQ9JyN7c3BsaXRbMC4uaV0uam9pbiAnLyd9Jz4je3N9PC9kaXY+XCJcbiAgICAgICAgc3BhbnMucHVzaCBcIjxkaXYgY2xhc3M9J2lubGluZScgaWQ9JyN7ZmlsZX0nPiN7c3BsaXRbLTFdfTwvZGl2PlwiXG4gICAgICAgIHNwYW5zLmpvaW4gXCI8c3BhbiBjbGFzcz0ncHVuY3QnPi88L3NwYW4+XCJcbiAgICAgICAgXG5tb2R1bGUuZXhwb3J0cyA9IEZpbGVcbiJdfQ==
//# sourceURL=../../coffee/tools/file.coffee