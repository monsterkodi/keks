// koffee 1.4.0

/*
0000000    00000000    0000000    0000000  000   000  00000000  000000000   0000000
000   000  000   000  000   000  000       000  000   000          000     000     
0000000    0000000    000000000  000       0000000    0000000      000     0000000 
000   000  000   000  000   000  000       000  000   000          000          000
0000000    000   000  000   000   0000000  000   000  00000000     000     0000000
 */
var Brackets, _, matchr,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ = require('kxk')._;

matchr = require('../tools/matchr');

Brackets = (function() {
    function Brackets(editor) {
        this.editor = editor;
        this.onCursor = bind(this.onCursor, this);
        this.setupConfig = bind(this.setupConfig, this);
        this.editor.on('cursor', this.onCursor);
        this.editor.on('fileTypeChanged', this.setupConfig);
        this.setupConfig();
    }

    Brackets.prototype.setupConfig = function() {
        this.open = this.editor.bracketCharacters.open;
        return this.config = this.editor.bracketCharacters.regexps;
    };

    Brackets.prototype.onCursor = function() {
        var after, before, cp, h, j, len, ref, ref1;
        if (this.editor.numHighlights()) {
            ref = this.editor.highlights();
            for (j = 0, len = ref.length; j < len; j++) {
                h = ref[j];
                if (h[2] == null) {
                    return;
                }
            }
        }
        cp = this.editor.cursorPos();
        ref1 = this.beforeAfterForPos(cp), before = ref1[0], after = ref1[1];
        if (after.length || before.length) {
            if (after.length && _.first(after).start === cp[0] && _.first(after).value === 'open') {
                cp[0] += 1;
            }
            if (before.length && _.last(before).start === cp[0] - 1 && _.last(before).value === 'close') {
                cp[0] -= 1;
            }
        }
        if (this.highlightInside(cp)) {
            return;
        }
        this.clear();
        return this.editor.renderHighlights();
    };

    Brackets.prototype.highlightInside = function(pos) {
        var after, before, cnt, firstClose, lastOpen, next, pp, prev, ref, ref1, stack;
        stack = [];
        pp = pos;
        cnt = 0;
        while (pp[1] >= 0) {
            ref = this.beforeAfterForPos(pp), before = ref[0], after = ref[1];
            while (before.length) {
                prev = before.pop();
                if (prev.value === 'open') {
                    if (stack.length) {
                        if (this.open[prev.match] === _.last(stack).match) {
                            stack.pop();
                            continue;
                        } else {
                            return;
                        }
                    }
                    lastOpen = prev;
                    break;
                } else {
                    stack.push(prev);
                }
            }
            if (lastOpen != null) {
                break;
            }
            if (pp[1] < 1) {
                return;
            }
            if (cnt++ > 1000) {
                return;
            }
            pp = [this.editor.line(pp[1] - 1).length, pp[1] - 1];
        }
        if (lastOpen == null) {
            return;
        }
        stack = [];
        pp = pos;
        while (pp[1] <= this.editor.numLines()) {
            ref1 = this.beforeAfterForPos(pp), before = ref1[0], after = ref1[1];
            while (after.length) {
                next = after.shift();
                if (next.value === 'close') {
                    if (stack.length) {
                        if (this.open[_.last(stack).match] === next.match) {
                            stack.pop();
                            continue;
                        } else {
                            return;
                        }
                    }
                    firstClose = next;
                    break;
                } else {
                    stack.push(next);
                }
            }
            if (firstClose != null) {
                break;
            }
            if (pp[1] >= this.editor.numLines() - 1) {
                return;
            }
            if (cnt++ > 1000) {
                return;
            }
            pp = [0, pp[1] + 1];
        }
        if (firstClose == null) {
            return;
        }
        if (this.open[lastOpen.match] === firstClose.match) {
            this.highlight(lastOpen, firstClose);
            return true;
        }
    };

    Brackets.prototype.beforeAfterForPos = function(pos) {
        var after, before, cp, firstAfterIndex, fst, i, j, k, len, li, line, lst, r, ref, rngs;
        cp = pos[0], li = pos[1];
        line = this.editor.line(li);
        rngs = matchr.ranges(this.config, line);
        i = rngs.length - 1;
        while (i >= 0) {
            if (rngs[i].start > 0 && line[rngs[i].start - 1] === '\\') {
                rngs.splice(i, 1);
            }
            i -= 1;
        }
        i = rngs.length - 1;
        while (i > 0) {
            if (rngs[i - 1].value === 'open' && rngs[i].value === 'close' && this.open[rngs[i - 1].match] === rngs[i].match && rngs[i - 1].start === rngs[i].start - 1) {
                rngs.splice(i - 1, 2);
                i -= 1;
            }
            i -= 1;
        }
        if (rngs.length) {
            for (j = 0, len = rngs.length; j < len; j++) {
                r = rngs[j];
                r.line = li;
            }
            lst = _.last(rngs);
            fst = _.first(rngs);
            for (firstAfterIndex = k = 0, ref = rngs.length; 0 <= ref ? k < ref : k > ref; firstAfterIndex = 0 <= ref ? ++k : --k) {
                if (rngs[firstAfterIndex].start >= cp) {
                    break;
                }
            }
            before = rngs.slice(0, firstAfterIndex);
            after = rngs.slice(firstAfterIndex);
            return [before, after];
        }
        return [[], []];
    };

    Brackets.prototype.highlight = function(opn, cls) {
        this.clear();
        opn.clss = 'bracketmatch';
        cls.clss = 'bracketmatch';
        this.editor.addHighlight([opn.line, [opn.start, opn.start + opn.match.length], opn]);
        this.editor.addHighlight([cls.line, [cls.start, cls.start + cls.match.length], cls]);
        return this.editor.renderHighlights();
    };

    Brackets.prototype.clear = function() {
        return this.editor.setHighlights(this.editor.highlights().filter(function(h) {
            var ref;
            return ((ref = h[2]) != null ? ref.clss : void 0) !== 'bracketmatch';
        }));
    };

    return Brackets;

})();

module.exports = Brackets;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/editor/brackets.coffee