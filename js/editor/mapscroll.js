// koffee 1.4.0

/*
00     00   0000000   00000000          0000000   0000000  00000000    0000000   000      000    
000   000  000   000  000   000        000       000       000   000  000   000  000      000    
000000000  000000000  00000000         0000000   000       0000000    000   000  000      000    
000 0 000  000   000  000                   000  000       000   000  000   000  000      000    
000   000  000   000  000              0000000    0000000  000   000   0000000   0000000  0000000
 */
var MapScroll, clamp, events,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

clamp = require('kxk').clamp;

events = require('events');

MapScroll = (function(superClass) {
    extend(MapScroll, superClass);

    function MapScroll(cfg) {
        this.setLineHeight = bind(this.setLineHeight, this);
        this.setNumLines = bind(this.setNumLines, this);
        this.setViewHeight = bind(this.setViewHeight, this);
        this.deleteLine = bind(this.deleteLine, this);
        this.insertLine = bind(this.insertLine, this);
        this.setTop = bind(this.setTop, this);
        this.by = bind(this.by, this);
        this.to = bind(this.to, this);
        this.reset = bind(this.reset, this);
        var ref, ref1, ref2, ref3;
        MapScroll.__super__.constructor.call(this);
        this.lineHeight = (ref = cfg.lineHeight) != null ? ref : 0;
        this.viewHeight = (ref1 = cfg.viewHeight) != null ? ref1 : 0;
        this.exposeMax = (ref2 = cfg.exposeMax) != null ? ref2 : -4;
        this.smooth = (ref3 = cfg.smooth) != null ? ref3 : true;
        this.init();
    }

    MapScroll.prototype.init = function() {
        this.scroll = 0;
        this.offsetTop = 0;
        this.offsetSmooth = 0;
        this.fullHeight = 0;
        this.numLines = 0;
        this.top = 0;
        this.bot = 0;
        this.exposed = 0;
        this.exposeTop = 0;
        this.exposeBot = -1;
        this.calc();
        return this.offsetTop = -1;
    };

    MapScroll.prototype.calc = function() {
        this.scrollMax = Math.max(0, this.fullHeight - this.viewHeight);
        this.fullLines = Math.floor(this.viewHeight / this.lineHeight);
        this.viewLines = Math.ceil(this.viewHeight / this.lineHeight);
        this.linesHeight = this.viewLines * this.lineHeight;
        if (this.exposeMax < 0) {
            this.exposeNum = -this.exposeMax * this.viewLines;
        } else {
            this.exposeNum = this.exposeMax;
        }
        return this.exposeHeight = this.exposeNum * this.lineHeight;
    };

    MapScroll.prototype.info = function() {
        return {
            topbot: this.top + " .. " + this.bot + " = " + (this.bot - this.top) + " / " + this.numLines + " lines",
            expose: this.exposeTop + " .. " + this.exposeBot + " = " + (this.exposeBot - this.exposeTop) + " / " + this.exposeNum + " px " + this.exposeHeight,
            scroll: this.scroll + " offsetTop " + this.offsetTop + " scrollMax " + this.scrollMax + " fullLines " + this.fullLines + " viewLines " + this.viewLines + " viewHeight " + this.viewHeight
        };
    };

    MapScroll.prototype.reset = function() {
        this.emit('clearLines');
        return this.init();
    };

    MapScroll.prototype.to = function(p) {
        return this.by(p - this.scroll);
    };

    MapScroll.prototype.by = function(delta) {
        var offset, scroll, top;
        scroll = this.scroll;
        if (Number.isNaN(delta)) {
            delta = 0;
        }
        this.scroll = parseInt(clamp(0, this.scrollMax, this.scroll + delta));
        top = parseInt(this.scroll / this.lineHeight);
        this.offsetSmooth = this.scroll - top * this.lineHeight;
        this.setTop(top);
        offset = 0;
        if (this.smooth) {
            offset += this.offsetSmooth;
        }
        offset += (top - this.exposeTop) * this.lineHeight;
        if (offset !== this.offsetTop || scroll !== this.scroll) {
            this.offsetTop = parseInt(offset);
            return this.emit('scroll', this.scroll, this.offsetTop);
        }
    };

    MapScroll.prototype.setTop = function(top) {
        var n, num, oldBot, oldTop;
        if (this.exposeBot < 0 && this.numLines < 1) {
            return;
        }
        oldTop = this.top;
        oldBot = this.bot;
        this.top = top;
        this.bot = Math.min(this.top + this.viewLines, this.numLines - 1);
        if (oldTop === this.top && oldBot === this.bot && this.exposeBot >= this.bot) {
            return;
        }
        if ((this.top >= this.exposeBot) || (this.bot <= this.exposeTop)) {
            this.emit('clearLines');
            this.exposeTop = this.top;
            this.exposeBot = this.bot;
            num = this.bot - this.top + 1;
            if (num > 0) {
                this.emit('exposeLines', {
                    top: this.top,
                    bot: this.bot,
                    num: num
                });
                this.emit('scroll', this.scroll, this.offsetTop);
            }
            return;
        }
        if (this.top < this.exposeTop) {
            oldTop = this.exposeTop;
            this.exposeTop = Math.max(0, this.top - (Math.min(this.viewLines, this.exposeNum - this.viewLines)));
            num = oldTop - this.exposeTop;
            if (num > 0) {
                this.emit('exposeLines', {
                    top: this.exposeTop,
                    bot: oldTop - 1,
                    num: num
                });
            }
        }
        while (this.bot > this.exposeBot) {
            this.exposeBot += 1;
            this.emit('exposeLine', this.exposeBot);
        }
        if (this.exposeBot - this.exposeTop + 1 > this.exposeNum) {
            num = this.exposeBot - this.exposeTop + 1 - this.exposeNum;
            if (this.top > oldTop) {
                n = clamp(0, this.top - this.exposeTop, num);
                this.exposeTop += n;
                return this.emit('vanishLines', {
                    top: n
                });
            } else {
                n = clamp(0, this.exposeBot - this.bot, num);
                this.exposeBot -= n;
                return this.emit('vanishLines', {
                    bot: n
                });
            }
        }
    };

    MapScroll.prototype.insertLine = function(li, oi) {
        if (this.lineIndexIsInExpose(oi)) {
            this.exposeBot += 1;
        }
        if (this.lineIndexIsInView(oi)) {
            this.bot += 1;
        }
        if (oi < this.top) {
            this.top += 1;
        }
        this.numLines += 1;
        this.fullHeight = this.numLines * this.lineHeight;
        return this.calc();
    };

    MapScroll.prototype.deleteLine = function(li, oi) {
        if (this.lineIndexIsInExpose(oi) || this.numLines < this.exposeNum) {
            this.exposeBot -= 1;
        }
        if (this.lineIndexIsInView(oi)) {
            return this.bot -= 1;
        }
    };

    MapScroll.prototype.lineIndexIsInView = function(li) {
        if ((this.top <= li && li <= this.bot)) {
            return true;
        }
        return this.bot - this.top + 1 < this.fullLines;
    };

    MapScroll.prototype.lineIndexIsInExpose = function(li) {
        if ((this.exposeTop <= li && li <= this.exposeBot)) {
            return true;
        }
        return this.exposeBot - this.exposeTop + 1 < this.exposeNum;
    };

    MapScroll.prototype.setViewHeight = function(h) {
        if (this.viewHeight !== h) {
            this.viewHeight = h;
            this.calc();
            return this.by(0);
        }
    };

    MapScroll.prototype.setNumLines = function(n) {
        if (this.numLines !== n) {
            this.numLines = n;
            this.fullHeight = this.numLines * this.lineHeight;
            if (this.numLines) {
                this.calc();
                return this.by(0);
            } else {
                this.init();
                return this.emit('clearLines');
            }
        }
    };

    MapScroll.prototype.setLineHeight = function(h) {
        if (this.lineHeight !== h) {
            this.lineHeight = h;
            this.fullHeight = this.numLines * this.lineHeight;
            this.calc();
            return this.by(0);
        }
    };

    return MapScroll;

})(events);

module.exports = MapScroll;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/editor/mapscroll.coffee