// koffee 1.4.0

/*
00000000   00000000  000   000  0000000    00000000  00000000
000   000  000       0000  000  000   000  000       000   000
0000000    0000000   000 0 000  000   000  0000000   0000000
000   000  000       000  0000  000   000  000       000   000
000   000  00000000  000   000  0000000    00000000  000   000
 */
var Render, elem, kstr, ref;

ref = require('kxk'), kstr = ref.kstr, elem = ref.elem;

Render = (function() {
    function Render() {}

    Render.line = function(diss, size) {
        var clrzd, d, di, j, l, ref1, ref2, tx, value;
        if (size == null) {
            size = {
                charWidth: 0
            };
        }
        l = "";
        if (diss != null ? diss.length : void 0) {
            for (di = j = ref1 = diss.length - 1; ref1 <= 0 ? j <= 0 : j >= 0; di = ref1 <= 0 ? ++j : --j) {
                d = diss[di];
                tx = d.start * size.charWidth;
                value = (d.value != null) && (" class=\"" + d.value + "\"") || '';
                clrzd = "<span style=\"transform:translatex(" + tx + "px);" + ((ref2 = d.styl) != null ? ref2 : '') + "\"" + value + ">" + (kstr.encode(d.match)) + "</span>";
                l = clrzd + l;
            }
        }
        return l;
    };

    Render.lineSpan = function(diss, size) {
        var d, div, j, k, len, len1, ref1, ref2, span, ss, st;
        div = elem({
            "class": 'linespans'
        });
        ref1 = diss != null ? diss : [];
        for (j = 0, len = ref1.length; j < len; j++) {
            d = ref1[j];
            span = elem('span');
            span.style.transform = "translatex(" + (d.start * size.charWidth) + "px)";
            if (d.value != null) {
                span.className = d.value;
            }
            span.textContent = d.match.replace(/\x1b/g, 'â–ª');
            if (d.styl != null) {
                ref2 = d.styl.split(';');
                for (k = 0, len1 = ref2.length; k < len1; k++) {
                    st = ref2[k];
                    ss = st.split(':');
                    span.style[ss[0]] = ss[1];
                }
            }
            div.appendChild(span);
        }
        return div;
    };

    Render.cursors = function(cs, size) {
        var c, cls, cw, h, i, j, len, lh, tx, ty, zi;
        i = 0;
        h = "";
        cw = size.charWidth;
        lh = size.lineHeight;
        for (j = 0, len = cs.length; j < len; j++) {
            c = cs[j];
            tx = c[0] * cw + size.offsetX;
            ty = c[1] * lh;
            cls = "";
            if (c.length > 2) {
                cls = c[2];
            }
            zi = cls !== 'virtual' && c[1] + 1000 || 0;
            h += "<span class=\"cursor " + cls + "\" style=\"z-index:" + zi + ";transform:translate3d(" + tx + "px," + ty + "px,0); height:" + lh + "px\"></span>";
            i += 1;
        }
        return h;
    };

    Render.selection = function(ss, size, clss) {
        var b, h, j, n, p, ref1, ref2, ref3, ref4, s, si;
        if (clss == null) {
            clss = 'selection';
        }
        h = "";
        p = null;
        n = null;
        for (si = j = 0, ref1 = ss.length; 0 <= ref1 ? j < ref1 : j > ref1; si = 0 <= ref1 ? ++j : --j) {
            s = ss[si];
            n = (si < ss.length - 1) && (ss[si + 1][0] === s[0] + 1) && ss[si + 1] || null;
            b = (p != null ? p[0] : void 0) === s[0] - 1 && p || null;
            h += Render.selectionSpan(b, s, n, size, (ref2 = (ref3 = (ref4 = s[2]) != null ? ref4.clss : void 0) != null ? ref3 : s[2]) != null ? ref2 : clss);
            p = s;
        }
        return h;
    };

    Render.selectionSpan = function(prev, sel, next, size, clss) {
        var border, empty, lh, sw, tx, ty;
        border = "";
        if (!prev) {
            border += " tl tr";
        } else {
            if ((sel[1][0] < prev[1][0]) || (sel[1][0] > prev[1][1])) {
                border += " tl";
            }
            if ((sel[1][1] > prev[1][1]) || (sel[1][1] < prev[1][0])) {
                border += " tr";
            }
        }
        if (!next) {
            border += " bl br";
        } else {
            if (sel[1][1] > next[1][1] || (sel[1][1] < next[1][0])) {
                border += " br";
            }
            if ((sel[1][0] < next[1][0]) || (sel[1][0] > next[1][1])) {
                border += " bl";
            }
        }
        if (sel[1][0] === 0 && !size.centerText) {
            border += " start";
        }
        sw = size.charWidth * (sel[1][1] - sel[1][0]);
        tx = size.charWidth * sel[1][0] + size.offsetX;
        ty = size.lineHeight * sel[0];
        lh = size.lineHeight;
        if (clss.startsWith('stringmatch')) {
            if (clss.endsWith('single')) {
                lh /= 2;
            }
            if (clss.endsWith('double')) {
                lh /= 2;
            }
            if (clss.endsWith('bold')) {
                ty += lh / 4;
                lh /= 2;
            }
        }
        empty = sel[1][0] === sel[1][1] && "empty" || "";
        return "<span class=\"" + clss + border + empty + "\" style=\"transform: translate(" + tx + "px," + ty + "px); width: " + sw + "px; height: " + lh + "px\"></span>";
    };

    return Render;

})();

module.exports = Render;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/editor/render.coffee