// koffee 1.4.0

/*
00000000  000  000      00000000        00000000  0000000    000  000000000   0000000   00000000
000       000  000      000             000       000   000  000     000     000   000  000   000
000000    000  000      0000000         0000000   000   000  000     000     000   000  0000000
000       000  000      000             000       000   000  000     000     000   000  000   000
000       000  0000000  00000000        00000000  0000000    000     000      0000000   000   000
 */
var FileEditor, Menu, Syntax, TextEditor, Watcher, _, clamp, dialog, electron, empty, fs, kerror, klog, kpos, popup, post, ref, remote, setStyle, slash, srcmap, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf;

ref = require('kxk'), post = ref.post, stopEvent = ref.stopEvent, setStyle = ref.setStyle, srcmap = ref.srcmap, popup = ref.popup, slash = ref.slash, empty = ref.empty, clamp = ref.clamp, kpos = ref.kpos, fs = ref.fs, klog = ref.klog, kerror = ref.kerror, _ = ref._;

Watcher = require('../tools/watcher');

TextEditor = require('./texteditor');

Syntax = require('./syntax');

Menu = require('./menu');

electron = require('electron');

remote = electron.remote;

dialog = remote.dialog;

FileEditor = (function(superClass) {
    extend(FileEditor, superClass);

    function FileEditor(viewElem) {
        this.showContextMenu = bind(this.showContextMenu, this);
        this.onContextMenu = bind(this.onContextMenu, this);
        this.changed = bind(this.changed, this);
        FileEditor.__super__.constructor.call(this, viewElem, {
            features: ['Diffbar', 'Scrollbar', 'Numbers', 'Minimap', 'Meta', 'Autocomplete', 'Brackets', 'Strings', 'CursorLine'],
            fontSize: 19
        });
        this.currentFile = null;
        this.watch = null;
        this.view.addEventListener('contextmenu', this.onContextMenu);
        this.initPigments();
        this.initInvisibles();
        this.setText('');
    }

    FileEditor.prototype.changed = function(changeInfo) {
        FileEditor.__super__.changed.call(this, changeInfo);
        return this.updateDirty();
    };

    FileEditor.prototype.updateDirty = function() {
        var dirty;
        dirty = this["do"].hasLineChanges();
        if (this.dirty !== dirty) {
            this.dirty = dirty;
            return post.emit('dirty', this.dirty);
        }
    };

    FileEditor.prototype.clear = function() {
        var ref1, ref2;
        this.setSalterMode(false);
        this.stopWatcher();
        if ((ref1 = this.diffbar) != null) {
            ref1.clear();
        }
        if ((ref2 = this.meta) != null) {
            ref2.clear();
        }
        this.setLines(['']);
        this["do"].reset();
        return this.updateDirty();
    };

    FileEditor.prototype.revert = function() {
        return this.setCurrentFile(this.currentFile);
    };

    FileEditor.prototype.setCurrentFile = function(file) {
        this.clear();
        this.stopWatcher();
        this.currentFile = file;
        this.setupFileType();
        if ((this.currentFile != null) && slash.fileExists(this.currentFile)) {
            this.setText(slash.readText(this.currentFile));
            this.watch = new Watcher(this.currentFile);
        }
        return this.emit('file', this.currentFile);
    };

    FileEditor.prototype.restoreFromTabState = function(tabsState) {
        if (tabsState.file == null) {
            return kerror("no tabsState.file?");
        }
        return this.setCurrentFile(tabsState.file, tabsState.state);
    };

    FileEditor.prototype.stopWatcher = function() {
        var ref1;
        if ((ref1 = this.watch) != null) {
            ref1.stop();
        }
        return this.watch = null;
    };

    FileEditor.prototype.shebangFileType = function() {
        var ext, fileType;
        if (this.numLines()) {
            fileType = Syntax.shebang(this.line(0));
        }
        if (fileType === 'txt') {
            if (this.currentFile != null) {
                ext = slash.ext(this.currentFile);
                if (indexOf.call(Syntax.syntaxNames, ext) >= 0) {
                    return ext;
                }
            }
        } else if (fileType) {
            return fileType;
        }
        return FileEditor.__super__.shebangFileType.call(this);
    };

    FileEditor.prototype.save = function() {
        return slash.writeText(this.currentFile, this.text(), (function(_this) {
            return function() {
                _this["do"].reset();
                return _this.updateDirty();
            };
        })(this));
    };

    FileEditor.prototype.saveAs = function() {
        return dialog.showSaveDialog({
            title: 'Save File As',
            defaultPath: slash.unslash(this.currentFile)
        }).then((function(_this) {
            return function(result) {
                if (!result.cancelled && result.filePath) {
                    slash.writeText(result.filePath, _this.text());
                    return post.emit('navigateToFile', result.filePath);
                }
            };
        })(this));
    };

    FileEditor.prototype.saveScrollCursorsAndSelections = function(opt) {
        var filePositions, s;
        if (!this.currentFile) {
            return;
        }
        s = {};
        s.main = this.state.main();
        if (this.numCursors() > 1 || this.cursorPos()[0] || this.cursorPos()[1]) {
            s.cursors = this.state.cursors();
        }
        if (this.numSelections()) {
            s.selections = this.state.selections();
        }
        if (this.numHighlights()) {
            s.highlights = this.state.highlights();
        }
        if (this.scroll.scroll) {
            s.scroll = this.scroll.scroll;
        }
        filePositions = prefs.get('filePositions', Object.create(null));
        if (!_.isPlainObject(filePositions)) {
            filePositions = Object.create(null);
        }
        filePositions[this.currentFile] = s;
        return prefs.set('filePositions', filePositions);
    };

    FileEditor.prototype.restoreScrollCursorsAndSelections = function() {
        var cursors, filePositions, ref1, ref2, ref3, ref4, ref5, s;
        if (!this.currentFile) {
            return;
        }
        filePositions = prefs.get('filePositions', {});
        if (filePositions[this.currentFile] != null) {
            s = filePositions[this.currentFile];
            cursors = (ref1 = s.cursors) != null ? ref1 : [[0, 0]];
            cursors = cursors.map((function(_this) {
                return function(c) {
                    return [c[0], clamp(0, _this.numLines() - 1, c[1])];
                };
            })(this));
            this.setCursors(cursors);
            this.setSelections((ref2 = s.selections) != null ? ref2 : []);
            this.setHighlights((ref3 = s.highlights) != null ? ref3 : []);
            this.setMain((ref4 = s.main) != null ? ref4 : 0);
            this.setState(this.state);
            this.syntax.fillDiss(this.mainCursor()[1]);
            if (s.scroll) {
                this.scroll.to(s.scroll);
            }
            this.scroll.cursorIntoView();
        } else {
            this.singleCursorAtPos([0, 0]);
            if (this.mainCursor()[1] === 0) {
                this.scroll.top = 0;
            }
            this.scroll.bot = this.scroll.top - 1;
            this.scroll.to(0);
            this.scroll.cursorIntoView();
        }
        this.updateLayers();
        if ((ref5 = this.numbers) != null) {
            ref5.updateColors();
        }
        this.minimap.onEditorScroll();
        this.emit('cursor');
        return this.emit('selection');
    };

    FileEditor.prototype.centerText = function(center, animate) {
        var br, i, j, l, layers, len, len1, newOffset, offsetX, resetTrans, t, transi, visCols;
        if (animate == null) {
            animate = 300;
        }
        this.size.centerText = center;
        this.updateLayers();
        this.size.offsetX = Math.floor(this.size.charWidth / 2 + this.size.numbersWidth);
        if (center) {
            br = this.view.getBoundingClientRect();
            visCols = parseInt(br.width / this.size.charWidth);
            newOffset = parseInt(this.size.charWidth * (visCols - 100) / 2);
            this.size.offsetX = Math.max(this.size.offsetX, newOffset);
            this.size.centerText = true;
        } else {
            this.size.centerText = false;
        }
        this.updateLinePositions(animate);
        if (animate) {
            layers = ['.selections', '.highlights', '.cursors'];
            transi = ['.selection', '.highlight', '.cursor'].concat(layers);
            resetTrans = (function(_this) {
                return function() {
                    var i, j, l, len, len1, t;
                    for (i = 0, len = layers.length; i < len; i++) {
                        l = layers[i];
                        setStyle('.editor .layers ' + l, 'transform', "translateX(0)");
                    }
                    for (j = 0, len1 = transi.length; j < len1; j++) {
                        t = transi[j];
                        setStyle('.editor .layers ' + t, 'transition', "initial");
                    }
                    return _this.updateLayers();
                };
            })(this);
            if (center) {
                offsetX = this.size.offsetX - this.size.numbersWidth - this.size.charWidth / 2;
            } else {
                offsetX = Math.floor(this.size.charWidth / 2 + this.size.numbersWidth);
                offsetX = Math.max(offsetX, (this.screenSize().width - this.screenSize().height) / 2);
                offsetX -= this.size.numbersWidth + this.size.charWidth / 2;
                offsetX *= -1;
            }
            for (i = 0, len = layers.length; i < len; i++) {
                l = layers[i];
                setStyle('.editor .layers ' + l, 'transform', "translateX(" + offsetX + "px)");
            }
            for (j = 0, len1 = transi.length; j < len1; j++) {
                t = transi[j];
                setStyle('.editor .layers ' + t, 'transition', "all " + (animate / 1000) + "s");
            }
            return setTimeout(resetTrans, animate);
        } else {
            return this.updateLayers();
        }
    };

    FileEditor.prototype.onContextMenu = function(event) {
        return stopEvent(event, this.showContextMenu(kpos(event)));
    };

    FileEditor.prototype.showContextMenu = function(absPos) {
        if (absPos == null) {
            absPos = kpos(this.view.getBoundingClientRect().left, this.view.getBoundingClientRect().top);
        }
        return popup.menu({
            items: [
                {
                    text: 'Close Editor',
                    combo: 'ctrl+w'
                }, {
                    text: ''
                }
            ].concat(Menu()),
            x: absPos.x,
            y: absPos.y
        });
    };

    FileEditor.prototype.clickAtPos = function(p, event) {
        if (event.metaKey) {
            if (kpos(event).x <= this.size.numbersWidth) {
                this.singleCursorAtPos(p);
                return;
            }
        }
        return FileEditor.__super__.clickAtPos.call(this, p, event);
    };

    return FileEditor;

})(TextEditor);

module.exports = FileEditor;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZWVkaXRvci5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsc0tBQUE7SUFBQTs7Ozs7QUFRQSxNQUErRixPQUFBLENBQVEsS0FBUixDQUEvRixFQUFFLGVBQUYsRUFBUSx5QkFBUixFQUFtQix1QkFBbkIsRUFBNkIsbUJBQTdCLEVBQXFDLGlCQUFyQyxFQUE0QyxpQkFBNUMsRUFBbUQsaUJBQW5ELEVBQTBELGlCQUExRCxFQUFpRSxlQUFqRSxFQUF1RSxXQUF2RSxFQUEyRSxlQUEzRSxFQUFpRixtQkFBakYsRUFBeUY7O0FBRXpGLE9BQUEsR0FBYSxPQUFBLENBQVEsa0JBQVI7O0FBQ2IsVUFBQSxHQUFhLE9BQUEsQ0FBUSxjQUFSOztBQUNiLE1BQUEsR0FBYSxPQUFBLENBQVEsVUFBUjs7QUFDYixJQUFBLEdBQWEsT0FBQSxDQUFRLFFBQVI7O0FBQ2IsUUFBQSxHQUFhLE9BQUEsQ0FBUSxVQUFSOztBQUNiLE1BQUEsR0FBYSxRQUFRLENBQUM7O0FBQ3RCLE1BQUEsR0FBYSxNQUFNLENBQUM7O0FBRWQ7OztJQUVDLG9CQUFDLFFBQUQ7Ozs7UUFFQyw0Q0FBTSxRQUFOLEVBQ0k7WUFBQSxRQUFBLEVBQVUsQ0FDTixTQURNLEVBRU4sV0FGTSxFQUdOLFNBSE0sRUFJTixTQUpNLEVBS04sTUFMTSxFQU1OLGNBTk0sRUFPTixVQVBNLEVBUU4sU0FSTSxFQVNOLFlBVE0sQ0FBVjtZQVdBLFFBQUEsRUFBVSxFQVhWO1NBREo7UUFjQSxJQUFDLENBQUEsV0FBRCxHQUFlO1FBQ2YsSUFBQyxDQUFBLEtBQUQsR0FBZTtRQUVmLElBQUMsQ0FBQSxJQUFJLENBQUMsZ0JBQU4sQ0FBdUIsYUFBdkIsRUFBcUMsSUFBQyxDQUFBLGFBQXRDO1FBRUEsSUFBQyxDQUFBLFlBQUQsQ0FBQTtRQUNBLElBQUMsQ0FBQSxjQUFELENBQUE7UUFFQSxJQUFDLENBQUEsT0FBRCxDQUFTLEVB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MDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDBcbjAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbjAwMDAwMCAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgICAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwXG4wMDAgICAgICAgMDAwICAwMDAgICAgICAwMDAgICAgICAgICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4wMDAgICAgICAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgICAgICAgMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAgICAwMDAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwXG4jIyNcblxueyBwb3N0LCBzdG9wRXZlbnQsIHNldFN0eWxlLCBzcmNtYXAsIHBvcHVwLCBzbGFzaCwgZW1wdHksIGNsYW1wLCBrcG9zLCBmcywga2xvZywga2Vycm9yLCBfIH0gPSByZXF1aXJlICdreGsnXG5cbldhdGNoZXIgICAgPSByZXF1aXJlICcuLi90b29scy93YXRjaGVyJ1xuVGV4dEVkaXRvciA9IHJlcXVpcmUgJy4vdGV4dGVkaXRvcidcblN5bnRheCAgICAgPSByZXF1aXJlICcuL3N5bnRheCdcbk1lbnUgICAgICAgPSByZXF1aXJlICcuL21lbnUnXG5lbGVjdHJvbiAgID0gcmVxdWlyZSAnZWxlY3Ryb24nXG5yZW1vdGUgICAgID0gZWxlY3Ryb24ucmVtb3RlXG5kaWFsb2cgICAgID0gcmVtb3RlLmRpYWxvZ1xuXG5jbGFzcyBGaWxlRWRpdG9yIGV4dGVuZHMgVGV4dEVkaXRvclxuXG4gICAgQDogKHZpZXdFbGVtKSAtPlxuXG4gICAgICAgIHN1cGVyIHZpZXdFbGVtLFxuICAgICAgICAgICAgZmVhdHVyZXM6IFtcbiAgICAgICAgICAgICAgICAnRGlmZmJhcidcbiAgICAgICAgICAgICAgICAnU2Nyb2xsYmFyJ1xuICAgICAgICAgICAgICAgICdOdW1iZXJzJ1xuICAgICAgICAgICAgICAgICdNaW5pbWFwJ1xuICAgICAgICAgICAgICAgICdNZXRhJ1xuICAgICAgICAgICAgICAgICdBdXRvY29tcGxldGUnXG4gICAgICAgICAgICAgICAgJ0JyYWNrZXRzJ1xuICAgICAgICAgICAgICAgICdTdHJpbmdzJ1xuICAgICAgICAgICAgICAgICdDdXJzb3JMaW5lJ1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGZvbnRTaXplOiAxOVxuXG4gICAgICAgIEBjdXJyZW50RmlsZSA9IG51bGxcbiAgICAgICAgQHdhdGNoICAgICAgID0gbnVsbFxuXG4gICAgICAgIEB2aWV3LmFkZEV2ZW50TGlzdGVuZXIgJ2NvbnRleHRtZW51JyBAb25Db250ZXh0TWVudVxuXG4gICAgICAgIEBpbml0UGlnbWVudHMoKVxuICAgICAgICBAaW5pdEludmlzaWJsZXMoKVxuXG4gICAgICAgIEBzZXRUZXh0ICcnXG5cbiAgICAjICAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICAgICAwMDAgICAgICAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMCAwIDAwMCAgMDAwICAwMDAwICAwMDAwMDAwICAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwMDAwMFxuXG4gICAgY2hhbmdlZDogKGNoYW5nZUluZm8pID0+XG5cbiAgICAgICAgc3VwZXIgY2hhbmdlSW5mb1xuICAgICAgICBAdXBkYXRlRGlydHkoKVxuICAgICAgICBcbiAgICB1cGRhdGVEaXJ0eTogLT5cbiAgICAgICAgXG4gICAgICAgIGRpcnR5ID0gQGRvLmhhc0xpbmVDaGFuZ2VzKClcbiAgICAgICAgaWYgQGRpcnR5ICE9IGRpcnR5XG4gICAgICAgICAgICBAZGlydHkgPSBkaXJ0eVxuICAgICAgICAgICAgcG9zdC5lbWl0ICdkaXJ0eScgQGRpcnR5XG5cbiAgICAjIDAwMDAwMDAwICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAwMDAgICAgICAwMDBcbiAgICAjIDAwMDAwMCAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDBcblxuICAgIGNsZWFyOiAtPlxuXG4gICAgICAgIEBzZXRTYWx0ZXJNb2RlIGZhbHNlXG4gICAgICAgIEBzdG9wV2F0Y2hlcigpXG4gICAgICAgIEBkaWZmYmFyPy5jbGVhcigpXG4gICAgICAgIEBtZXRhPy5jbGVhcigpXG4gICAgICAgIEBzZXRMaW5lcyBbJyddXG4gICAgICAgIEBkby5yZXNldCgpXG4gICAgICAgIEB1cGRhdGVEaXJ0eSgpXG5cbiAgICByZXZlcnQ6IC0+IEBzZXRDdXJyZW50RmlsZSBAY3VycmVudEZpbGVcbiAgICAgICAgXG4gICAgc2V0Q3VycmVudEZpbGU6IChmaWxlKSAtPlxuXG4gICAgICAgIEBjbGVhcigpXG4gICAgICAgIEBzdG9wV2F0Y2hlcigpXG5cbiAgICAgICAgQGN1cnJlbnRGaWxlID0gZmlsZVxuXG4gICAgICAgIEBzZXR1cEZpbGVUeXBlKClcblxuICAgICAgICBpZiBAY3VycmVudEZpbGU/IGFuZCBzbGFzaC5maWxlRXhpc3RzIEBjdXJyZW50RmlsZVxuICAgICAgICAgICAgQHNldFRleHQgc2xhc2gucmVhZFRleHQgQGN1cnJlbnRGaWxlXG4gICAgICAgICAgICBAd2F0Y2ggPSBuZXcgV2F0Y2hlciBAY3VycmVudEZpbGVcblxuICAgICAgICAjIHBvc3QuZW1pdCAnZmlsZScgQGN1cnJlbnRGaWxlICMgYnJvd3NlciAmIHNoZWxmXG5cbiAgICAgICAgQGVtaXQgJ2ZpbGUnIEBjdXJyZW50RmlsZSAjIGRpZmZiYXIsIHBpZ21lbnRzLCAuLi5cblxuICAgICAgICAjIHBvc3QuZW1pdCAnZGlydHknIEBkaXJ0eVxuXG4gICAgcmVzdG9yZUZyb21UYWJTdGF0ZTogKHRhYnNTdGF0ZSkgLT5cblxuICAgICAgICByZXR1cm4ga2Vycm9yIFwibm8gdGFic1N0YXRlLmZpbGU/XCIgaWYgbm90IHRhYnNTdGF0ZS5maWxlP1xuICAgICAgICBAc2V0Q3VycmVudEZpbGUgdGFic1N0YXRlLmZpbGUsIHRhYnNTdGF0ZS5zdGF0ZVxuXG4gICAgc3RvcFdhdGNoZXI6IC0+XG5cbiAgICAgICAgQHdhdGNoPy5zdG9wKClcbiAgICAgICAgQHdhdGNoID0gbnVsbFxuXG4gICAgIyAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwMFxuICAgICMgICAgMDAwICAgICAgMDAwIDAwMCAgIDAwMCAgIDAwMCAgMDAwXG4gICAgIyAgICAwMDAgICAgICAgMDAwMDAgICAgMDAwMDAwMDAgICAwMDAwMDAwXG4gICAgIyAgICAwMDAgICAgICAgIDAwMCAgICAgMDAwICAgICAgICAwMDBcbiAgICAjICAgIDAwMCAgICAgICAgMDAwICAgICAwMDAgICAgICAgIDAwMDAwMDAwXG5cbiAgICBzaGViYW5nRmlsZVR5cGU6IC0+XG5cbiAgICAgICAgZmlsZVR5cGUgPSBTeW50YXguc2hlYmFuZyBAbGluZSgwKSBpZiBAbnVtTGluZXMoKVxuICAgICAgICBpZiBmaWxlVHlwZSA9PSAndHh0J1xuICAgICAgICAgICAgaWYgQGN1cnJlbnRGaWxlP1xuICAgICAgICAgICAgICAgIGV4dCA9IHNsYXNoLmV4dCBAY3VycmVudEZpbGVcbiAgICAgICAgICAgICAgICBpZiBleHQgaW4gU3ludGF4LnN5bnRheE5hbWVzXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleHRcbiAgICAgICAgZWxzZSBpZiBmaWxlVHlwZVxuICAgICAgICAgICAgcmV0dXJuIGZpbGVUeXBlXG5cbiAgICAgICAgc3VwZXIoKVxuXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwMCAgIDAwMCAwMDAgICAwMDAwMDAwXG4gICAgIyAgICAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgIDAgICAgICAwMDAwMDAwMFxuXG4gICAgc2F2ZTogLT5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgc2xhc2gud3JpdGVUZXh0IEBjdXJyZW50RmlsZSwgQHRleHQoKSwgPT5cbiAgICAgICAgICAgIEBkby5yZXNldCgpXG4gICAgICAgICAgICBAdXBkYXRlRGlydHkoKVxuICAgICAgICBcbiAgICBzYXZlQXM6IC0+XG4gICAgXG4gICAgICAgIGRpYWxvZy5zaG93U2F2ZURpYWxvZyh0aXRsZTonU2F2ZSBGaWxlIEFzJyBkZWZhdWx0UGF0aDpzbGFzaC51bnNsYXNoIEBjdXJyZW50RmlsZSkudGhlbiAocmVzdWx0KSA9PlxuICAgICAgICAgICAgaWYgbm90IHJlc3VsdC5jYW5jZWxsZWQgYW5kIHJlc3VsdC5maWxlUGF0aFxuICAgICAgICAgICAgICAgIHNsYXNoLndyaXRlVGV4dCByZXN1bHQuZmlsZVBhdGgsIEB0ZXh0KClcbiAgICAgICAgICAgICAgICBwb3N0LmVtaXQgJ25hdmlnYXRlVG9GaWxlJyByZXN1bHQuZmlsZVBhdGhcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgc2F2ZVNjcm9sbEN1cnNvcnNBbmRTZWxlY3Rpb25zOiAob3B0KSAtPlxuXG4gICAgICAgIHJldHVybiBpZiBub3QgQGN1cnJlbnRGaWxlXG4gICAgICAgIHMgPSB7fVxuXG4gICAgICAgIHMubWFpbiAgICAgICA9IEBzdGF0ZS5tYWluKClcbiAgICAgICAgcy5jdXJzb3JzICAgID0gQHN0YXRlLmN1cnNvcnMoKSAgICBpZiBAbnVtQ3Vyc29ycygpID4gMSBvciBAY3Vyc29yUG9zKClbMF0gb3IgQGN1cnNvclBvcygpWzFdXG4gICAgICAgIHMuc2VsZWN0aW9ucyA9IEBzdGF0ZS5zZWxlY3Rpb25zKCkgaWYgQG51bVNlbGVjdGlvbnMoKVxuICAgICAgICBzLmhpZ2hsaWdodHMgPSBAc3RhdGUuaGlnaGxpZ2h0cygpIGlmIEBudW1IaWdobGlnaHRzKClcblxuICAgICAgICBzLnNjcm9sbCA9IEBzY3JvbGwuc2Nyb2xsIGlmIEBzY3JvbGwuc2Nyb2xsXG5cbiAgICAgICAgZmlsZVBvc2l0aW9ucyA9IHByZWZzLmdldCAnZmlsZVBvc2l0aW9ucycgT2JqZWN0LmNyZWF0ZSBudWxsXG4gICAgICAgIGlmIG5vdCBfLmlzUGxhaW5PYmplY3QgZmlsZVBvc2l0aW9uc1xuICAgICAgICAgICAgZmlsZVBvc2l0aW9ucyA9IE9iamVjdC5jcmVhdGUgbnVsbFxuICAgICAgICBmaWxlUG9zaXRpb25zW0BjdXJyZW50RmlsZV0gPSBzXG4gICAgICAgIHByZWZzLnNldCAnZmlsZVBvc2l0aW9ucycgZmlsZVBvc2l0aW9uc1xuXG4gICAgIyAwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDBcblxuICAgIHJlc3RvcmVTY3JvbGxDdXJzb3JzQW5kU2VsZWN0aW9uczogLT5cblxuICAgICAgICByZXR1cm4gaWYgbm90IEBjdXJyZW50RmlsZVxuXG4gICAgICAgIGZpbGVQb3NpdGlvbnMgPSBwcmVmcy5nZXQgJ2ZpbGVQb3NpdGlvbnMnIHt9XG5cbiAgICAgICAgaWYgZmlsZVBvc2l0aW9uc1tAY3VycmVudEZpbGVdP1xuXG4gICAgICAgICAgICBzID0gZmlsZVBvc2l0aW9uc1tAY3VycmVudEZpbGVdXG5cbiAgICAgICAgICAgIGN1cnNvcnMgPSBzLmN1cnNvcnMgPyBbWzAsMF1dXG4gICAgICAgICAgICBjdXJzb3JzID0gY3Vyc29ycy5tYXAgKGMpID0+IFtjWzBdLCBjbGFtcCgwLEBudW1MaW5lcygpLTEsY1sxXSldXG5cbiAgICAgICAgICAgIEBzZXRDdXJzb3JzICAgIGN1cnNvcnNcbiAgICAgICAgICAgIEBzZXRTZWxlY3Rpb25zIHMuc2VsZWN0aW9ucyA/IFtdXG4gICAgICAgICAgICBAc2V0SGlnaGxpZ2h0cyBzLmhpZ2hsaWdodHMgPyBbXVxuICAgICAgICAgICAgQHNldE1haW4gICAgICAgcy5tYWluID8gMFxuICAgICAgICAgICAgQHNldFN0YXRlIEBzdGF0ZVxuXG4gICAgICAgICAgICBAc3ludGF4LmZpbGxEaXNzIEBtYWluQ3Vyc29yKClbMV1cblxuICAgICAgICAgICAgQHNjcm9sbC50byBzLnNjcm9sbCBpZiBzLnNjcm9sbFxuICAgICAgICAgICAgQHNjcm9sbC5jdXJzb3JJbnRvVmlldygpXG5cbiAgICAgICAgZWxzZVxuXG4gICAgICAgICAgICBAc2luZ2xlQ3Vyc29yQXRQb3MgWzAsMF1cbiAgICAgICAgICAgIEBzY3JvbGwudG9wID0gMCBpZiBAbWFpbkN1cnNvcigpWzFdID09IDBcbiAgICAgICAgICAgIEBzY3JvbGwuYm90ID0gQHNjcm9sbC50b3AtMVxuICAgICAgICAgICAgQHNjcm9sbC50byAwXG4gICAgICAgICAgICBAc2Nyb2xsLmN1cnNvckludG9WaWV3KClcblxuICAgICAgICBAdXBkYXRlTGF5ZXJzKClcbiAgICAgICAgQG51bWJlcnM/LnVwZGF0ZUNvbG9ycygpXG4gICAgICAgIEBtaW5pbWFwLm9uRWRpdG9yU2Nyb2xsKClcbiAgICAgICAgQGVtaXQgJ2N1cnNvcidcbiAgICAgICAgQGVtaXQgJ3NlbGVjdGlvbidcblxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgIDAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwMDAwMCAgIDAwMCAwIDAwMCAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgICAwMDAgIDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMFxuXG4gICAgY2VudGVyVGV4dDogKGNlbnRlciwgYW5pbWF0ZT0zMDApIC0+XG5cbiAgICAgICAgQHNpemUuY2VudGVyVGV4dCA9IGNlbnRlclxuICAgICAgICBAdXBkYXRlTGF5ZXJzKClcblxuICAgICAgICBAc2l6ZS5vZmZzZXRYID0gTWF0aC5mbG9vciBAc2l6ZS5jaGFyV2lkdGgvMiArIEBzaXplLm51bWJlcnNXaWR0aFxuICAgICAgICBpZiBjZW50ZXJcbiAgICAgICAgICAgIGJyICAgICAgICA9IEB2aWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgICB2aXNDb2xzICAgPSBwYXJzZUludCBici53aWR0aCAvIEBzaXplLmNoYXJXaWR0aFxuICAgICAgICAgICAgbmV3T2Zmc2V0ID0gcGFyc2VJbnQgQHNpemUuY2hhcldpZHRoICogKHZpc0NvbHMgLSAxMDApIC8gMlxuICAgICAgICAgICAgQHNpemUub2Zmc2V0WCA9IE1hdGgubWF4IEBzaXplLm9mZnNldFgsIG5ld09mZnNldFxuICAgICAgICAgICAgQHNpemUuY2VudGVyVGV4dCA9IHRydWVcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHNpemUuY2VudGVyVGV4dCA9IGZhbHNlXG5cbiAgICAgICAgQHVwZGF0ZUxpbmVQb3NpdGlvbnMgYW5pbWF0ZVxuXG4gICAgICAgIGlmIGFuaW1hdGVcbiAgICAgICAgICAgIGxheWVycyA9IFsnLnNlbGVjdGlvbnMnICcuaGlnaGxpZ2h0cycgJy5jdXJzb3JzJ11cbiAgICAgICAgICAgIHRyYW5zaSA9IFsnLnNlbGVjdGlvbicgICcuaGlnaGxpZ2h0JyAgJy5jdXJzb3InIF0uY29uY2F0IGxheWVyc1xuICAgICAgICAgICAgcmVzZXRUcmFucyA9ID0+XG4gICAgICAgICAgICAgICAgc2V0U3R5bGUgJy5lZGl0b3IgLmxheWVycyAnK2wsICd0cmFuc2Zvcm0nIFwidHJhbnNsYXRlWCgwKVwiIGZvciBsIGluIGxheWVyc1xuICAgICAgICAgICAgICAgIHNldFN0eWxlICcuZWRpdG9yIC5sYXllcnMgJyt0LCAndHJhbnNpdGlvbicgXCJpbml0aWFsXCIgZm9yIHQgaW4gdHJhbnNpXG4gICAgICAgICAgICAgICAgQHVwZGF0ZUxheWVycygpXG5cbiAgICAgICAgICAgIGlmIGNlbnRlclxuICAgICAgICAgICAgICAgIG9mZnNldFggPSBAc2l6ZS5vZmZzZXRYIC0gQHNpemUubnVtYmVyc1dpZHRoIC0gQHNpemUuY2hhcldpZHRoLzJcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvZmZzZXRYID0gTWF0aC5mbG9vciBAc2l6ZS5jaGFyV2lkdGgvMiArIEBzaXplLm51bWJlcnNXaWR0aFxuICAgICAgICAgICAgICAgIG9mZnNldFggPSBNYXRoLm1heCBvZmZzZXRYLCAoQHNjcmVlblNpemUoKS53aWR0aCAtIEBzY3JlZW5TaXplKCkuaGVpZ2h0KSAvIDJcbiAgICAgICAgICAgICAgICBvZmZzZXRYIC09IEBzaXplLm51bWJlcnNXaWR0aCArIEBzaXplLmNoYXJXaWR0aC8yXG4gICAgICAgICAgICAgICAgb2Zmc2V0WCAqPSAtMVxuXG4gICAgICAgICAgICBzZXRTdHlsZSAnLmVkaXRvciAubGF5ZXJzICcrbCwgJ3RyYW5zZm9ybScgXCJ0cmFuc2xhdGVYKCN7b2Zmc2V0WH1weClcIiBmb3IgbCBpbiBsYXllcnNcbiAgICAgICAgICAgIHNldFN0eWxlICcuZWRpdG9yIC5sYXllcnMgJyt0LCAndHJhbnNpdGlvbicgXCJhbGwgI3thbmltYXRlLzEwMDB9c1wiIGZvciB0IGluIHRyYW5zaVxuICAgICAgICAgICAgc2V0VGltZW91dCByZXNldFRyYW5zLCBhbmltYXRlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEB1cGRhdGVMYXllcnMoKVxuXG4gICAgIyAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDBcbiAgICAjIDAwMCAgICAgICAgIDAwMDAwMDAgICAwMDAgICAgICAgICAwMDAwMDAwICAgMDAwXG5cbiAgICBvbkNvbnRleHRNZW51OiAoZXZlbnQpID0+IHN0b3BFdmVudCBldmVudCwgQHNob3dDb250ZXh0TWVudSBrcG9zIGV2ZW50XG5cbiAgICBzaG93Q29udGV4dE1lbnU6IChhYnNQb3MpID0+XG5cbiAgICAgICAgaWYgbm90IGFic1Bvcz9cbiAgICAgICAgICAgIGFic1BvcyA9IGtwb3MgQHZpZXcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCwgQHZpZXcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wXG5cbiAgICAgICAgcG9wdXAubWVudSBcbiAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgdGV4dDonQ2xvc2UgRWRpdG9yJyBjb21ibzonY3RybCt3J1xuICAgICAgICAgICAgLFxuICAgICAgICAgICAgICAgIHRleHQ6JydcbiAgICAgICAgICAgIF0uY29uY2F0IE1lbnUoKVxuICAgICAgICAgICAgeDogYWJzUG9zLnhcbiAgICAgICAgICAgIHk6IGFic1Bvcy55XG5cbiAgICAjICAwMDAwMDAwICAwMDAgICAgICAwMDAgICAwMDAwMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgMDAwICAgICAgIDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMFxuXG4gICAgY2xpY2tBdFBvczogKHAsIGV2ZW50KSAtPlxuXG4gICAgICAgIGlmIGV2ZW50Lm1ldGFLZXlcbiAgICAgICAgICAgIGlmIGtwb3MoZXZlbnQpLnggPD0gQHNpemUubnVtYmVyc1dpZHRoXG4gICAgICAgICAgICAgICAgQHNpbmdsZUN1cnNvckF0UG9zIHBcbiAgICAgICAgICAgICAgICByZXR1cm5cblxuICAgICAgICBzdXBlciBwLCBldmVudFxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbGVFZGl0b3JcbiJdfQ==
//# sourceURL=../../coffee/editor/fileeditor.coffee