// koffee 1.4.0
var _;

_ = require('kxk')._;

module.exports = {
    actions: {
        menu: 'Line',
        toggleComment: {
            name: 'Toggle Comment',
            combo: 'command+/',
            accel: 'ctrl+/'
        },
        toggleHeader: {
            name: 'Toggle Header',
            combo: 'command+alt+/',
            accel: 'alt+ctrl+/'
        }
    },
    toggleHeader: function() {
        var il, indent, j, k, len, len1, r, rgs;
        if (!this.lineComment) {
            return;
        }
        rgs = this.salterRangesAtPos(this.cursorPos());
        if (!rgs) {
            return;
        }
        il = _.min((function() {
            var j, len, results;
            results = [];
            for (j = 0, len = rgs.length; j < len; j++) {
                r = rgs[j];
                results.push(this.indentationAtLineIndex(r[0]));
            }
            return results;
        }).call(this));
        indent = _.padStart("", il);
        this["do"].start();
        if (!this["do"].line(rgs[0][0]).slice(il).startsWith(this.lineComment)) {
            for (j = 0, len = rgs.length; j < len; j++) {
                r = rgs[j];
                this["do"].change(r[0], this["do"].line(r[0]).splice(il, 0, this.lineComment + ' '));
            }
            this["do"]["delete"](_.first(rgs)[0] - 1);
            this["do"]["delete"](_.last(rgs)[0]);
            this.moveCursorsUp();
            this.moveCursorsRight(false, this.lineComment.length + 1);
        } else if (this.multiComment) {
            for (k = 0, len1 = rgs.length; k < len1; k++) {
                r = rgs[k];
                this["do"].change(r[0], this["do"].line(r[0]).splice(il, this.lineComment.length + 1));
            }
            this["do"].insert(_.last(rgs)[0] + 1, indent + this.multiComment.close);
            this["do"].insert(_.first(rgs)[0], indent + this.multiComment.open);
            this.moveCursorsDown();
            this.moveCursorsLeft(false, this.lineComment.length + 1);
        }
        return this["do"].end();
    },
    toggleComment: function() {
        var cs, i, j, l, len, mainCursorLine, moveInLine, newCursors, newSelections, ref, si, uncomment;
        if (!this.lineComment) {
            return;
        }
        this["do"].start();
        newCursors = this["do"].cursors();
        newSelections = this["do"].selections();
        moveInLine = function(i, d) {
            var c, j, k, len, len1, ref, ref1, results, s;
            ref = rangesAtLineIndexInRanges(i, newSelections);
            for (j = 0, len = ref.length; j < len; j++) {
                s = ref[j];
                s[1][0] += d;
                s[1][1] += d;
            }
            ref1 = positionsAtLineIndexInPositions(i, newCursors);
            results = [];
            for (k = 0, len1 = ref1.length; k < len1; k++) {
                c = ref1[k];
                results.push(cursorDelta(c, d));
            }
            return results;
        };
        mainCursorLine = this["do"].line(this.mainCursor()[1]);
        cs = mainCursorLine.indexOf(this.lineComment);
        uncomment = cs >= 0 && mainCursorLine.substr(0, cs).trim().length === 0;
        ref = this.selectedAndCursorLineIndices();
        for (j = 0, len = ref.length; j < len; j++) {
            i = ref[j];
            cs = this["do"].line(i).indexOf(this.lineComment);
            if (uncomment) {
                if (cs >= 0 && this["do"].line(i).substr(0, cs).trim().length === 0) {
                    this["do"].change(i, this["do"].line(i).splice(cs, this.lineComment.length));
                    moveInLine(i, -this.lineComment.length);
                    si = indentationInLine(this["do"].line(i));
                    if (si % this.indentString.length === 1) {
                        this["do"].change(i, this["do"].line(i).splice(si - 1, 1));
                        moveInLine(i, -1);
                    }
                }
            } else {
                si = indentationInLine(this["do"].line(i));
                if (this["do"].line(i).length > si) {
                    l = (this.lineComment + " ").length;
                    this["do"].change(i, this["do"].line(i).splice(si, 0, this.lineComment + " "));
                    moveInLine(i, l);
                }
            }
        }
        this["do"].select(newSelections);
        this["do"].setCursors(newCursors);
        return this["do"].end();
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/togglecomment.coffee