// koffee 1.4.0
var _, clipboard, electron, empty, ref;

ref = require('kxk'), empty = ref.empty, _ = ref._;

electron = require('electron');

clipboard = electron.clipboard;

module.exports = {
    actions: {
        cutCopyPaste: {
            combos: ['command+x', 'ctrl+x', 'command+c', 'ctrl+c', 'command+v', 'ctrl+v']
        }
    },
    cutCopyPaste: function(key, info) {
        switch (key) {
            case 'x':
                return this.cut();
            case 'c':
                return this.copy();
            case 'v':
                return this.paste();
        }
    },
    cut: function() {
        this["do"].start();
        this.copy();
        this.deleteSelectionOrCursorLines();
        return this["do"].end();
    },
    copy: function() {
        return clipboard != null ? clipboard.writeText(this.textOfSelectionForClipboard()) : void 0;
    },
    paste: function() {
        return this.pasteText(clipboard != null ? clipboard.readText() : void 0);
    },
    replaceSelectedText: function(lines) {
        var i, insert, j, ldiff, len, len1, newSelections, ns, oldLength, os, ref1;
        this["do"].start();
        newSelections = this["do"].selections();
        for (i = 0, len = newSelections.length; i < len; i++) {
            ns = newSelections[i];
            insert = lines.shift();
            oldLength = ns[1][1] - ns[1][0];
            this["do"].change(ns[0], this["do"].line(ns[0]).splice(ns[1][0], oldLength, insert));
            ldiff = insert.length - oldLength;
            ref1 = rangesAfterLineColInRanges(ns[0], ns[1][1], newSelections);
            for (j = 0, len1 = ref1.length; j < len1; j++) {
                os = ref1[j];
                os[1][0] += ldiff;
                os[1][1] += ldiff;
            }
            ns[1][1] += ldiff;
        }
        this["do"].select(newSelections);
        this["do"].setCursors(endPositionsFromRanges(newSelections));
        return this["do"].end();
    },
    pasteText: function(text) {
        var after, before, c, ci, cp, i, indt, insert, j, k, len, len1, li, line, lines, newCursors, ref1, ref2, ref3, removeLastLine;
        lines = text.split('\n');
        if (lines.length === this.numSelections()) {
            this.replaceSelectedText(lines);
            this.select([]);
            return;
        }
        if ((this.numLines() === 1 && this.text() === '' && lines.length > 1) || areSameRanges(this.rangesForAllLines(), this.selections())) {
            removeLastLine = true;
        }
        this.deleteSelection();
        this["do"].start();
        this.clampCursorOrFillVirtualSpaces();
        newCursors = this["do"].cursors();
        if (newCursors.length > 1 && lines.length === 1) {
            lines = (function() {
                var i, len, results;
                results = [];
                for (i = 0, len = newCursors.length; i < len; i++) {
                    c = newCursors[i];
                    results.push(lines[0]);
                }
                return results;
            })();
        }
        if (newCursors.length > 1 || (lines.length === 1)) {
            for (ci = i = ref1 = newCursors.length - 1; ref1 <= 0 ? i <= 0 : i >= 0; ci = ref1 <= 0 ? ++i : --i) {
                c = newCursors[ci];
                insert = lines[ci % lines.length];
                this["do"].change(c[1], this["do"].line(c[1]).splice(c[0], 0, insert));
                ref2 = positionsAfterLineColInPositions(c[1], c[0] - 1, newCursors);
                for (j = 0, len = ref2.length; j < len; j++) {
                    c = ref2[j];
                    cursorDelta(c, insert.length);
                }
            }
        } else {
            cp = newCursors[0];
            li = cp[1];
            newCursors = null;
            if (cp[0] > 0) {
                ref3 = this.splitStateLineAtPos(this["do"], cp), before = ref3[0], after = ref3[1];
                after = after.trimLeft();
                indt = _.padStart("", indentationInLine(this["do"].line(cp[1])));
                if (before.trim().length) {
                    this["do"].change(li, before);
                    li += 1;
                    if ((indt + after).trim().length) {
                        lines.push(indt + after);
                        newCursors = [[0, li + lines.length - 1]];
                    }
                }
            } else {
                if (this["do"].line(li).length === 0 && !removeLastLine) {
                    li += 1;
                }
            }
            for (k = 0, len1 = lines.length; k < len1; k++) {
                line = lines[k];
                this["do"].insert(li, line);
                li += 1;
            }
            if (empty(newCursors)) {
                newCursors = [[0, li]];
            }
        }
        if (removeLastLine) {
            this["do"]["delete"](this["do"].numLines() - 1);
        }
        this["do"].setCursors(newCursors);
        return this["do"].end();
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzdGUuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFPQSxJQUFBOztBQUFBLE1BQWUsT0FBQSxDQUFRLEtBQVIsQ0FBZixFQUFFLGlCQUFGLEVBQVM7O0FBRVQsUUFBQSxHQUFZLE9BQUEsQ0FBUSxVQUFSOztBQUNaLFNBQUEsR0FBWSxRQUFRLENBQUM7O0FBRXJCLE1BQU0sQ0FBQyxPQUFQLEdBRUk7SUFBQSxPQUFBLEVBRUk7UUFBQSxZQUFBLEVBQ0k7WUFBQSxNQUFBLEVBQVEsQ0FBQyxXQUFELEVBQWMsUUFBZCxFQUF3QixXQUF4QixFQUFxQyxRQUFyQyxFQUErQyxXQUEvQyxFQUE0RCxRQUE1RCxDQUFSO1NBREo7S0FGSjtJQUtBLFlBQUEsRUFBYyxTQUFDLEdBQUQsRUFBTSxJQUFOO0FBQ1YsZ0JBQU8sR0FBUDtBQUFBLGlCQUNTLEdBRFQ7dUJBQ2tCLElBQUMsQ0FBQSxHQUFELENBQUE7QUFEbEIsaUJBRVMsR0FGVDt1QkFFa0IsSUFBQyxDQUFBLElBQUQsQ0FBQTtBQUZsQixpQkFHUyxHQUhUO3VCQUdrQixJQUFDLENBQUEsS0FBRCxDQUFBO0FBSGxCO0lBRFUsQ0FMZDtJQVdBLEdBQUEsRUFBSyxTQUFBO1FBQ0QsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLEtBQUosQ0FBQTtRQUNBLElBQUMsQ0FBQSxJQUFELENBQUE7UUFDQSxJQUFDLENBQUEsNEJBQUQsQ0FBQTtlQUNBLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxHQUFKLENBQUE7SUFKQyxDQVhMO0lBaUJBLElBQUEsRUFBTSxTQUFBO21DQUFHLFNBQVMsQ0FBRSxTQUFYLENBQXFCLElBQUMsQ0FBQSwyQkFBRCxDQUFBLENBQXJCO0lBQUgsQ0FqQk47SUFtQkEsS0FBQSxFQUFPLFNBQUE7ZUFBRyxJQUFDLENBQUEsU0FBRCxxQkFBVyxTQUFTLENBQUUsUUFBWCxDQUFBLFVBQVg7SUFBSCxDQW5CUDtJQTJCQSxtQkFBQSxFQUFx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O2FBQUEsTUFBQTtnQkFhSSxJQUFHLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxJQUFKLENBQVMsRUFBVCxDQUFZLENBQUMsTUFBYixLQUF1QixDQUF2QixJQUE2QixDQUFJLGNBQXBDO29CQUNJLEVBQUEsSUFBTSxFQURWO2lCQWJKOztBQWdCQSxpQkFBQSx5Q0FBQTs7Z0JBQ0ksSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLE1BQUosQ0FBVyxFQUFYLEVBQWUsSUFBZjtnQkFDQSxFQUFBLElBQU07QUFGVjtZQUlBLElBQTBCLEtBQUEsQ0FBTSxVQUFOLENBQTFCO2dCQUFBLFVBQUEsR0FBYSxDQUFDLENBQUMsQ0FBRCxFQUFJLEVBQUosQ0FBRCxFQUFiO2FBbENKOztRQW9DQSxJQUFHLGNBQUg7WUFDSSxJQUFDLEVBQUEsRUFBQSxFQUFFLEVBQUMsTUFBRCxFQUFILENBQVcsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLFFBQUosQ0FBQSxDQUFBLEdBQWUsQ0FBMUIsRUFESjs7UUFHQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsVUFBSixDQUFlLFVBQWY7ZUFDQSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsR0FBSixDQUFBO0lBL0RPLENBcERYIiwic291cmNlc0NvbnRlbnQiOlsiXG4jIDAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwXG4jIDAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwXG4jIDAwMCAgICAgICAgMDAwICAgMDAwICAgICAgIDAwMCAgICAgMDAwICAgICAwMDBcbiMgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMDAwMDAwXG5cbnsgZW1wdHksIF8gfSA9IHJlcXVpcmUgJ2t4aydcblxuZWxlY3Ryb24gID0gcmVxdWlyZSAnZWxlY3Ryb24nXG5jbGlwYm9hcmQgPSBlbGVjdHJvbi5jbGlwYm9hcmRcblxubW9kdWxlLmV4cG9ydHMgPVxuXG4gICAgYWN0aW9uczpcblxuICAgICAgICBjdXRDb3B5UGFzdGU6XG4gICAgICAgICAgICBjb21ib3M6IFsnY29tbWFuZCt4JywgJ2N0cmwreCcsICdjb21tYW5kK2MnLCAnY3RybCtjJywgJ2NvbW1hbmQrdicsICdjdHJsK3YnXVxuXG4gICAgY3V0Q29weVBhc3RlOiAoa2V5LCBpbmZvKSAtPlxuICAgICAgICBzd2l0Y2gga2V5XG4gICAgICAgICAgICB3aGVuICd4JyB0aGVuIEBjdXQoKVxuICAgICAgICAgICAgd2hlbiAnYycgdGhlbiBAY29weSgpXG4gICAgICAgICAgICB3aGVuICd2JyB0aGVuIEBwYXN0ZSgpXG5cbiAgICBjdXQ6IC0+XG4gICAgICAgIEBkby5zdGFydCgpXG4gICAgICAgIEBjb3B5KClcbiAgICAgICAgQGRlbGV0ZVNlbGVjdGlvbk9yQ3Vyc29yTGluZXMoKVxuICAgICAgICBAZG8uZW5kKClcblxuICAgIGNvcHk6IC0+IGNsaXBib2FyZD8ud3JpdGVUZXh0IEB0ZXh0T2ZTZWxlY3Rpb25Gb3JDbGlwYm9hcmQoKVxuXG4gICAgcGFzdGU6IC0+IEBwYXN0ZVRleHQgY2xpcGJvYXJkPy5yZWFkVGV4dCgpXG5cbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMCAgICAgIDAwMDAwMDAwMCAgMDAwICAgICAgIDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAgICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwXG5cbiAgICByZXBsYWNlU2VsZWN0ZWRUZXh0OiAobGluZXMpIC0+XG5cbiAgICAgICAgQGRvLnN0YXJ0KClcbiAgICAgICAgbmV3U2VsZWN0aW9ucyA9IEBkby5zZWxlY3Rpb25zKClcblxuICAgICAgICBmb3IgbnMgaW4gbmV3U2VsZWN0aW9uc1xuICAgICAgICAgICAgaW5zZXJ0ID0gbGluZXMuc2hpZnQoKVxuICAgICAgICAgICAgb2xkTGVuZ3RoID0gbnNbMV1bMV0tbnNbMV1bMF1cbiAgICAgICAgICAgIEBkby5jaGFuZ2UgbnNbMF0sIEBkby5saW5lKG5zWzBdKS5zcGxpY2UgbnNbMV1bMF0sIG9sZExlbmd0aCwgaW5zZXJ0XG4gICAgICAgICAgICBsZGlmZiA9IGluc2VydC5sZW5ndGggLSBvbGRMZW5ndGhcbiAgICAgICAgICAgIGZvciBvcyBpbiByYW5nZXNBZnRlckxpbmVDb2xJblJhbmdlcyBuc1swXSwgbnNbMV1bMV0sIG5ld1NlbGVjdGlvbnNcbiAgICAgICAgICAgICAgICBvc1sxXVswXSArPSBsZGlmZlxuICAgICAgICAgICAgICAgIG9zWzFdWzFdICs9IGxkaWZmXG4gICAgICAgICAgICBuc1sxXVsxXSArPSBsZGlmZlxuXG4gICAgICAgIEBkby5zZWxlY3QgbmV3U2VsZWN0aW9uc1xuICAgICAgICBAZG8uc2V0Q3Vyc29ycyBlbmRQb3NpdGlvbnNGcm9tUmFuZ2VzIG5ld1NlbGVjdGlvbnNcbiAgICAgICAgQGRvLmVuZCgpXG5cbiAgICAjIDAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAgMDAwICAgMDAwICAgICAgIDAwMCAgICAgMDAwICAgICAwMDBcbiAgICAjIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwMFxuXG4gICAgcGFzdGVUZXh0OiAodGV4dCkgLT5cblxuICAgICAgICBsaW5lcyA9IHRleHQuc3BsaXQgJ1xcbidcblxuICAgICAgICBpZiBsaW5lcy5sZW5ndGggPT0gQG51bVNlbGVjdGlvbnMoKVxuICAgICAgICAgICAgQHJlcGxhY2VTZWxlY3RlZFRleHQgbGluZXNcbiAgICAgICAgICAgIEBzZWxlY3QgW11cbiAgICAgICAgICAgIHJldHVyblxuXG4gICAgICAgIGlmIChAbnVtTGluZXMoKSA9PSAxIGFuZCBAdGV4dCgpID09ICcnIGFuZCBsaW5lcy5sZW5ndGggPiAxKSBvciBhcmVTYW1lUmFuZ2VzIEByYW5nZXNGb3JBbGxMaW5lcygpLCBAc2VsZWN0aW9ucygpXG4gICAgICAgICAgICByZW1vdmVMYXN0TGluZSA9IHRydWUgIyBwcmV2ZW50cyB0cmFpbGluZyBlbXB0eSBsaW5lXG5cbiAgICAgICAgQGRlbGV0ZVNlbGVjdGlvbigpXG5cbiAgICAgICAgQGRvLnN0YXJ0KClcbiAgICAgICAgQGNsYW1wQ3Vyc29yT3JGaWxsVmlydHVhbFNwYWNlcygpXG5cbiAgICAgICAgbmV3Q3Vyc29ycyA9IEBkby5jdXJzb3JzKClcblxuICAgICAgICBpZiBuZXdDdXJzb3JzLmxlbmd0aCA+IDEgYW5kIGxpbmVzLmxlbmd0aCA9PSAxXG4gICAgICAgICAgICAjIHJlcGxpY2F0ZSBzaW5nbGUgbGluZXMgZm9yIGluc2VydGlvbiBhdCBtdWx0aXBsZSBjdXJzb3JzXG4gICAgICAgICAgICBsaW5lcyA9IChsaW5lc1swXSBmb3IgYyBpbiBuZXdDdXJzb3JzKVxuXG4gICAgICAgIGlmIG5ld0N1cnNvcnMubGVuZ3RoID4gMSBvciAobGluZXMubGVuZ3RoID09IDEpXG4gICAgICAgICAgICAjIGluc2VydCBpbnRvIG11bHRpcGxlIGN1cnNvcnNcbiAgICAgICAgICAgIGZvciBjaSBpbiBbbmV3Q3Vyc29ycy5sZW5ndGgtMS4uMF1cbiAgICAgICAgICAgICAgICBjID0gbmV3Q3Vyc29yc1tjaV1cbiAgICAgICAgICAgICAgICBpbnNlcnQgPSBsaW5lc1tjaSAlIGxpbmVzLmxlbmd0aF1cbiAgICAgICAgICAgICAgICBAZG8uY2hhbmdlIGNbMV0sIEBkby5saW5lKGNbMV0pLnNwbGljZSBjWzBdLCAwLCBpbnNlcnRcbiAgICAgICAgICAgICAgICBmb3IgYyBpbiBwb3NpdGlvbnNBZnRlckxpbmVDb2xJblBvc2l0aW9ucyBjWzFdLCBjWzBdLTEsIG5ld0N1cnNvcnNcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yRGVsdGEgYywgaW5zZXJ0Lmxlbmd0aCAjIG1vdmUgY3Vyc29ycyBhZnRlciBpbnNlcnRpb25cblxuICAgICAgICBlbHNlICMgaW5zZXJ0IG5ldyBsaW5lKHMpIGF0IHNpbmdsZSBjdXJzb3JcbiAgICAgICAgICAgIGNwID0gbmV3Q3Vyc29yc1swXVxuICAgICAgICAgICAgbGkgPSBjcFsxXVxuICAgICAgICAgICAgbmV3Q3Vyc29ycyA9IG51bGxcblxuICAgICAgICAgICAgaWYgY3BbMF0gPiAwXG5cbiAgICAgICAgICAgICAgICBbYmVmb3JlLCBhZnRlcl0gPSBAc3BsaXRTdGF0ZUxpbmVBdFBvcyBAZG8sIGNwXG4gICAgICAgICAgICAgICAgYWZ0ZXIgPSBhZnRlci50cmltTGVmdCgpXG5cbiAgICAgICAgICAgICAgICBpbmR0ICAgPSBfLnBhZFN0YXJ0IFwiXCIsIGluZGVudGF0aW9uSW5MaW5lIEBkby5saW5lIGNwWzFdXG4gICAgICAgICAgICAgICAgaWYgYmVmb3JlLnRyaW0oKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgQGRvLmNoYW5nZSBsaSwgYmVmb3JlXG4gICAgICAgICAgICAgICAgICAgIGxpICs9IDFcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZHQgKyBhZnRlcikudHJpbSgpLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZXMucHVzaCBpbmR0ICsgYWZ0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0N1cnNvcnMgPSBbWzAsbGkrbGluZXMubGVuZ3RoLTFdXVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGlmIEBkby5saW5lKGxpKS5sZW5ndGggPT0gMCBhbmQgbm90IHJlbW92ZUxhc3RMaW5lXG4gICAgICAgICAgICAgICAgICAgIGxpICs9IDEgIyBpbnNlcnQgYWZ0ZXIgZW1wdHkgbGluZVxuXG4gICAgICAgICAgICBmb3IgbGluZSBpbiBsaW5lc1xuICAgICAgICAgICAgICAgIEBkby5pbnNlcnQgbGksIGxpbmVcbiAgICAgICAgICAgICAgICBsaSArPSAxXG5cbiAgICAgICAgICAgIG5ld0N1cnNvcnMgPSBbWzAsIGxpXV0gaWYgZW1wdHkgbmV3Q3Vyc29yc1xuXG4gICAgICAgIGlmIHJlbW92ZUxhc3RMaW5lXG4gICAgICAgICAgICBAZG8uZGVsZXRlIEBkby5udW1MaW5lcygpLTFcblxuICAgICAgICBAZG8uc2V0Q3Vyc29ycyBuZXdDdXJzb3JzXG4gICAgICAgIEBkby5lbmQoKVxuIl19
//# sourceURL=../../../coffee/editor/actions/paste.coffee