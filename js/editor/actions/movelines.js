// koffee 1.4.0
var _;

_ = require('kxk')._;

module.exports = {
    actions: {
        menu: 'Line',
        moveLinesUp: {
            separator: true,
            name: 'Move Lines Up',
            combo: 'alt+up'
        },
        moveLinesDown: {
            name: 'Move Lines Down',
            combo: 'alt+down'
        }
    },
    moveLinesUp: function() {
        return this.moveLines('up');
    },
    moveLinesDown: function() {
        return this.moveLines('down');
    },
    moveLines: function(dir) {
        var csr, d, i, j, k, l, len, len1, len2, li, ls, m, n, nc, newCursors, newSelections, ns, r, ref, ref1, ref2, ref3, si;
        csr = this.continuousCursorAndSelectedLineIndexRanges();
        if (!csr.length) {
            return;
        }
        if (dir === 'up' && _.first(csr)[0] === 0) {
            return;
        }
        if (dir === 'down' && _.last(csr)[1] === this.numLines() - 1) {
            return;
        }
        d = dir === 'up' && -1 || 1;
        this["do"].start();
        newCursors = this["do"].cursors();
        newSelections = this["do"].selections();
        ref = csr.reverse();
        for (j = 0, len = ref.length; j < len; j++) {
            r = ref[j];
            ls = [];
            for (li = k = ref1 = r[0], ref2 = r[1]; ref1 <= ref2 ? k <= ref2 : k >= ref2; li = ref1 <= ref2 ? ++k : --k) {
                ls.push(this["do"].line(li));
            }
            switch (dir) {
                case 'up':
                    si = r[0] - 1;
                    ls.push(this["do"].line(si));
                    break;
                case 'down':
                    si = r[0];
                    ls.unshift(this["do"].line(r[1] + 1));
            }
            for (i = l = 0, ref3 = ls.length; 0 <= ref3 ? l < ref3 : l > ref3; i = 0 <= ref3 ? ++l : --l) {
                this["do"].change(si + i, ls[i]);
            }
        }
        for (m = 0, len1 = newSelections.length; m < len1; m++) {
            ns = newSelections[m];
            ns[0] += d;
        }
        for (n = 0, len2 = newCursors.length; n < len2; n++) {
            nc = newCursors[n];
            cursorDelta(nc, 0, d);
        }
        this["do"].select(newSelections);
        this["do"].setCursors(newCursors);
        return this["do"].end();
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92ZWxpbmVzLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBT0EsSUFBQTs7QUFBRSxJQUFNLE9BQUEsQ0FBUSxLQUFSOztBQUVSLE1BQU0sQ0FBQyxPQUFQLEdBRUk7SUFBQSxPQUFBLEVBQ0k7UUFBQSxJQUFBLEVBQU0sTUFBTjtRQUVBLFdBQUEsRUFDSTtZQUFBLFNBQUEsRUFBVyxJQUFYO1lBQ0EsSUFBQSxFQUFNLGVBRE47WUFFQSxLQUFBLEVBQU8sUUFGUDtTQUhKO1FBT0EsYUFBQSxFQUNJO1lBQUEsSUFBQSxFQUFNLGlCQUFOO1lBQ0EsS0FBQSxFQUFPLFVBRFA7U0FSSjtLQURKO0lBWUEsV0FBQSxFQUFlLFNBQUE7ZUFBRyxJQUFDLENBQUEsU0FBRCxDQUFXLElBQVg7SUFBSCxDQVpmO0lBYUEsYUFBQSxFQUFlLFNBQUE7ZUFBRyxJQUFDLENBQUEsU0FBRCxDQUFXLE1BQVg7SUFBSCxDQWJmO0lBZUEsU0FBQSxFQUFXLFNBQUMsR0FBRDtBQUVQLFlBQUE7UUFBQSxHQUFBLEdBQU0sSUFBQyxDQUFBLDBDQUFELENBQUE7UUFFTixJQUFVLENBQUksR0FBRyxDQUFDLE1BQWxCO0FBQUEsbUJBQUE7O1FBQ0EsSUFBVSxHQUFBLEtBQU8sSUFBUCxJQUFnQixDQUFDLENBQUMsS0FBRixDQUFRLEdBQVIsQ0FBYSxDQUFBLENBQUEsQ0FBYixLQUFtQixDQUE3QztBQUFBLG1CQUFBOztRQUNBLElBQVUsR0FBQSxLQUFPLE1BQVAsSUFBa0IsQ0FBQyxDQUFDLElBQUYsQ0FBTyxHQUFQLENBQVksQ0FBQSxDQUFBLENBQVosS0FBa0IsSUFBQyxDQUFBLFFBQUQsQ0FBQSxDQUFBLEdBQVksQ0FBMUQ7QUFBQSxtQkFBQTs7UUFFQSxDQUFBLEdBQUksR0FBQSxLQUFPLElBQVAsSUFBZ0IsQ0FBQyxDQUFqQixJQUFzQjtRQUUxQixJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsS0FBSixDQUFBO1FBQ0EsVUFBQSxHQUFnQixJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsT0FBSixDQUFBO1FBQ2hCLGFBQUEsR0FBZ0IsSUFBQyxFQUFBLEVBQUEsRUFBRSxDQUFDLFVBQUosQ0FBQTtBQUVoQjtBQUFBLGFBQUEscUNBQUE7O1lBQ0ksRUFBQSxHQUFLO0FBQ0wsaUJBQVUsc0dBQVY7Z0JBQ0ksRUFBRSxDQUFDLElBQUgsQ0FBUSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsSUFBSixDQUFTLEVBQVQsQ0FBUjtBQURKO0FBR0Esb0JBQU8sR0FBUDtBQUFBLHFCQUNTLElBRFQ7b0JBQ3NCLEVBQUEsR0FBSyxDQUFFLENBQUEsQ0FBQSxDQUFGLEdBQUs7b0JBQUssRUFBRSxDQUFDLElBQUgsQ0FBUSxJQUFDLEVBQUEsRUFBQSxFQUFFLENBQUMsSUFBSixDQUFTLEVBQVQsQ0FBUjtBQUE1QjtBQURULHFCQUVTLE1BRlQ7b0JBRXNCLEVBQUEsR0FBSyxDQUFFLENBQUEsQ0FBQTtvQkFBUSxFQUFFLENBQUMsT0FBSCxDQUFXLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxJQUFKLENBQVMsQ0FBRSxDQUFBLENBQUEsQ0FBRixHQUFLLENBQWQsQ0FBWDtBQUZyQztBQUlBLGlCQUFTLHVGQUFUO2dCQUNJLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxNQUFKLENBQVcsRUFBQSxHQUFHLENBQWQsRUFBaUIsRUFBRyxDQUFBLENBQUEsQ0FBcEI7QUFESjtBQVRKO0FBWUEsYUFBQSxpREFBQTs7WUFDSSxFQUFHLENBQUEsQ0FBQSxDQUFILElBQVM7QUFEYjtBQUdBLGFBQUEsOENBQUE7O1lBQ0ksV0FBQSxDQUFZLEVBQVosRUFBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkI7QUFESjtRQUdBLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxNQUFKLENBQVcsYUFBWDtRQUNBLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxVQUFKLENBQWUsVUFBZjtlQUNBLElBQUMsRUFBQSxFQUFBLEVBQUUsQ0FBQyxHQUFKLENBQUE7SUFsQ08sQ0FmWCIsInNvdXJjZXNDb250ZW50IjpbIlxuIyAwMCAgICAgMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAgMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgIDAwMCAgMDAwIDAgMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgICAgICAgICAgIDAwMCAgXG4jIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgICAgMCAgICAgIDAwMDAwMDAwICAwMDAwMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICBcblxueyBfIH0gPSByZXF1aXJlICdreGsnXG5cbm1vZHVsZS5leHBvcnRzID1cbiAgICBcbiAgICBhY3Rpb25zOlxuICAgICAgICBtZW51OiAnTGluZSdcbiAgICAgICAgXG4gICAgICAgIG1vdmVMaW5lc1VwOlxuICAgICAgICAgICAgc2VwYXJhdG9yOiB0cnVlXG4gICAgICAgICAgICBuYW1lOiAnTW92ZSBMaW5lcyBVcCdcbiAgICAgICAgICAgIGNvbWJvOiAnYWx0K3VwJ1xuICAgICAgICAgICAgXG4gICAgICAgIG1vdmVMaW5lc0Rvd246XG4gICAgICAgICAgICBuYW1lOiAnTW92ZSBMaW5lcyBEb3duJ1xuICAgICAgICAgICAgY29tYm86ICdhbHQrZG93bidcbiAgICBcbiAgICBtb3ZlTGluZXNVcDogICAtPiBAbW92ZUxpbmVzICd1cCdcbiAgICBtb3ZlTGluZXNEb3duOiAtPiBAbW92ZUxpbmVzICdkb3duJ1xuICAgICAgICAgICAgXG4gICAgbW92ZUxpbmVzOiAoZGlyKSAtPlxuXG4gICAgICAgIGNzciA9IEBjb250aW51b3VzQ3Vyc29yQW5kU2VsZWN0ZWRMaW5lSW5kZXhSYW5nZXMoKVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlmIG5vdCBjc3IubGVuZ3RoXG4gICAgICAgIHJldHVybiBpZiBkaXIgPT0gJ3VwJyBhbmQgXy5maXJzdChjc3IpWzBdID09IDBcbiAgICAgICAgcmV0dXJuIGlmIGRpciA9PSAnZG93bicgYW5kIF8ubGFzdChjc3IpWzFdID09IEBudW1MaW5lcygpLTFcbiAgICAgICAgXG4gICAgICAgIGQgPSBkaXIgPT0gJ3VwJyBhbmQgLTEgb3IgMVxuICAgICAgICBcbiAgICAgICAgQGRvLnN0YXJ0KClcbiAgICAgICAgbmV3Q3Vyc29ycyAgICA9IEBkby5jdXJzb3JzKClcbiAgICAgICAgbmV3U2VsZWN0aW9ucyA9IEBkby5zZWxlY3Rpb25zKClcblxuICAgICAgICBmb3IgciBpbiBjc3IucmV2ZXJzZSgpXG4gICAgICAgICAgICBscyA9IFtdXG4gICAgICAgICAgICBmb3IgbGkgaW4gW3JbMF0uLnJbMV1dXG4gICAgICAgICAgICAgICAgbHMucHVzaCBAZG8ubGluZShsaSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc3dpdGNoIGRpciBcbiAgICAgICAgICAgICAgICB3aGVuICd1cCcgICB0aGVuIChzaSA9IHJbMF0tMSkgOyBscy5wdXNoIEBkby5saW5lKHNpKVxuICAgICAgICAgICAgICAgIHdoZW4gJ2Rvd24nIHRoZW4gKHNpID0gclswXSkgICA7IGxzLnVuc2hpZnQgQGRvLmxpbmUoclsxXSsxKVxuXG4gICAgICAgICAgICBmb3IgaSBpbiBbMC4uLmxzLmxlbmd0aF1cbiAgICAgICAgICAgICAgICBAZG8uY2hhbmdlIHNpK2ksIGxzW2ldXG5cbiAgICAgICAgZm9yIG5zIGluIG5ld1NlbGVjdGlvbnNcbiAgICAgICAgICAgIG5zWzBdICs9IGRcbiAgICAgICAgICAgIFxuICAgICAgICBmb3IgbmMgaW4gbmV3Q3Vyc29yc1xuICAgICAgICAgICAgY3Vyc29yRGVsdGEgbmMsIDAsIGRcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQGRvLnNlbGVjdCBuZXdTZWxlY3Rpb25zXG4gICAgICAgIEBkby5zZXRDdXJzb3JzIG5ld0N1cnNvcnNcbiAgICAgICAgQGRvLmVuZCgpICAgICAgIFxuIl19
//# sourceURL=../../../coffee/editor/actions/movelines.coffee