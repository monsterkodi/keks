// koffee 1.4.0
var _, ref, reversed;

ref = require('kxk'), reversed = ref.reversed, _ = ref._;

module.exports = {
    actions: {
        menu: 'Delete',
        deleteBackward: {
            name: 'Delete Backward',
            text: 'delete character to the left',
            combo: 'backspace'
        },
        deleteBackwardIgnoreLineBoundary: {
            name: 'Delete Backward Over Line Boundaries',
            combo: 'command+backspace',
            accel: 'ctrl+backspace'
        },
        deleteBackwardSwallowWhitespace: {
            name: 'Delete Backward Over Whitespace',
            combo: 'alt+backspace'
        }
    },
    deleteBackwardIgnoreLineBoundary: function() {
        return this.deleteBackward({
            ignoreLineBoundary: true
        });
    },
    deleteBackwardSwallowWhitespace: function() {
        return this.deleteBackward({
            ignoreTabBoundary: true
        });
    },
    deleteBackward: function(opt) {
        this["do"].start();
        if (this["do"].numSelections()) {
            this.deleteSelection();
        } else if (this.salterMode) {
            this.deleteSalterCharacter();
        } else if (!this.deleteEmptySurrounds()) {
            this.deleteCharacterBackward(opt);
        }
        return this["do"].end();
    },
    deleteCharacterBackward: function(opt) {
        var c, i, j, k, l, len, len1, len2, len3, ll, n, nc, newCursors, ref1, ref2, ref3, ref4, removeNum, t;
        newCursors = this["do"].cursors();
        removeNum = (function() {
            switch (false) {
                case !(opt != null ? opt.singleCharacter : void 0):
                    return 1;
                case !(opt != null ? opt.ignoreLineBoundary : void 0):
                    return -1;
                case !(opt != null ? opt.ignoreTabBoundary : void 0):
                    return Math.max(1, _.min(newCursors.map((function(_this) {
                        return function(c) {
                            var n, t;
                            t = _this["do"].textInRange([c[1], [0, c[0]]]);
                            n = t.length - t.trimRight().length;
                            if (_this.isCursorVirtual(c)) {
                                n += c[0] - _this["do"].line(c[1]).length;
                            }
                            return Math.max(1, n);
                        };
                    })(this))));
                default:
                    return Math.max(1, _.min(newCursors.map((function(_this) {
                        return function(c) {
                            var n, t;
                            n = (c[0] % _this.indentString.length) || _this.indentString.length;
                            t = _this["do"].textInRange([c[1], [Math.max(0, c[0] - n), c[0]]]);
                            n -= t.trimRight().length;
                            return Math.max(1, n);
                        };
                    })(this))));
            }
        }).call(this);
        ref1 = reversed(newCursors);
        for (i = 0, len = ref1.length; i < len; i++) {
            c = ref1[i];
            if (c[0] === 0) {
                if ((opt != null ? opt.ignoreLineBoundary : void 0) || this["do"].numCursors() === 1) {
                    if (c[1] > 0) {
                        ll = this["do"].line(c[1] - 1).length;
                        this["do"].change(c[1] - 1, this["do"].line(c[1] - 1) + this["do"].line(c[1]));
                        this["do"]["delete"](c[1]);
                        ref2 = positionsAtLineIndexInPositions(c[1], newCursors);
                        for (j = 0, len1 = ref2.length; j < len1; j++) {
                            nc = ref2[j];
                            cursorDelta(nc, ll, -1);
                        }
                        ref3 = positionsBelowLineIndexInPositions(c[1], newCursors);
                        for (k = 0, len2 = ref3.length; k < len2; k++) {
                            nc = ref3[k];
                            cursorDelta(nc, 0, -1);
                        }
                    }
                }
            } else {
                if (removeNum < 1) {
                    t = this["do"].textInRange([c[1], [0, c[0]]]);
                    n = t.length - t.trimRight().length;
                    if (this.isCursorVirtual(c)) {
                        n += c[0] - this["do"].line(c[1]).length;
                    }
                    n = Math.max(1, n);
                } else {
                    n = removeNum;
                }
                this["do"].change(c[1], this["do"].line(c[1]).splice(c[0] - n, n));
                ref4 = positionsAtLineIndexInPositions(c[1], newCursors);
                for (l = 0, len3 = ref4.length; l < len3; l++) {
                    nc = ref4[l];
                    if (nc[0] >= c[0]) {
                        cursorDelta(nc, -n);
                    }
                }
            }
        }
        return this["do"].setCursors(newCursors);
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/deletebackward.coffee