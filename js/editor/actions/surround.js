// koffee 1.4.0
var _, ref, reversed;

ref = require('kxk'), reversed = ref.reversed, _ = ref._;

module.exports = {
    initSurround: function() {
        this.surroundStack = [];
        this.surroundPairs = {
            '#': ['#{', '}'],
            '{': ['{', '}'],
            '}': ['{', '}'],
            '[': ['[', ']'],
            ']': ['[', ']'],
            '(': ['(', ')'],
            ')': ['(', ')'],
            '<': ['<', '>'],
            '>': ['<', '>'],
            "'": ["'", "'"],
            '"': ['"', '"'],
            '*': ['*', '*']
        };
        this.surroundCharacters = "{}[]()\"'".split('');
        switch (this.fileType) {
            case 'html':
                return this.surroundCharacters = this.surroundCharacters.concat(['<', '>']);
            case 'coffee':
            case 'koffee':
                return this.surroundCharacters.push('#');
            case 'md':
                this.surroundCharacters = this.surroundCharacters.concat(['*', '<', '`']);
                this.surroundPairs['<'] = ['<!--', '-->'];
                return this.surroundPairs['`'] = ['`', '`'];
        }
    },
    isUnbalancedSurroundCharacter: function(ch) {
        var c, cl, count, cr, cursor, i, j, len, len1, ref1, ref2, ref3;
        if (ch === "#") {
            return false;
        }
        ref1 = this.surroundPairs[ch], cl = ref1[0], cr = ref1[1];
        if (cl.length > 1) {
            return false;
        }
        ref2 = this.cursors();
        for (i = 0, len = ref2.length; i < len; i++) {
            cursor = ref2[i];
            count = 0;
            ref3 = this.line(cursor[1]);
            for (j = 0, len1 = ref3.length; j < len1; j++) {
                c = ref3[j];
                if (c === cl) {
                    count += 1;
                } else if (c === cr) {
                    count -= 1;
                }
            }
            if (((cl === cr) && (count % 2)) || ((cl !== cr) && count)) {
                return true;
            }
        }
        return false;
    },
    selectionContainsOnlyQuotes: function() {
        var c, i, len, ref1;
        ref1 = this.textOfSelection();
        for (i = 0, len = ref1.length; i < len; i++) {
            c = ref1[i];
            if (c === '\n') {
                continue;
            }
            if (c !== '"' && c !== "'") {
                return false;
            }
        }
        return true;
    },
    insertTripleQuotes: function() {
        var after, before, p, ref1;
        if (this.numCursors() > 1) {
            return false;
        }
        if (this.numSelections()) {
            return false;
        }
        p = this.cursorPos();
        ref1 = this.splitStateLineAtPos(this.state, p), before = ref1[0], after = ref1[1];
        if (!before.endsWith('""')) {
            return false;
        }
        if (before.length > 2 && before[before.length - 3] === '"') {
            return false;
        }
        if (after.startsWith('"')) {
            return false;
        }
        this["do"].start();
        this["do"].change(p[1], before + '""""' + after);
        this["do"].setCursors([[p[0] + 1, p[1]]]);
        this["do"].end();
        return true;
    },
    insertSurroundCharacter: function(ch) {
        var after, afterGood, before, beforeGood, c, cl, cr, found, i, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, len8, len9, m, n, newCursors, newSelections, ns, o, os, q, r, ref1, ref10, ref11, ref12, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, spaces, sr, t, trimmed;
        if (ch === '"' && ((ref1 = this.fileType) === 'coffee' || ref1 === 'koffee') && this.insertTripleQuotes()) {
            return true;
        }
        if (this.isUnbalancedSurroundCharacter(ch)) {
            return false;
        }
        if (this.numSelections() && (ch === '"' || ch === "'") && this.selectionContainsOnlyQuotes()) {
            return false;
        }
        newCursors = this["do"].cursors();
        if (this.surroundStack.length) {
            if (_.last(this.surroundStack)[1] === ch) {
                for (i = 0, len = newCursors.length; i < len; i++) {
                    c = newCursors[i];
                    if (this["do"].line(c[1])[c[0]] !== ch) {
                        this.surroundStack = [];
                        break;
                    }
                }
                if (this.surroundStack.length && _.last(this.surroundStack)[1] === ch) {
                    this["do"].start();
                    this.selectNone();
                    this.deleteForward();
                    this["do"].end();
                    this.surroundStack.pop();
                    return false;
                }
            }
        }
        if (ch === '#' && ((ref2 = this.fileType) === 'coffee' || ref2 === 'koffee')) {
            found = false;
            ref3 = this["do"].selections();
            for (j = 0, len1 = ref3.length; j < len1; j++) {
                s = ref3[j];
                if (this.isRangeInString(s)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                for (k = 0, len2 = newCursors.length; k < len2; k++) {
                    c = newCursors[k];
                    if (this.isRangeInString(rangeForPos(c))) {
                        found = true;
                        break;
                    }
                }
            }
            if (!found) {
                return false;
            }
        }
        if (ch === "'" && !this.numSelections()) {
            for (l = 0, len3 = newCursors.length; l < len3; l++) {
                c = newCursors[l];
                if (c[0] > 0 && /[A-Za-z]/.test(this["do"].line(c[1])[c[0] - 1])) {
                    return false;
                }
            }
        }
        this["do"].start();
        if (this["do"].numSelections() === 0) {
            newSelections = rangesFromPositions(newCursors);
        } else {
            newSelections = this["do"].selections();
        }
        ref4 = this.surroundPairs[ch], cl = ref4[0], cr = ref4[1];
        this.surroundStack.push([cl, cr]);
        ref5 = reversed(newSelections);
        for (m = 0, len4 = ref5.length; m < len4; m++) {
            ns = ref5[m];
            if (cl === '#{') {
                if (sr = this.rangeOfStringSurroundingRange(ns)) {
                    if (this["do"].line(sr[0])[sr[1][0]] === "'") {
                        this["do"].change(ns[0], this["do"].line(ns[0]).splice(sr[1][0], 1, '"'));
                    }
                    if (this["do"].line(sr[0])[sr[1][1] - 1] === "'") {
                        this["do"].change(ns[0], this["do"].line(ns[0]).splice(sr[1][1] - 1, 1, '"'));
                    }
                }
            } else if (((ref6 = this.fileType) === 'coffee' || ref6 === 'koffee') && cl === '(' && lengthOfRange(ns) > 0) {
                ref7 = this.splitStateLineAtPos(this["do"], rangeStartPos(ns)), before = ref7[0], after = ref7[1];
                trimmed = before.trimRight();
                beforeGood = /\w$/.test(trimmed) && !/(if|when|in|and|or|is|not|else|return)$/.test(trimmed);
                afterGood = after.trim().length && !after.startsWith(' ');
                if (beforeGood && afterGood) {
                    spaces = before.length - trimmed.length;
                    this["do"].change(ns[0], this["do"].line(ns[0]).splice(trimmed.length, spaces));
                    ref8 = positionsAfterLineColInPositions(ns[0], ns[1][0] - 1, newCursors);
                    for (n = 0, len5 = ref8.length; n < len5; n++) {
                        c = ref8[n];
                        c[0] -= spaces;
                    }
                    ns[1][0] -= spaces;
                    ns[1][1] -= spaces;
                }
            }
            this["do"].change(ns[0], this["do"].line(ns[0]).splice(ns[1][1], 0, cr));
            this["do"].change(ns[0], this["do"].line(ns[0]).splice(ns[1][0], 0, cl));
            ref9 = positionsAfterLineColInPositions(ns[0], ns[1][0] - 1, newCursors);
            for (o = 0, len6 = ref9.length; o < len6; o++) {
                c = ref9[o];
                c[0] += cl.length;
            }
            ref10 = rangesAfterLineColInRanges(ns[0], ns[1][1] - 1, newSelections);
            for (q = 0, len7 = ref10.length; q < len7; q++) {
                os = ref10[q];
                os[1][0] += cr.length;
                os[1][1] += cr.length;
            }
            ref11 = rangesAfterLineColInRanges(ns[0], ns[1][0] - 1, newSelections);
            for (r = 0, len8 = ref11.length; r < len8; r++) {
                os = ref11[r];
                os[1][0] += cl.length;
                os[1][1] += cl.length;
            }
            ref12 = positionsAfterLineColInPositions(ns[0], ns[1][1], newCursors);
            for (t = 0, len9 = ref12.length; t < len9; t++) {
                c = ref12[t];
                c[0] += cr.length;
            }
        }
        this["do"].select(rangesNotEmptyInRanges(newSelections));
        this["do"].setCursors(newCursors);
        this["do"].end();
        return true;
    },
    deleteEmptySurrounds: function() {
        var after, before, c, cs, i, j, k, l, len, len1, len2, len3, nc, numPairs, openClosePairs, pairs, ref1, ref2, ref3, sc, so, uniquePairs;
        cs = this["do"].cursors();
        pairs = _.uniqWith(_.values(this.surroundPairs), _.isEqual);
        openClosePairs = [];
        for (i = 0, len = cs.length; i < len; i++) {
            c = cs[i];
            numPairs = openClosePairs.length;
            for (j = 0, len1 = pairs.length; j < len1; j++) {
                ref1 = pairs[j], so = ref1[0], sc = ref1[1];
                before = this["do"].line(c[1]).slice(c[0] - so.length, c[0]);
                after = this["do"].line(c[1]).slice(c[0], c[0] + sc.length);
                if (so === before && sc === after) {
                    openClosePairs.push([so, sc]);
                    break;
                }
            }
            if (numPairs === openClosePairs.length) {
                return false;
            }
        }
        if (cs.length !== openClosePairs.length) {
            return false;
        }
        uniquePairs = _.uniqWith(openClosePairs, _.isEqual);
        for (k = 0, len2 = cs.length; k < len2; k++) {
            c = cs[k];
            ref2 = openClosePairs.shift(), so = ref2[0], sc = ref2[1];
            this["do"].change(c[1], this["do"].line(c[1]).splice(c[0] - so.length, so.length + sc.length));
            ref3 = positionsAfterLineColInPositions(c[1], c[0], cs);
            for (l = 0, len3 = ref3.length; l < len3; l++) {
                nc = ref3[l];
                nc[0] -= sc.length + so.length;
            }
            c[0] -= so.length;
        }
        if (this.surroundStack.length) {
            if (uniquePairs.length === 1 && _.isEqual(uniquePairs[0], _.last(this.surroundStack))) {
                this.surroundStack.pop();
            } else {
                this.surroundStack = [];
            }
        }
        this["do"].setCursors(cs);
        return true;
    },
    highlightsSurroundingCursor: function() {
        var hs;
        if (this.numHighlights() % 2 === 0) {
            hs = this.highlights();
            sortRanges(hs);
            if (this.numHighlights() === 2) {
                return hs;
            } else if (this.numHighlights() === 4) {
                if (areSameRanges([hs[1], hs[2]], this.selections())) {
                    return [hs[0], hs[3]];
                } else {
                    return [hs[1], hs[2]];
                }
            }
        }
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/surround.coffee