// koffee 1.4.0

/*
 0000000  000   000  000   000  000000000   0000000   000   000
000        000 000   0000  000     000     000   000   000 000
0000000     00000    000 0 000     000     000000000    00000
     000     000     000  0000     000     000   000   000 000
0000000      000     000   000     000     000   000  000   000
 */
var Balancer, Syntax, _, elem, empty, fs, kerror, klog, klor, kstr, matchr, noon, ref, slash, valid,
    indexOf = [].indexOf;

ref = require('kxk'), kerror = ref.kerror, kstr = ref.kstr, valid = ref.valid, klog = ref.klog, elem = ref.elem, empty = ref.empty, fs = ref.fs, noon = ref.noon, slash = ref.slash, _ = ref._;

matchr = require('../tools/matchr');

Balancer = require('./balancer');

klor = require('klor');

Syntax = (function() {
    function Syntax(name, getLine, getLines) {
        this.name = name;
        this.getLine = getLine;
        this.getLines = getLines;
        this.diss = [];
        this.colors = {};
        this.balancer = new Balancer(this, this.getLine);
    }

    Syntax.prototype.newDiss = function(li) {
        var diss;
        diss = this.balancer.dissForLine(li);
        return diss;
    };

    Syntax.prototype.getDiss = function(li) {
        if (this.diss[li] == null) {
            this.diss[li] = this.newDiss(li);
        }
        return this.diss[li];
    };

    Syntax.prototype.setDiss = function(li, dss) {
        this.diss[li] = dss;
        return dss;
    };

    Syntax.prototype.fillDiss = function(bot) {
        var i, li, ref1, results;
        results = [];
        for (li = i = 0, ref1 = bot; 0 <= ref1 ? i <= ref1 : i >= ref1; li = 0 <= ref1 ? ++i : --i) {
            results.push(this.getDiss(li));
        }
        return results;
    };

    Syntax.prototype.setLines = function(lines) {
        return this.balancer.setLines(lines);
    };

    Syntax.prototype.changed = function(changeInfo) {
        var ch, change, di, i, len, li, ref1, ref2, results;
        if (valid(changeInfo.changes)) {
            this.balancer.blocks = null;
        }
        ref1 = changeInfo.changes;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
            change = ref1[i];
            ref2 = [change.doIndex, change.newIndex, change.change], di = ref2[0], li = ref2[1], ch = ref2[2];
            switch (ch) {
                case 'changed':
                    results.push(this.diss[di] = this.newDiss(di));
                    break;
                case 'deleted':
                    this.balancer.deleteLine(di);
                    results.push(this.diss.splice(di, 1));
                    break;
                case 'inserted':
                    this.balancer.insertLine(di);
                    results.push(this.diss.splice(di, 0, this.newDiss(di)));
                    break;
                default:
                    results.push(void 0);
            }
        }
        return results;
    };

    Syntax.prototype.setFileType = function(fileType) {
        this.name = fileType;
        return this.balancer.setFileType(fileType);
    };

    Syntax.prototype.clear = function() {
        this.diss = [];
        return this.balancer.clear();
    };

    Syntax.prototype.colorForClassnames = function(clss) {
        var color, computedStyle, div, opacity;
        if (this.colors[clss] == null) {
            div = elem({
                "class": clss
            });
            document.body.appendChild(div);
            computedStyle = window.getComputedStyle(div);
            color = computedStyle.color;
            opacity = computedStyle.opacity;
            if (opacity !== '1') {
                color = 'rgba(' + color.slice(4, color.length - 2) + ', ' + opacity + ')';
            }
            this.colors[clss] = color;
            div.remove();
        }
        return this.colors[clss];
    };

    Syntax.prototype.colorForStyle = function(styl) {
        var div;
        if (this.colors[styl] == null) {
            div = elem('div');
            div.style = styl;
            document.body.appendChild(div);
            this.colors[styl] = window.getComputedStyle(div).color;
            div.remove();
        }
        return this.colors[styl];
    };

    Syntax.prototype.schemeChanged = function() {
        return this.colors = {};
    };


    /*
     0000000  000000000   0000000   000000000  000   0000000
    000          000     000   000     000     000  000
    0000000      000     000000000     000     000  000
         000     000     000   000     000     000  000
    0000000      000     000   000     000     000   0000000
     */

    Syntax.matchrConfigs = {};

    Syntax.syntaxNames = [];

    Syntax.spanForTextAndSyntax = function(text, n) {
        var clrzd, d, di, diss, i, j, l, last, ref1, ref2, ref3, sp, spc, style, value;
        l = "";
        diss = this.dissForTextAndSyntax(text, n);
        if (diss != null ? diss.length : void 0) {
            last = 0;
            for (di = i = 0, ref1 = diss.length; 0 <= ref1 ? i < ref1 : i > ref1; di = 0 <= ref1 ? ++i : --i) {
                d = diss[di];
                style = (d.styl != null) && d.styl.length && (" style=\"" + d.styl + "\"") || '';
                spc = '';
                for (sp = j = ref2 = last, ref3 = d.start; ref2 <= ref3 ? j < ref3 : j > ref3; sp = ref2 <= ref3 ? ++j : --j) {
                    spc += '&nbsp;';
                }
                last = d.start + d.match.length;
                value = (d.value != null) && d.value.length && (" class=\"" + d.value + "\"") || '';
                clrzd = "<span" + style + value + ">" + spc + (kstr.encode(d.match)) + "</span>";
                l += clrzd;
            }
        }
        return l;
    };

    Syntax.rangesForTextAndSyntax = function(line, n) {
        return matchr.ranges(Syntax.matchrConfigs[n], line);
    };

    Syntax.dissForTextAndSyntax = function(text, n) {
        return klor.ranges(text, n);
    };

    Syntax.lineForDiss = function(dss) {
        var d, i, l, len;
        l = "";
        for (i = 0, len = dss.length; i < len; i++) {
            d = dss[i];
            l = _.padEnd(l, d.start);
            l += d.match;
        }
        return l;
    };

    Syntax.shebang = function(line) {
        var lastWord;
        if (line.startsWith("#!")) {
            lastWord = _.last(line.split(/[\s\/]/));
            switch (lastWord) {
                case 'python':
                    return 'py';
                case 'node':
                    return 'js';
                case 'bash':
                    return 'sh';
                default:
                    if (indexOf.call(this.syntaxNames, lastWord) >= 0) {
                        return lastWord;
                    }
            }
        }
        return 'txt';
    };

    Syntax.init = function() {
        return this.syntaxNames = this.syntaxNames.concat(klor.exts);
    };

    return Syntax;

})();

Syntax.init();

module.exports = Syntax;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGF4LmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSwrRkFBQTtJQUFBOztBQVFBLE1BQWlFLE9BQUEsQ0FBUSxLQUFSLENBQWpFLEVBQUUsbUJBQUYsRUFBVSxlQUFWLEVBQWdCLGlCQUFoQixFQUF1QixlQUF2QixFQUE2QixlQUE3QixFQUFtQyxpQkFBbkMsRUFBMEMsV0FBMUMsRUFBOEMsZUFBOUMsRUFBb0QsaUJBQXBELEVBQTJEOztBQUUzRCxNQUFBLEdBQVcsT0FBQSxDQUFRLGlCQUFSOztBQUNYLFFBQUEsR0FBVyxPQUFBLENBQVEsWUFBUjs7QUFDWCxJQUFBLEdBQVcsT0FBQSxDQUFRLE1BQVI7O0FBRUw7SUFFVyxnQkFBQyxJQUFELEVBQVEsT0FBUixFQUFrQixRQUFsQjtRQUFDLElBQUMsQ0FBQSxPQUFEO1FBQU8sSUFBQyxDQUFBLFVBQUQ7UUFBVSxJQUFDLENBQUEsV0FBRDtRQUUzQixJQUFDLENBQUEsSUFBRCxHQUFZO1FBQ1osSUFBQyxDQUFBLE1BQUQsR0FBWTtRQUNaLElBQUMsQ0FBQSxRQUFELEdBQVksSUFBSSxRQUFKLENBQWEsSUFBYixFQUFnQixJQUFDLENBQUEsT0FBakI7SUFKSDs7cUJBWWIsT0FBQSxHQUFTLFNBQUMsRUFBRDtBQUVMLFlBQUE7UUFBQSxJQUFBLEdBQU8sSUFBQyxDQUFBLFFBQVEsQ0FBQyxXQUFWLENBQXNCLEVBQXRCO2VBQ1A7SUFISzs7cUJBS1QsT0FBQSxHQUFTLFNBQUMsRUFBRDtRQUVMLElBQU8scUJBQVA7WUFDSSxJQUFDLENBQUEsSUFBSyxDQUFBLEVBQUEsQ0FBTixHQUFZLElBQUMsQ0FBQSxPQUFELENBQVMsRUFBVCxFQURoQjs7ZUFHQSxJQUFDLENBQUEsSUFBSyxDQUFBLEVBQUE7SUFMRDs7cUJBT1QsT0FBQSxHQUFTLFNBQUMsRUFBRCxFQUFLLEdBQUw7UUFFTCxJQUFDLENBQUEsSUFBSyxDQUFB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QVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbiAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuMDAwICAgICAgICAwMDAgMDAwICAgMDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgIDAwMCAwMDBcbjAwMDAwMDAgICAgIDAwMDAwICAgIDAwMCAwIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMDAgICAgMDAwMDBcbiAgICAgMDAwICAgICAwMDAgICAgIDAwMCAgMDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgICAwMDAgMDAwXG4wMDAwMDAwICAgICAgMDAwICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiMjI1xuXG57IGtlcnJvciwga3N0ciwgdmFsaWQsIGtsb2csIGVsZW0sIGVtcHR5LCBmcywgbm9vbiwgc2xhc2gsIF8gfSA9IHJlcXVpcmUgJ2t4aydcblxubWF0Y2hyICAgPSByZXF1aXJlICcuLi90b29scy9tYXRjaHInXG5CYWxhbmNlciA9IHJlcXVpcmUgJy4vYmFsYW5jZXInXG5rbG9yICAgICA9IHJlcXVpcmUgJ2tsb3InXG5cbmNsYXNzIFN5bnRheFxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQG5hbWUsIEBnZXRMaW5lLCBAZ2V0TGluZXMpIC0+XG5cbiAgICAgICAgQGRpc3MgICAgID0gW11cbiAgICAgICAgQGNvbG9ycyAgID0ge31cbiAgICAgICAgQGJhbGFuY2VyID0gbmV3IEJhbGFuY2VyIEAsIEBnZXRMaW5lXG5cbiAgICAjIDAwMDAwMDAgICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAgMDAwXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDBcbiAgICAjIDAwMDAwMDAgICAgMDAwICAwMDAwMDAwICAgMDAwMDAwMFxuXG4gICAgbmV3RGlzczogKGxpKSAtPlxuXG4gICAgICAgIGRpc3MgPSBAYmFsYW5jZXIuZGlzc0ZvckxpbmUgbGlcbiAgICAgICAgZGlzc1xuXG4gICAgZ2V0RGlzczogKGxpKSAtPlxuXG4gICAgICAgIGlmIG5vdCBAZGlzc1tsaV0/XG4gICAgICAgICAgICBAZGlzc1tsaV0gPSBAbmV3RGlzcyBsaVxuXG4gICAgICAgIEBkaXNzW2xpXVxuXG4gICAgc2V0RGlzczogKGxpLCBkc3MpIC0+XG5cbiAgICAgICAgQGRpc3NbbGldID0gZHNzXG4gICAgICAgIGRzc1xuXG4gICAgZmlsbERpc3M6IChib3QpIC0+XG5cbiAgICAgICAgZm9yIGxpIGluIFswLi5ib3RdXG4gICAgICAgICAgICBAZ2V0RGlzcyBsaVxuXG4gICAgIyAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAgICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwICAgICAgMDAwICAwMDAgMCAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4gICAgIyAgICAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgICAgICAgICAgIDAwMCAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgXG4gICAgXG4gICAgc2V0TGluZXM6IChsaW5lcykgLT5cbiAgICAgICAgXG4gICAgICAgIEBiYWxhbmNlci5zZXRMaW5lcyBsaW5lc1xuICAgICAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMFxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDBcblxuICAgIGNoYW5nZWQ6IChjaGFuZ2VJbmZvKSAtPlxuXG4gICAgICAgIGlmIHZhbGlkIGNoYW5nZUluZm8uY2hhbmdlc1xuICAgICAgICAgICAgQGJhbGFuY2VyLmJsb2NrcyA9IG51bGxcbiAgICAgICAgXG4gICAgICAgIGZvciBjaGFuZ2UgaW4gY2hhbmdlSW5mby5jaGFuZ2VzXG5cbiAgICAgICAgICAgIFtkaSxsaSxjaF0gPSBbY2hhbmdlLmRvSW5kZXgsIGNoYW5nZS5uZXdJbmRleCwgY2hhbmdlLmNoYW5nZV1cblxuICAgICAgICAgICAgc3dpdGNoIGNoXG5cbiAgICAgICAgICAgICAgICB3aGVuICdjaGFuZ2VkJ1xuXG4gICAgICAgICAgICAgICAgICAgIEBkaXNzW2RpXSA9IEBuZXdEaXNzIGRpXG5cbiAgICAgICAgICAgICAgICB3aGVuICdkZWxldGVkJ1xuXG4gICAgICAgICAgICAgICAgICAgIEBiYWxhbmNlci5kZWxldGVMaW5lIGRpXG4gICAgICAgICAgICAgICAgICAgIEBkaXNzLnNwbGljZSBkaSwgMVxuXG4gICAgICAgICAgICAgICAgd2hlbiAnaW5zZXJ0ZWQnXG5cbiAgICAgICAgICAgICAgICAgICAgQGJhbGFuY2VyLmluc2VydExpbmUgZGlcbiAgICAgICAgICAgICAgICAgICAgQGRpc3Muc3BsaWNlIGRpLCAwLCBAbmV3RGlzcyBkaVxuXG4gICAgIyAwMDAwMDAwMCAgMDAwICAwMDAgICAgICAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICAgICAwMDAgICAgICAwMDAgMDAwICAgMDAwICAgMDAwICAwMDBcbiAgICAjIDAwMDAwMCAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgICAgICAwMDAgICAgICAgMDAwMDAgICAgMDAwMDAwMDAgICAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAwMDAgICAgICAwMDAgICAgICAgICAgMDAwICAgICAgICAwMDAgICAgIDAwMCAgICAgICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgICAgMDAwICAgICAgICAwMDAgICAgIDAwMCAgICAgICAgMDAwMDAwMDBcblxuICAgIHNldEZpbGVUeXBlOiAoZmlsZVR5cGUpIC0+XG5cbiAgICAgICAgIyBrbG9nICdTeW50YXguc2V0RmlsZVR5cGUnLCBmaWxlVHlwZVxuICAgICAgICBcbiAgICAgICAgQG5hbWUgPSBmaWxlVHlwZVxuICAgICAgICBAYmFsYW5jZXIuc2V0RmlsZVR5cGUgZmlsZVR5cGVcbiAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgMDAwICAgICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAwMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAgMDAwMDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG5cbiAgICBjbGVhcjogLT5cblxuICAgICAgICBAZGlzcyA9IFtdXG4gICAgICAgIEBiYWxhbmNlci5jbGVhcigpXG5cbiAgICAjICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgICAwMDAwMDAwICAgMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuXG4gICAgY29sb3JGb3JDbGFzc25hbWVzOiAoY2xzcykgLT5cblxuICAgICAgICBpZiBub3QgQGNvbG9yc1tjbHNzXT9cblxuICAgICAgICAgICAgZGl2ID0gZWxlbSBjbGFzczogY2xzc1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCBkaXZcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSBkaXZcbiAgICAgICAgICAgIGNvbG9yID0gY29tcHV0ZWRTdHlsZS5jb2xvclxuICAgICAgICAgICAgb3BhY2l0eSA9IGNvbXB1dGVkU3R5bGUub3BhY2l0eVxuICAgICAgICAgICAgaWYgb3BhY2l0eSAhPSAnMSdcbiAgICAgICAgICAgICAgICBjb2xvciA9ICdyZ2JhKCcgKyBjb2xvci5zbGljZSg0LCBjb2xvci5sZW5ndGgtMikgKyAnLCAnICsgb3BhY2l0eSArICcpJ1xuICAgICAgICAgICAgQGNvbG9yc1tjbHNzXSA9IGNvbG9yXG4gICAgICAgICAgICBkaXYucmVtb3ZlKClcblxuICAgICAgICByZXR1cm4gQGNvbG9yc1tjbHNzXVxuXG4gICAgY29sb3JGb3JTdHlsZTogKHN0eWwpIC0+XG5cbiAgICAgICAgaWYgbm90IEBjb2xvcnNbc3R5bF0/XG4gICAgICAgICAgICBkaXYgPSBlbGVtICdkaXYnXG4gICAgICAgICAgICBkaXYuc3R5bGUgPSBzdHlsXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIGRpdlxuICAgICAgICAgICAgQGNvbG9yc1tzdHlsXSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRpdikuY29sb3JcbiAgICAgICAgICAgIGRpdi5yZW1vdmUoKVxuXG4gICAgICAgIHJldHVybiBAY29sb3JzW3N0eWxdXG5cbiAgICBzY2hlbWVDaGFuZ2VkOiAtPiBAY29sb3JzID0ge31cblxuICAgICMjI1xuICAgICAwMDAwMDAwICAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAgICAwMDAwMDAwXG4gICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgMDAwXG4gICAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMCAgMDAwXG4gICAgICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgMDAwXG4gICAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMDAwMDBcbiAgICAjIyNcblxuICAgIEBtYXRjaHJDb25maWdzID0ge31cbiAgICBAc3ludGF4TmFtZXMgPSBbXVxuXG4gICAgQHNwYW5Gb3JUZXh0QW5kU3ludGF4OiAodGV4dCwgbikgLT5cblxuICAgICAgICBsID0gXCJcIlxuICAgICAgICBkaXNzID0gQGRpc3NGb3JUZXh0QW5kU3ludGF4IHRleHQsIG5cbiAgICAgICAgaWYgZGlzcz8ubGVuZ3RoXG4gICAgICAgICAgICBsYXN0ID0gMFxuICAgICAgICAgICAgZm9yIGRpIGluIFswLi4uZGlzcy5sZW5ndGhdXG4gICAgICAgICAgICAgICAgZCA9IGRpc3NbZGldXG4gICAgICAgICAgICAgICAgc3R5bGUgPSBkLnN0eWw/IGFuZCBkLnN0eWwubGVuZ3RoIGFuZCBcIiBzdHlsZT1cXFwiI3tkLnN0eWx9XFxcIlwiIG9yICcnXG4gICAgICAgICAgICAgICAgc3BjID0gJydcbiAgICAgICAgICAgICAgICBmb3Igc3AgaW4gW2xhc3QuLi5kLnN0YXJ0XVxuICAgICAgICAgICAgICAgICAgICBzcGMgKz0gJyZuYnNwOydcbiAgICAgICAgICAgICAgICBsYXN0ICA9IGQuc3RhcnQgKyBkLm1hdGNoLmxlbmd0aFxuICAgICAgICAgICAgICAgIHZhbHVlID0gZC52YWx1ZT8gYW5kIGQudmFsdWUubGVuZ3RoIGFuZCBcIiBjbGFzcz1cXFwiI3tkLnZhbHVlfVxcXCJcIiBvciAnJ1xuICAgICAgICAgICAgICAgIGNscnpkID0gXCI8c3BhbiN7c3R5bGV9I3t2YWx1ZX0+I3tzcGN9I3trc3RyLmVuY29kZSBkLm1hdGNofTwvc3Bhbj5cIlxuICAgICAgICAgICAgICAgIGwgKz0gY2xyemRcbiAgICAgICAgbFxuXG4gICAgQHJhbmdlc0ZvclRleHRBbmRTeW50YXg6IChsaW5lLCBuKSAtPlxuXG4gICAgICAgIG1hdGNoci5yYW5nZXMgU3ludGF4Lm1hdGNockNvbmZpZ3Nbbl0sIGxpbmVcblxuICAgIEBkaXNzRm9yVGV4dEFuZFN5bnRheDogKHRleHQsIG4pIC0+XG5cbiAgICAgICAga2xvci5yYW5nZXMgdGV4dCwgblxuXG4gICAgQGxpbmVGb3JEaXNzOiAoZHNzKSAtPlxuXG4gICAgICAgIGwgPSBcIlwiXG4gICAgICAgIGZvciBkIGluIGRzc1xuICAgICAgICAgICAgbCA9IF8ucGFkRW5kIGwsIGQuc3RhcnRcbiAgICAgICAgICAgIGwgKz0gZC5tYXRjaFxuICAgICAgICBsXG5cbiAgICAjICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgMDAwMFxuICAgICMgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwXG5cbiAgICBAc2hlYmFuZzogKGxpbmUpIC0+XG5cbiAgICAgICAgaWYgbGluZS5zdGFydHNXaXRoIFwiIyFcIlxuICAgICAgICAgICAgbGFzdFdvcmQgPSBfLmxhc3QgbGluZS5zcGxpdCAvW1xcc1xcL10vXG4gICAgICAgICAgICBzd2l0Y2ggbGFzdFdvcmRcbiAgICAgICAgICAgICAgICB3aGVuICdweXRob24nIHRoZW4gcmV0dXJuICdweSdcbiAgICAgICAgICAgICAgICB3aGVuICdub2RlJyAgIHRoZW4gcmV0dXJuICdqcydcbiAgICAgICAgICAgICAgICB3aGVuICdiYXNoJyAgIHRoZW4gcmV0dXJuICdzaCdcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGlmIGxhc3RXb3JkIGluIEBzeW50YXhOYW1lc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RXb3JkXG4gICAgICAgICd0eHQnXG5cbiAgICAjIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgMDAwXG4gICAgIyAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAwMDBcbiAgICAjIDAwMCAgMDAwICAwMDAwICAwMDAgICAgIDAwMFxuICAgICMgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgMDAwXG5cbiAgICBAaW5pdDogLT5cblxuICAgICAgICAjIHN5bnRheERpciA9IFwiI3tfX2Rpcm5hbWV9Ly4uLy4uL3N5bnRheC9cIlxuXG4gICAgICAgICMgZm9yIHN5bnRheEZpbGUgaW4gZnMucmVhZGRpclN5bmMgc3ludGF4RGlyXG5cbiAgICAgICAgICAgICMgc3ludGF4TmFtZSA9IHNsYXNoLmJhc2VuYW1lIHN5bnRheEZpbGUsICcubm9vbidcbiAgICAgICAgICAgICMgcGF0dGVybnMgPSBub29uLmxvYWQgc2xhc2guam9pbiBzeW50YXhEaXIsIHN5bnRheEZpbGVcblxuICAgICAgICAgICAgIyBwYXR0ZXJuc1snXFxcXHcrJ10gICAgICAgPSAndGV4dCcgICAjIHRoaXMgZW5zdXJlcyB0aGF0IGFsbCAuLi5cbiAgICAgICAgICAgICMgcGF0dGVybnNbJ1teXFxcXHdcXFxcc10rJ10gPSAnc3ludGF4JyAjIG5vbi1zcGFjZSBjaGFyYWN0ZXJzIG1hdGNoXG5cbiAgICAgICAgICAgICMgaWYgcGF0dGVybnMua28/LmV4dG5hbWVzP1xuICAgICAgICAgICAgICAgICMgZXh0bmFtZXMgPSBwYXR0ZXJucy5rby5leHRuYW1lc1xuICAgICAgICAgICAgICAgICMgZGVsZXRlIHBhdHRlcm5zLmtvXG5cbiAgICAgICAgICAgICAgICAjIGNvbmZpZyA9IG1hdGNoci5jb25maWcgcGF0dGVybnNcbiAgICAgICAgICAgICAgICAjIGZvciBzeW50YXhOYW1lIGluIGV4dG5hbWVzXG4gICAgICAgICAgICAgICAgICAgICMgQHN5bnRheE5hbWVzLnB1c2ggc3ludGF4TmFtZVxuICAgICAgICAgICAgICAgICAgICAjIEBtYXRjaHJDb25maWdzW3N5bnRheE5hbWVdID0gY29uZmlnXG4gICAgICAgICAgICAjIGVsc2VcbiAgICAgICAgICAgICAgICAjIEBzeW50YXhOYW1lcy5wdXNoIHN5bnRheE5hbWVcbiAgICAgICAgICAgICAgICAjIEBtYXRjaHJDb25maWdzW3N5bnRheE5hbWVdID0gbWF0Y2hyLmNvbmZpZyBwYXR0ZXJuc1xuXG4gICAgICAgICMga2xvci5pbml0KClcbiAgICAgICAgQHN5bnRheE5hbWVzID0gQHN5bnRheE5hbWVzLmNvbmNhdCBrbG9yLmV4dHNcblxuU3ludGF4LmluaXQoKVxubW9kdWxlLmV4cG9ydHMgPSBTeW50YXhcbiJdfQ==
//# sourceURL=../../coffee/editor/syntax.coffee