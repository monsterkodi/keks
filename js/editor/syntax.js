// koffee 1.4.0

/*
 0000000  000   000  000   000  000000000   0000000   000   000
000        000 000   0000  000     000     000   000   000 000
0000000     00000    000 0 000     000     000000000    00000
     000     000     000  0000     000     000   000   000 000
0000000      000     000   000     000     000   000  000   000
 */
var Balancer, Syntax, _, elem, klor, kstr, last, matchr, ref, valid,
    indexOf = [].indexOf;

ref = require('kxk'), matchr = ref.matchr, valid = ref.valid, elem = ref.elem, last = ref.last, kstr = ref.kstr, _ = ref._;

Balancer = require('./balancer');

klor = require('klor');

Syntax = (function() {
    function Syntax(name, getLine, getLines) {
        this.name = name;
        this.getLine = getLine;
        this.getLines = getLines;
        this.diss = [];
        this.colors = {};
        this.balancer = new Balancer(this, this.getLine);
    }

    Syntax.prototype.newDiss = function(li) {
        var diss;
        diss = this.balancer.dissForLine(li);
        return diss;
    };

    Syntax.prototype.getDiss = function(li) {
        if (this.diss[li] == null) {
            this.diss[li] = this.newDiss(li);
        }
        return this.diss[li];
    };

    Syntax.prototype.setDiss = function(li, dss) {
        this.diss[li] = dss;
        return dss;
    };

    Syntax.prototype.fillDiss = function(bot) {
        var i, li, ref1, results;
        results = [];
        for (li = i = 0, ref1 = bot; 0 <= ref1 ? i <= ref1 : i >= ref1; li = 0 <= ref1 ? ++i : --i) {
            results.push(this.getDiss(li));
        }
        return results;
    };

    Syntax.prototype.setLines = function(lines) {
        return this.balancer.setLines(lines);
    };

    Syntax.prototype.changed = function(changeInfo) {
        var ch, change, di, i, len, li, ref1, ref2, results;
        if (valid(changeInfo.changes)) {
            this.balancer.blocks = null;
        }
        ref1 = changeInfo.changes;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
            change = ref1[i];
            ref2 = [change.doIndex, change.newIndex, change.change], di = ref2[0], li = ref2[1], ch = ref2[2];
            switch (ch) {
                case 'changed':
                    results.push(this.diss[di] = this.newDiss(di));
                    break;
                case 'deleted':
                    this.balancer.deleteLine(di);
                    results.push(this.diss.splice(di, 1));
                    break;
                case 'inserted':
                    this.balancer.insertLine(di);
                    results.push(this.diss.splice(di, 0, this.newDiss(di)));
                    break;
                default:
                    results.push(void 0);
            }
        }
        return results;
    };

    Syntax.prototype.setFileType = function(fileType) {
        this.name = fileType;
        return this.balancer.setFileType(fileType);
    };

    Syntax.prototype.clear = function() {
        this.diss = [];
        return this.balancer.clear();
    };

    Syntax.prototype.colorForClassnames = function(clss) {
        var color, computedStyle, div, opacity;
        if (this.colors[clss] == null) {
            div = elem({
                "class": clss
            });
            document.body.appendChild(div);
            computedStyle = window.getComputedStyle(div);
            color = computedStyle.color;
            opacity = computedStyle.opacity;
            if (opacity !== '1') {
                color = 'rgba(' + color.slice(4, color.length - 2) + ', ' + opacity + ')';
            }
            this.colors[clss] = color;
            div.remove();
        }
        return this.colors[clss];
    };

    Syntax.prototype.colorForStyle = function(styl) {
        var div;
        if (this.colors[styl] == null) {
            div = elem('div');
            div.style = styl;
            document.body.appendChild(div);
            this.colors[styl] = window.getComputedStyle(div).color;
            div.remove();
        }
        return this.colors[styl];
    };

    Syntax.prototype.schemeChanged = function() {
        return this.colors = {};
    };


    /*
     0000000  000000000   0000000   000000000  000   0000000
    000          000     000   000     000     000  000
    0000000      000     000000000     000     000  000
         000     000     000   000     000     000  000
    0000000      000     000   000     000     000   0000000
     */

    Syntax.matchrConfigs = {};

    Syntax.syntaxNames = [];

    Syntax.spanForTextAndSyntax = function(text, n) {
        var clrzd, clss, d, di, diss, i, j, l, ref1, ref2, ref3, sp, spc, style;
        l = "";
        diss = this.dissForTextAndSyntax(text, n);
        if (diss != null ? diss.length : void 0) {
            last = 0;
            for (di = i = 0, ref1 = diss.length; 0 <= ref1 ? i < ref1 : i > ref1; di = 0 <= ref1 ? ++i : --i) {
                d = diss[di];
                style = (d.styl != null) && d.styl.length && (" style=\"" + d.styl + "\"") || '';
                spc = '';
                for (sp = j = ref2 = last, ref3 = d.start; ref2 <= ref3 ? j < ref3 : j > ref3; sp = ref2 <= ref3 ? ++j : --j) {
                    spc += '&nbsp;';
                }
                last = d.start + d.match.length;
                clss = (d.clss != null) && d.clss.length && (" class=\"" + d.clss + "\"") || '';
                clrzd = "<span" + style + clss + ">" + spc + (kstr.encode(d.match)) + "</span>";
                l += clrzd;
            }
        }
        return l;
    };

    Syntax.rangesForTextAndSyntax = function(line, n) {
        return matchr.ranges(Syntax.matchrConfigs[n], line);
    };

    Syntax.dissForTextAndSyntax = function(text, n) {
        return klor.ranges(text, n);
    };

    Syntax.lineForDiss = function(dss) {
        var d, i, l, len;
        l = "";
        for (i = 0, len = dss.length; i < len; i++) {
            d = dss[i];
            l = _.padEnd(l, d.start);
            l += d.match;
        }
        return l;
    };

    Syntax.shebang = function(line) {
        var lastWord;
        if (line.startsWith("#!")) {
            lastWord = _.last(line.split(/[\s\/]/));
            switch (lastWord) {
                case 'python':
                    return 'py';
                case 'node':
                    return 'js';
                case 'bash':
                    return 'sh';
                default:
                    if (indexOf.call(this.syntaxNames, lastWord) >= 0) {
                        return lastWord;
                    }
            }
        }
        return 'txt';
    };

    Syntax.init = function() {
        return this.syntaxNames = this.syntaxNames.concat(klor.exts);
    };

    return Syntax;

})();

Syntax.init();

module.exports = Syntax;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/editor/syntax.coffee