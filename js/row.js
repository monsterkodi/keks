// koffee 1.4.0

/*
00000000    0000000   000   000
000   000  000   000  000 0 000
0000000    000   000  000000000
000   000  000   000  000   000
000   000   0000000   00     00
 */
var $, File, Row, _, app, clamp, electron, elem, empty, fs, kerror, keyinfo, klog, post, ref, slash, stopEvent, valid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), elem = ref.elem, keyinfo = ref.keyinfo, clamp = ref.clamp, stopEvent = ref.stopEvent, valid = ref.valid, empty = ref.empty, post = ref.post, slash = ref.slash, klog = ref.klog, kerror = ref.kerror, fs = ref.fs, $ = ref.$, _ = ref._;

electron = require('electron');

File = require('./tools/file');

app = electron.remote.app;

Row = (function() {
    function Row(column, item) {
        var html, ref1, ref2, text;
        this.column = column;
        this.item = item;
        this.rename = bind(this.rename, this);
        this.onNameChange = bind(this.onNameChange, this);
        this.onNameFocusOut = bind(this.onNameFocusOut, this);
        this.onNameKeyDown = bind(this.onNameKeyDown, this);
        this.editName = bind(this.editName, this);
        this.activate = bind(this.activate, this);
        this.browser = this.column.browser;
        text = (ref1 = this.item.text) != null ? ref1 : this.item.name;
        if (empty(text) || empty(text.trim())) {
            html = '<span> </span>';
        } else {
            html = File.span(text);
        }
        this.div = elem({
            "class": 'browserRow',
            html: html
        });
        this.div.classList.add(this.item.type);
        this.column.table.appendChild(this.div);
        if (((ref2 = this.item.type) === 'file' || ref2 === 'dir') || this.item.icon) {
            this.setIcon();
        }
    }

    Row.prototype.next = function() {
        return this.index() < this.column.numRows() - 1 && this.column.rows[this.index() + 1] || null;
    };

    Row.prototype.prev = function() {
        return this.index() > 0 && this.column.rows[this.index() - 1] || null;
    };

    Row.prototype.index = function() {
        return this.column.rows.indexOf(this);
    };

    Row.prototype.onMouseOut = function() {
        return this.div.classList.remove('hover');
    };

    Row.prototype.onMouseOver = function() {
        return this.div.classList.add('hover');
    };

    Row.prototype.path = function() {
        var ref1;
        if ((this.item.file != null) && _.isString(this.item.file)) {
            return this.item.file;
        }
        if ((((ref1 = this.item.obj) != null ? ref1.file : void 0) != null) && _.isString(this.item.obj.file)) {
            return this.item.obj.file;
        }
    };

    Row.prototype.setIcon = function() {
        var className, icon, ref1;
        if (this.item.icon) {
            className = this.item.icon;
        } else {
            if (this.item.type === 'dir') {
                className = 'folder-icon';
            } else {
                className = File.iconClassName(this.item.file);
            }
        }
        if (slash.base(this.item.file).startsWith('.')) {
            className += ' dotfile';
        }
        icon = elem('span', {
            "class": className + ' browserFileIcon'
        });
        return (ref1 = this.div.firstChild) != null ? ref1.insertBefore(icon, this.div.firstChild.firstChild) : void 0;
    };

    Row.prototype.activate = function(event) {
        var col, opt, ref1, ref2, ref3;
        if (this.column.index < 0) {
            this.column.activateRow(this);
            return;
        }
        if ((ref1 = $('.hover')) != null) {
            ref1.classList.remove('hover');
        }
        this.setActive();
        opt = {
            file: this.item.file
        };
        switch (this.item.type) {
            case 'dir':
            case 'file':
                col = this.column.index;
                this.browser.clearColumnsFrom(col + 1, {
                    pop: true,
                    clear: col + 1
                });
                switch (this.item.type) {
                    case 'dir':
                        this.browser.loadDirItem(this.item, col + 1, {
                            focus: false
                        });
                        break;
                    case 'file':
                        this.browser.loadFileItem(this.item, col + 1);
                }
                this.browser.select.row(this, false);
                break;
            default:
                if ((this.item.file != null) && _.isString(this.item.file) && this.item.type !== 'obj') {
                    opt.line = this.item.line;
                    opt.col = this.item.column;
                    klog('jumpToFile?', opt);
                } else if ((this.column.parent.obj != null) && this.column.parent.type === 'obj') {
                    if (this.item.type === 'obj') {
                        this.browser.loadObjectItem(this.item, {
                            column: this.column.index + 1
                        });
                        this.browser.previewObjectItem(this.item, {
                            column: this.column.index + 2
                        });
                        if ((((ref2 = this.item.obj) != null ? ref2.file : void 0) != null) && _.isString(this.item.obj.file)) {
                            opt.line = this.item.obj.line;
                            opt.col = this.item.obj.column;
                            klog('jumpToFile?', opt);
                        }
                    }
                } else if ((((ref3 = this.item.obj) != null ? ref3.file : void 0) != null) && _.isString(this.item.obj.file)) {
                    opt = {
                        file: this.item.obj.file,
                        line: this.item.obj.line,
                        col: this.item.obj.column,
                        newTab: opt.newTab
                    };
                    klog('jumpToFile?', opt);
                } else {
                    this.browser.clearColumnsFrom(this.column.index + 1);
                }
        }
        return this;
    };

    Row.prototype.isActive = function() {
        return this.div.classList.contains('active');
    };

    Row.prototype.setActive = function(opt) {
        var ref1;
        if (opt == null) {
            opt = {};
        }
        if (this.column.activeRow() !== this) {
            if ((ref1 = this.column.activeRow()) != null) {
                ref1.clearActive();
            }
        }
        this.div.classList.add('active');
        if ((opt != null ? opt.scroll : void 0) !== false) {
            this.column.scroll.toIndex(this.index());
        }
        return this;
    };

    Row.prototype.clearActive = function() {
        this.div.classList.remove('active');
        return this;
    };

    Row.prototype.isSelected = function() {
        return this.div.classList.contains('selected');
    };

    Row.prototype.setSelected = function() {
        this.div.classList.add('selected');
        return this;
    };

    Row.prototype.clearSelected = function() {
        this.div.classList.remove('selected');
        return this;
    };

    Row.prototype.editName = function() {
        if (this.input != null) {
            return;
        }
        this.input = elem('input', {
            "class": 'rowNameInput'
        });
        this.input.value = slash.file(this.item.file);
        this.div.appendChild(this.input);
        this.input.addEventListener('change', this);
        this.input.addEventListener('keydown', this.onNameKeyDown);
        this.input.addEventListener('focusout', this.onNameFocusOut);
        this.input.focus();
        return this.input.setSelectionRange(0, slash.base(this.item.file).length);
    };

    Row.prototype.onNameKeyDown = function(event) {
        var combo, key, mod, ref1;
        ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo;
        switch (combo) {
            case 'esc':
                if (this.input.value !== slash.file(this.item.file)) {
                    this.input.value = slash.file(this.item.file);
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
                this.onNameFocusOut();
                break;
            case 'enter':
                if (this.input.value !== slash.file(this.item.file)) {
                    this.onNameChange();
                } else {
                    this.removeInput();
                }
                stopEvent(event);
        }
        return event.stopPropagation();
    };

    Row.prototype.removeInput = function() {
        if (this.input == null) {
            return;
        }
        this.input.removeEventListener('focusout', this.onNameFocusOut);
        this.input.removeEventListener('change', this.onNameChange);
        this.input.removeEventListener('keydown', this.onNameKeyDown);
        this.input.remove();
        delete this.input;
        this.input = null;
        if ((document.activeElement == null) || document.activeElement === document.body) {
            return this.column.focus({
                activate: false
            });
        }
    };

    Row.prototype.onNameFocusOut = function(event) {
        return this.removeInput();
    };

    Row.prototype.onNameChange = function(event) {
        var targetFile;
        targetFile = slash.join(slash.dir(this.item.file), this.input.value.trim());
        this.removeInput();
        return this.rename(targetFile);
    };

    Row.prototype.rename = function(targetFile) {
        if (slash.samePath(this.item.file, targetFile)) {
            return;
        }
        return File.rename(this.item.file, targetFile, (function(_this) {
            return function(source, target) {
                _this.column.removeRow(_this);
                return _this.browser.navigateToFile(target);
            };
        })(this));
    };

    return Row;

})();

module.exports = Row;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSxpSEFBQTtJQUFBOztBQVFBLE1BQXlGLE9BQUEsQ0FBUSxLQUFSLENBQXpGLEVBQUUsZUFBRixFQUFRLHFCQUFSLEVBQWlCLGlCQUFqQixFQUF3Qix5QkFBeEIsRUFBbUMsaUJBQW5DLEVBQTBDLGlCQUExQyxFQUFpRCxlQUFqRCxFQUF1RCxpQkFBdkQsRUFBOEQsZUFBOUQsRUFBb0UsbUJBQXBFLEVBQTRFLFdBQTVFLEVBQWdGLFNBQWhGLEVBQW1GOztBQUVuRixRQUFBLEdBQVksT0FBQSxDQUFRLFVBQVI7O0FBQ1osSUFBQSxHQUFZLE9BQUEsQ0FBUSxjQUFSOztBQUVaLEdBQUEsR0FBTSxRQUFRLENBQUMsTUFBTSxDQUFDOztBQUVoQjtJQUVXLGFBQUMsTUFBRCxFQUFVLElBQVY7QUFFVCxZQUFBO1FBRlUsSUFBQyxDQUFBLFNBQUQ7UUFBUyxJQUFDLENBQUEsT0FBRDs7Ozs7OztRQUVuQixJQUFDLENBQUEsT0FBRCxHQUFXLElBQUMsQ0FBQSxNQUFNLENBQUM7UUFDbkIsSUFBQSw0Q0FBb0IsSUFBQyxDQUFBLElBQUksQ0FBQztRQUMxQixJQUFHLEtBQUEsQ0FBTSxJQUFOLENBQUEsSUFBZSxLQUFBLENBQU0sSUFBSSxDQUFDLElBQUwsQ0FBQSxDQUFOLENBQWxCO1lBQ0ksSUFBQSxHQUFPLGlCQURYO1NBQUEsTUFBQTtZQUdJLElBQUEsR0FBTyxJQUFJLENBQUMsSUFBTCxDQUFVLElBQVYsRUFIWDs7UUFJQSxJQUFDLENBQUEsR0FBRCxHQUFPLElBQUEsQ0FBSztZQUFBLENBQUEsS0FBQSxDQUFBLEVBQU0sWUFBTjtZQUFtQixJQUFBLEVBQUssSUFBeEI7U0FBTDtRQUNQLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQWYsQ0FBbUIsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUF6QjtRQUNBLElB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R0FBTixDQUFVLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBaEIsQ0FBWCxFQUFrQyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFiLENBQUEsQ0FBbEM7UUFFYixJQUFDLENBQUEsV0FBRCxDQUFBO2VBRUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxVQUFSO0lBTlU7O2tCQWNkLE1BQUEsR0FBUSxTQUFDLFVBQUQ7UUFFSixJQUFVLEtBQUssQ0FBQyxRQUFOLENBQWUsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFyQixFQUEyQixVQUEzQixDQUFWO0FBQUEsbUJBQUE7O2VBRUEsSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFDLENBQUEsSUFBSSxDQUFDLElBQWxCLEVBQXdCLFVBQXhCLEVBQW9DLENBQUEsU0FBQSxLQUFBO21CQUFBLFNBQUMsTUFBRCxFQUFTLE1BQVQ7Z0JBRWhDLEtBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUixDQUFrQixLQUFsQjt1QkFDQSxLQUFDLENBQUEsT0FBTyxDQUFDLGNBQVQsQ0FBd0IsTUFBeEI7WUFIZ0M7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXBDO0lBSkk7Ozs7OztBQTREWixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMFxuMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMDAwMDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwICAgICAwMFxuIyMjXG5cbnsgZWxlbSwga2V5aW5mbywgY2xhbXAsIHN0b3BFdmVudCwgdmFsaWQsIGVtcHR5LCBwb3N0LCBzbGFzaCwga2xvZywga2Vycm9yLCBmcywgJCwgXyB9ID0gcmVxdWlyZSAna3hrJyBcblxuZWxlY3Ryb24gID0gcmVxdWlyZSAnZWxlY3Ryb24nXG5GaWxlICAgICAgPSByZXF1aXJlICcuL3Rvb2xzL2ZpbGUnXG5cbmFwcCA9IGVsZWN0cm9uLnJlbW90ZS5hcHBcblxuY2xhc3MgUm93XG4gICAgXG4gICAgY29uc3RydWN0b3I6IChAY29sdW1uLCBAaXRlbSkgLT5cblxuICAgICAgICBAYnJvd3NlciA9IEBjb2x1bW4uYnJvd3NlclxuICAgICAgICB0ZXh0ID0gQGl0ZW0udGV4dCA/IEBpdGVtLm5hbWVcbiAgICAgICAgaWYgZW1wdHkodGV4dCkgb3IgZW1wdHkgdGV4dC50cmltKClcbiAgICAgICAgICAgIGh0bWwgPSAnPHNwYW4+IDwvc3Bhbj4nXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGh0bWwgPSBGaWxlLnNwYW4gdGV4dFxuICAgICAgICBAZGl2ID0gZWxlbSBjbGFzczonYnJvd3NlclJvdycgaHRtbDpodG1sICMsIGRyYWdnYWJsZTp0cnVlXG4gICAgICAgIEBkaXYuY2xhc3NMaXN0LmFkZCBAaXRlbS50eXBlXG4gICAgICAgIEBjb2x1bW4udGFibGUuYXBwZW5kQ2hpbGQgQGRpdlxuXG4gICAgICAgIGlmIEBpdGVtLnR5cGUgaW4gWydmaWxlJyAnZGlyJ10gb3IgQGl0ZW0uaWNvblxuICAgICAgICAgICAgQHNldEljb24oKVxuICAgICAgICBcbiAgICAgICAgIyBAZGl2Lm9ubW91c2Vkb3duID0gQG9uTW91c2VEb3duXG4gICAgICAgICMgQGRpdi5vbmRyYWdzdGFydCA9IEBvbkRyYWdTdGFydFxuICAgICAgICAjIEBkaXYub25kcmFnb3ZlciAgPSBAb25EcmFnT3ZlclxuICAgICAgICAjIEBkaXYub25kcm9wICAgICAgPSBAb25Ecm9wXG4gICAgICAgICAgICAgICAgICAgICAgIFxuICAgIG5leHQ6ICAgICAgICAtPiBAaW5kZXgoKSA8IEBjb2x1bW4ubnVtUm93cygpLTEgYW5kIEBjb2x1bW4ucm93c1tAaW5kZXgoKSsxXSBvciBudWxsXG4gICAgcHJldjogICAgICAgIC0+IEBpbmRleCgpID4gMCBhbmQgQGNvbHVtbi5yb3dzW0BpbmRleCgpLTFdIG9yIG51bGxcbiAgICBpbmRleDogICAgICAgLT4gQGNvbHVtbi5yb3dzLmluZGV4T2YgQCAgICBcbiAgICBvbk1vdXNlT3V0OiAgLT4gQGRpdi5jbGFzc0xpc3QucmVtb3ZlICdob3ZlcidcbiAgICBvbk1vdXNlT3ZlcjogLT4gQGRpdi5jbGFzc0xpc3QuYWRkICdob3ZlcidcblxuICAgIHBhdGg6IC0+IFxuICAgICAgICBpZiBAaXRlbS5maWxlPyBhbmQgXy5pc1N0cmluZyBAaXRlbS5maWxlXG4gICAgICAgICAgICByZXR1cm4gQGl0ZW0uZmlsZVxuICAgICAgICBpZiBAaXRlbS5vYmo/LmZpbGU/IGFuZCBfLmlzU3RyaW5nIEBpdGVtLm9iai5maWxlXG4gICAgICAgICAgICByZXR1cm4gQGl0ZW0ub2JqLmZpbGVcblxuICAgIHNldEljb246IC0+XG5cbiAgICAgICAgaWYgQGl0ZW0uaWNvblxuICAgICAgICAgICAgY2xhc3NOYW1lID0gQGl0ZW0uaWNvblxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBpZiBAaXRlbS50eXBlID09ICdkaXInXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gJ2ZvbGRlci1pY29uJ1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IEZpbGUuaWNvbkNsYXNzTmFtZSBAaXRlbS5maWxlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGlmIHNsYXNoLmJhc2UoQGl0ZW0uZmlsZSkuc3RhcnRzV2l0aCgnLicpXG4gICAgICAgICAgICBjbGFzc05hbWUgKz0gJyBkb3RmaWxlJ1xuICAgICAgICAgICAgXG4gICAgICAgIGljb24gPSBlbGVtKCdzcGFuJyBjbGFzczpjbGFzc05hbWUgKyAnIGJyb3dzZXJGaWxlSWNvbicpXG4gICAgICAgICAgICBcbiAgICAgICAgQGRpdi5maXJzdENoaWxkPy5pbnNlcnRCZWZvcmUgaWNvbiwgQGRpdi5maXJzdENoaWxkLmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMDAwMDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwIDAwMCAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAgMDAwMDAwMCAgICAgMDAwICAgICAwMDAgICAgICAwICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICBcbiAgICBcbiAgICBhY3RpdmF0ZTogKGV2ZW50KSA9PlxuXG4gICAgICAgIGlmIEBjb2x1bW4uaW5kZXggPCAwICMgc2hlbGYgaGFuZGxlcyByb3cgYWN0aXZhdGlvblxuICAgICAgICAgICAgQGNvbHVtbi5hY3RpdmF0ZVJvdyBAXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICQoJy5ob3ZlcicpPy5jbGFzc0xpc3QucmVtb3ZlICdob3ZlcidcbiAgICAgICAgXG4gICAgICAgIEBzZXRBY3RpdmUoKVxuICAgICAgICBcbiAgICAgICAgb3B0ID0gZmlsZTpAaXRlbS5maWxlXG5cbiAgICAgICAgc3dpdGNoIEBpdGVtLnR5cGVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hlbiAnZGlyJyAnZmlsZSdcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb2wgPSBAY29sdW1uLmluZGV4XG4gICAgICAgICAgICAgICAgIyBrbG9nICdyb3cuYWN0aXZhdGVJdGVtJyBjb2wsIEBpdGVtLmZpbGVcbiAgICAgICAgICAgICAgICBAYnJvd3Nlci5jbGVhckNvbHVtbnNGcm9tIGNvbCsxLCBwb3A6dHJ1ZSwgY2xlYXI6Y29sKzFcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgc3dpdGNoIEBpdGVtLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgd2hlbiAnZGlyJyAgdGhlbiBAYnJvd3Nlci5sb2FkRGlySXRlbSAgQGl0ZW0sIGNvbCsxLCBmb2N1czpmYWxzZVxuICAgICAgICAgICAgICAgICAgICB3aGVuICdmaWxlJyB0aGVuIEBicm93c2VyLmxvYWRGaWxlSXRlbSBAaXRlbSwgY29sKzFcblxuICAgICAgICAgICAgICAgIEBicm93c2VyLnNlbGVjdC5yb3cgQCwgZmFsc2VcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGVsc2UgICAgXG4gICAgICAgICAgICAgICAgaWYgQGl0ZW0uZmlsZT8gYW5kIF8uaXNTdHJpbmcoQGl0ZW0uZmlsZSkgYW5kIEBpdGVtLnR5cGUgIT0gJ29iaidcbiAgICAgICAgICAgICAgICAgICAgb3B0LmxpbmUgPSBAaXRlbS5saW5lXG4gICAgICAgICAgICAgICAgICAgIG9wdC5jb2wgID0gQGl0ZW0uY29sdW1uXG4gICAgICAgICAgICAgICAgICAgIGtsb2cgJ2p1bXBUb0ZpbGU/JyBvcHRcbiAgICAgICAgICAgICAgICBlbHNlIGlmIEBjb2x1bW4ucGFyZW50Lm9iaj8gYW5kIEBjb2x1bW4ucGFyZW50LnR5cGUgPT0gJ29iaidcbiAgICAgICAgICAgICAgICAgICAgaWYgQGl0ZW0udHlwZSA9PSAnb2JqJ1xuICAgICAgICAgICAgICAgICAgICAgICAgQGJyb3dzZXIubG9hZE9iamVjdEl0ZW0gQGl0ZW0sIGNvbHVtbjpAY29sdW1uLmluZGV4KzFcbiAgICAgICAgICAgICAgICAgICAgICAgIEBicm93c2VyLnByZXZpZXdPYmplY3RJdGVtICBAaXRlbSwgY29sdW1uOkBjb2x1bW4uaW5kZXgrMlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgQGl0ZW0ub2JqPy5maWxlPyBhbmQgXy5pc1N0cmluZyBAaXRlbS5vYmouZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5saW5lID0gQGl0ZW0ub2JqLmxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHQuY29sICA9IEBpdGVtLm9iai5jb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrbG9nICdqdW1wVG9GaWxlPycgb3B0XG4gICAgICAgICAgICAgICAgZWxzZSBpZiBAaXRlbS5vYmo/LmZpbGU/IGFuZCBfLmlzU3RyaW5nIEBpdGVtLm9iai5maWxlXG4gICAgICAgICAgICAgICAgICAgIG9wdCA9IGZpbGU6QGl0ZW0ub2JqLmZpbGUsIGxpbmU6QGl0ZW0ub2JqLmxpbmUsIGNvbDpAaXRlbS5vYmouY29sdW1uLCBuZXdUYWI6b3B0Lm5ld1RhYlxuICAgICAgICAgICAgICAgICAgICBrbG9nICdqdW1wVG9GaWxlPycgb3B0XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBAYnJvd3Nlci5jbGVhckNvbHVtbnNGcm9tIEBjb2x1bW4uaW5kZXgrMVxuICAgICAgICBAXG4gICAgXG4gICAgaXNBY3RpdmU6IC0+IEBkaXYuY2xhc3NMaXN0LmNvbnRhaW5zICdhY3RpdmUnXG4gICAgXG4gICAgc2V0QWN0aXZlOiAob3B0PXt9KSAtPlxuICAgICAgICBcbiAgICAgICAgaWYgQGNvbHVtbi5hY3RpdmVSb3coKSAhPSBAXG4gICAgICAgICAgICBAY29sdW1uLmFjdGl2ZVJvdygpPy5jbGVhckFjdGl2ZSgpXG4gICAgICAgICAgICBcbiAgICAgICAgQGRpdi5jbGFzc0xpc3QuYWRkICdhY3RpdmUnXG4gICAgICAgIFxuICAgICAgICBpZiBvcHQ/LnNjcm9sbCAhPSBmYWxzZVxuICAgICAgICAgICAgQGNvbHVtbi5zY3JvbGwudG9JbmRleCBAaW5kZXgoKSAgICAgICAgICAgIFxuICAgICAgICBAXG4gICAgICAgICAgICAgICAgIFxuICAgIGNsZWFyQWN0aXZlOiAtPlxuICAgICAgICBAZGl2LmNsYXNzTGlzdC5yZW1vdmUgJ2FjdGl2ZSdcbiAgICAgICAgQFxuICAgICAgICBcbiAgICAjICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgICAgMDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgIDAwMDAwMDAgICAwMDAgICAgICAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwICAgMDAwICBcbiAgICAjICAgICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMDAwMDAgICAgXG4gICAgXG4gICAgaXNTZWxlY3RlZDogLT4gQGRpdi5jbGFzc0xpc3QuY29udGFpbnMgJ3NlbGVjdGVkJ1xuICAgIFxuICAgIHNldFNlbGVjdGVkOiAtPlxuICAgICAgICBAZGl2LmNsYXNzTGlzdC5hZGQgJ3NlbGVjdGVkJ1xuICAgICAgICBAXG4gICAgICAgIFxuICAgIGNsZWFyU2VsZWN0ZWQ6IC0+XG4gICAgICAgIEBkaXYuY2xhc3NMaXN0LnJlbW92ZSAnc2VsZWN0ZWQnXG4gICAgICAgIEBcblxuICAgICMgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwICAgICAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuICAgICMgMDAwIDAgMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAwMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIFxuICAgICAgICAgICAgXG4gICAgZWRpdE5hbWU6ID0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgQGlucHV0PyBcbiAgICAgICAgQGlucHV0ID0gZWxlbSAnaW5wdXQnIGNsYXNzOidyb3dOYW1lSW5wdXQnXG4gICAgICAgIEBpbnB1dC52YWx1ZSA9IHNsYXNoLmZpbGUgQGl0ZW0uZmlsZVxuICAgICAgICBcbiAgICAgICAgQGRpdi5hcHBlbmRDaGlsZCBAaW5wdXRcbiAgICAgICAgQGlucHV0LmFkZEV2ZW50TGlzdGVuZXIgJ2NoYW5nZScgICBAXG4gICAgICAgIFxuICAgICAgICBAaW5wdXQuYWRkRXZlbnRMaXN0ZW5lciAna2V5ZG93bicgIEBvbk5hbWVLZXlEb3duXG4gICAgICAgIEBpbnB1dC5hZGRFdmVudExpc3RlbmVyICdmb2N1c291dCcgQG9uTmFtZUZvY3VzT3V0XG4gICAgICAgIEBpbnB1dC5mb2N1cygpXG4gICAgICAgIFxuICAgICAgICBAaW5wdXQuc2V0U2VsZWN0aW9uUmFuZ2UgMCwgc2xhc2guYmFzZShAaXRlbS5maWxlKS5sZW5ndGhcblxuICAgIG9uTmFtZUtleURvd246IChldmVudCkgPT5cbiAgICAgICAgXG4gICAgICAgIHttb2QsIGtleSwgY29tYm99ID0ga2V5aW5mby5mb3JFdmVudCBldmVudFxuXG4gICAgICAgIHN3aXRjaCBjb21ib1xuICAgICAgICAgICAgd2hlbiAnZXNjJ1xuICAgICAgICAgICAgICAgIGlmIEBpbnB1dC52YWx1ZSAhPSBzbGFzaC5maWxlIEBpdGVtLmZpbGVcbiAgICAgICAgICAgICAgICAgICAgQGlucHV0LnZhbHVlID0gc2xhc2guZmlsZSBAaXRlbS5maWxlXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICAgICBAb25OYW1lRm9jdXNPdXQoKVxuICAgICAgICAgICAgd2hlbiAnZW50ZXInXG4gICAgICAgICAgICAgICAgaWYgQGlucHV0LnZhbHVlICE9IHNsYXNoLmZpbGUgQGl0ZW0uZmlsZVxuICAgICAgICAgICAgICAgICAgICBAb25OYW1lQ2hhbmdlKClcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIEByZW1vdmVJbnB1dCgpXG4gICAgICAgICAgICAgICAgc3RvcEV2ZW50IGV2ZW50XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIFxuICAgIHJlbW92ZUlucHV0OiAtPlxuXG4gICAgICAgIHJldHVybiBpZiBub3QgQGlucHV0P1xuICAgICAgICBAaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lciAnZm9jdXNvdXQnIEBvbk5hbWVGb2N1c091dFxuICAgICAgICBAaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lciAnY2hhbmdlJyAgIEBvbk5hbWVDaGFuZ2VcbiAgICAgICAgQGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIgJ2tleWRvd24nICBAb25OYW1lS2V5RG93blxuICAgICAgICBAaW5wdXQucmVtb3ZlKClcbiAgICAgICAgZGVsZXRlIEBpbnB1dFxuICAgICAgICBAaW5wdXQgPSBudWxsXG4gICAgICAgIGlmIG5vdCBkb2N1bWVudC5hY3RpdmVFbGVtZW50PyBvciBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09IGRvY3VtZW50LmJvZHlcbiAgICAgICAgICAgIEBjb2x1bW4uZm9jdXMgYWN0aXZhdGU6ZmFsc2VcbiAgICBcbiAgICBvbk5hbWVGb2N1c091dDogKGV2ZW50KSA9PiBAcmVtb3ZlSW5wdXQoKVxuICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIFxuICAgIFxuICAgIG9uTmFtZUNoYW5nZTogKGV2ZW50KSA9PlxuICAgICAgICBcbiAgICAgICAgdGFyZ2V0RmlsZSA9IHNsYXNoLmpvaW4gc2xhc2guZGlyKEBpdGVtLmZpbGUpLCBAaW5wdXQudmFsdWUudHJpbSgpXG4gICAgICAgIFxuICAgICAgICBAcmVtb3ZlSW5wdXQoKVxuICAgICAgICBcbiAgICAgICAgQHJlbmFtZSB0YXJnZXRGaWxlXG4gICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwICAgICAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwIDAgMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIFxuICAgIFxuICAgIHJlbmFtZTogKHRhcmdldEZpbGUpID0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaWYgc2xhc2guc2FtZVBhdGggQGl0ZW0uZmlsZSwgdGFyZ2V0RmlsZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICBGaWxlLnJlbmFtZSBAaXRlbS5maWxlLCB0YXJnZXRGaWxlLCAoc291cmNlLCB0YXJnZXQpID0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBjb2x1bW4ucmVtb3ZlUm93IEBcbiAgICAgICAgICAgIEBicm93c2VyLm5hdmlnYXRlVG9GaWxlIHRhcmdldFxuICAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwMCAgICAwMDAwMDAwICAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgIDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgXG4gICAgXG4gICAgIyBvbk1vdXNlRG93bjogKGV2ZW50KSA9PlxuIyAgICAgICAgIFxuICAgICAgICAjIGtsb2cgJ29uTW91c2VEb3duJyBldmVudC5zaGlmdEtleSwgZXZlbnQuYWx0S2V5LCBldmVudC5jdHJsS2V5XG4jICAgICAgICAgXG4gICAgICAgICMgaWYgZXZlbnQuc2hpZnRLZXlcbiAgICAgICAgICAgICMgQGJyb3dzZXIuc2VsZWN0LnRvIEBcbiAgICAgICAgIyBlbHNlIGlmIGV2ZW50Lm1ldGFLZXkgb3IgZXZlbnQuYWx0S2V5IG9yIGV2ZW50LmN0cmxLZXlcbiAgICAgICAgICAgICMgQGJyb3dzZXIuc2VsZWN0LnRvZ2dsZSBAXG4gICAgICAgICMgZWxzZVxuICAgICAgICAgICAgIyBAYnJvd3Nlci5zZWxlY3Qucm93IEAsIGZhbHNlXG4jICAgICBcbiAgICAjIG9uRHJhZ1N0YXJ0OiAoZXZlbnQpID0+XG4jICAgICAgICAgXG4gICAgICAgICMga2xvZyAnZHJhZ1N0YXJ0JyBldmVudC5zaGlmdEtleVxuIyAgICAgICAgIFxuICAgICAgICAjIGlmIGVtcHR5IEBicm93c2VyLnNlbGVjdC5maWxlcygpXG4gICAgICAgICAgICAjIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICMgcmV0dXJuIFxuIyAgICAgICAgIFxuICAgICAgICAjIGlmIG5vdCBAaXNTZWxlY3RlZCgpXG4gICAgICAgICAgICAjIEBjb2x1bW4ub25DbGljayBldmVudFxuICAgICAgICAjIGtsb2cgJ2RyYWdTdGFydCcgQGlzQWN0aXZlKCksIEBpc1NlbGVjdGVkKCksIEBicm93c2VyLnNlbGVjdC5maWxlcygpXG4jICAgICAgICAgXG4gICAgICAgICMgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEgJ3RleHQvcGxhaW4nIEBicm93c2VyLnNlbGVjdC5maWxlcygpLmpvaW4gJ1xcbidcblxuICAgICAgICAjIEBjb2x1bW4uZm9jdXMgYWN0aXZhdGU6ZmFsc2VcbiAgICAgICAgIyBAc2V0QWN0aXZlIHNjcm9sbDpmYWxzZVxuIyAgICAgICAgIFxuICAgICMgb25EcmFnT3ZlcjogKGV2ZW50KSA9PlxuIyAgICAgICAgIFxuICAgICAgICAjIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gZXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSgnU2hpZnQnKSBhbmQgJ2NvcHknIG9yICdtb3ZlJ1xuICAgICAgICAjIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiMgICAgICAgICBcbiAgICAjIG9uRHJvcDogKGV2ZW50KSA9PiBcbiMgICAgIFxuICAgICAgICAjIGlmIEBjb2x1bW4uaW5kZXggPCAwIGFuZCBub3QgZXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSgnU2hpZnQnKSBhbmQgbm90IGV2ZW50LmdldE1vZGlmaWVyU3RhdGUoJ0NvbnRyb2wnKVxuICAgICAgICAgICAgIyBAY29sdW1uLm9uRHJvcCBldmVudFxuICAgICAgICAgICAgIyByZXR1cm5cbiMgICAgICAgICAgICAgXG4gICAgICAgICMgYWN0aW9uID0gZXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSgnU2hpZnQnKSBhbmQgJ2NvcHknIG9yICdtb3ZlJ1xuICAgICAgICAjIHRhcmdldCA9IEBpdGVtPy5maWxlXG4gICAgICAgICMgc291cmNlID0gZXZlbnQuZGF0YVRyYW5zZmVyLmdldERhdGEgJ3RleHQvcGxhaW4nXG4gICAgICAgICMgQGJyb3dzZXIuZHJvcEFjdGlvbiBldmVudCwgQGl0ZW0/LmZpbGVcbiAgICAgICAgIyBzdG9wRXZlbnQgZXZlbnRcblxubW9kdWxlLmV4cG9ydHMgPSBSb3dcbiJdfQ==
//# sourceURL=../coffee/row.coffee